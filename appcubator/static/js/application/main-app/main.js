
//     Underscore.js 1.4.4
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.4.4';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? null : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value || _.identity);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    var args = slice.call(arguments, 2);
    return function() {
      return func.apply(context, args.concat(slice.call(arguments)));
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, result;
    var previous = 0;
    var later = function() {
      previous = new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] == null) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(n);
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD define happens at the end for compatibility with AMD loaders
  // that don't enforce next-turn semantics on modules.
  if (typeof define === 'function' && define.amd) {
    define('underscore',[], function() {
      return _;
    });
  }

}).call(this);

/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );
//     Backbone.js 1.0.0

//     (c) 2010-2013 Jeremy Ashkenas, DocumentCloud Inc.
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {
  // Set up Backbone appropriately for the environment.
  if (typeof exports !== 'undefined') {
    // Node/CommonJS, no need for jQuery in that case.
    factory(root, exports, require('underscore'));
  } else if (typeof define === 'function' && define.amd) {
    // AMD
    define('backbone',['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });
  } else {
    // Browser globals
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }
}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.0.0';

  // For Backbone's purposes, jQuery, Zepto, or Ender owns the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({
        callback: callback,
        context: context,
        ctx: context || this
      });
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = {};
        return this;
      }

      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeners = this._listeners;
      if (!listeners) return this;
      var deleteListener = !name && !callback;
      if (typeof name === 'object') callback = this;
      if (obj)(listeners = {})[obj._listenerId] = obj;
      for (var id in listeners) {
        listeners[id].off(name, callback, this);
        if (deleteListener) delete this._listeners[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1,
      l = events.length,
      a1 = args[0],
      a2 = args[1],
      a3 = args[2];
    switch (args.length) {
      case 0:
        while (++i < l)(ev = events[i]).callback.call(ev.ctx);
        return;
      case 1:
        while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1);
        return;
      case 2:
        while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);
        return;
      case 3:
        while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
        return;
      default:
        while (++i < l)(ev = events[i]).callback.apply(ev.ctx, args);
    }
  };

  var listenMethods = {
    listenTo: 'on',
    listenToOnce: 'once'
  };

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeners = this._listeners || (this._listeners = {});
      var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));
      listeners[id] = obj;
      if (typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var defaults;
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    _.extend(this, _.pick(options, modelOptions));
    if (options.parse) attrs = this.parse(attrs, options) || {};
    
    if (attrs.generate) {
      this.generate = attrs.generate;
      attrs = attrs.data;
      attributes = attrs;
    }

    if (defaults = _.result(this, 'defaults')) {
      attrs = _.defaults({}, attrs, defaults);
    }

    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // A list of options to be attached directly to the model, if provided.
  var modelOptions = ['url', 'urlRoot', 'collection'];

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function() {},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset = options.unset;
      silent = options.silent;
      changes = [];
      changing = this._changing;
      this._changing = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = true;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {
        unset: true
      }));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {
        unset: true
      }));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      // If we're not waiting and attributes exist, save acts as `set(attr).save(null, opts)`.
      if (attrs && (!options || !options.wait) && !this.set(attrs, options)) return false;

      options = _.extend({
        validate: true
      }, options);

      // Do not persist invalid models.
      if (!this._validate(attrs, options)) return false;

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();
      if (this.isNew()) return base;
      return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return this.id == null;
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, {
        validate: true
      }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options || {}, {
        validationError: error
      }));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.url) this.url = options.url;
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();

    if(models && models.generate) {
      this.generate = models.generate;
      models = models.data;
    }

    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({
      silent: true
    }, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {
    add: true,
    remove: true,
    merge: true
  };
  var addOptions = {
    add: true,
    merge: false,
    remove: false
  };

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function() {},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model) {
        return model.toJSON(options);
      });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.defaults(options || {}, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      models = _.isArray(models) ? models.slice() : [models];
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model);
      }
      return this;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults(options || {}, setOptions);
      if (options.parse) models = this.parse(models, options);
      if (!_.isArray(models)) models = models ? [models] : [];
      var i, l, model, attrs, existing, sort;
      var at = options.at;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [],
        toRemove = [],
        modelMap = {};

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        if (!(model = this._prepareModel(models[i], options))) continue;

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(model)) {
          if (options.remove) modelMap[existing.cid] = true;
          if (options.merge) {
            existing.set(model.attributes, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }

          // This is a new model, push it to the `toAdd` list.
        } else if (options.add) {
          toAdd.push(model);

          // Listen to added models' events, and index models for lookup by
          // `id` and by `cid`.
          model.on('all', this._onModelEvent, this);
          this._byId[model.cid] = model;
          if (model.id != null) this._byId[model.id] = model;
        }
      }

      // Remove nonexistent models if appropriate.
      if (options.remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          splice.apply(this.models, [at, 0].concat(toAdd));
        } else {
          push.apply(this.models, toAdd);
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({
        silent: true
      });

      if (options.silent) return this;

      // Trigger `add` events.
      for (i = 0, l = toAdd.length; i < l; i++) {
        (model = toAdd[i]).trigger('add', model, this, options);
      }

      // Trigger `sort` if the collection was sorted.
      if (sort) this.trigger('sort', this, options);
      return this;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i]);
      }
      options.previousModels = this.models;
      this._reset();
      this.add(models, _.extend({
        silent: true
      }, options));
      if (!options.silent) this.trigger('reset', this, options);
      return this;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, _.extend({
        at: this.length
      }, options));
      return model;
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, _.extend({
        at: 0
      }, options));
      return model;
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function(begin, end) {
      return this.models.slice(begin, end);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj.id != null ? obj.id : obj.cid || obj];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Figure out the smallest index at which a model should be inserted so as
    // to maintain order.
    sortedIndex: function(model, value, context) {
      value || (value = this.comparator);
      var iterator = _.isFunction(value) ? value : function(model) {
          return model.get(value);
        };
      return _.sortedIndex(this.models, model, iterator, context);
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options || (options = {});
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model._validate(attrs, options)) {
        this.trigger('invalid', this, attrs, options);
        return false;
      }
      return model;
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf',
    'isEmpty', 'chain'
  ];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
          return model.get(value);
        };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    this._configure(options || {});
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be prefered to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function() {},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save'
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1],
          selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Performs the initial configuration of a View with a set of options.
    // Keys with special meaning *(e.g. model, collection, id, className)* are
    // attached directly to the view.  See `viewOptions` for an exhaustive
    // list.
    _configure: function(options) {
      if (this.options) options = _.extend({}, _.result(this, 'options'), options);
      _.extend(this, _.pick(options, viewOptions));
      this.options = options;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {
      type: type,
      dataType: 'json'
    };

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {
        model: params.data
      } : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && window.ActiveXObject && !(window.external && window.external.msActiveXFilteringEnabled)) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch': 'PATCH',
    'delete': 'DELETE',
    'read': 'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam = /(\(\?)?:\w+/g;
  var splatParam = /\*\w+/g;
  var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function() {},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        callback && callback.apply(router, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
        .replace(optionalParam, '(?:$1)?')
        .replace(namedParam, function(match, optional) {
          return optional ? match : '([^\/]+)';
        })
        .replace(splatParam, '(.*?)');
      return new RegExp('^' + route + '$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param) {
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = this.location.pathname;
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options = _.extend({}, {
        root: '/'
      }, this.options, options);
      this.root = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState = !! this.options.pushState;
      this._hasPushState = !! (this.options.pushState && this.history && this.history.pushState);
      var fragment = this.getFragment();
      var docMode = document.documentMode;
      var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        this.iframe = Backbone.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;
      var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === this.root;

      // If we've started off with a route from a `pushState`-enabled browser,
      // but we're currently in a browser that doesn't support it...
      if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {
        this.fragment = this.getFragment(null, true);
        this.location.replace(this.root + this.location.search + '#' + this.fragment);
        // Return immediately as browser will do redirect to new url
        return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
      } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {
        this.fragment = this.getHash().replace(routeStripper, '');
        this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({
        route: route,
        callback: callback
      });
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl() || this.loadUrl(this.getHash());
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragmentOverride) {
      var fragment = this.fragment = this.getFragment(fragmentOverride);
      var matched = _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
      return matched;
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {
        trigger: options
      };
      fragment = this.getFragment(fragment || '');
      if (this.fragment === fragment) return;
      this.fragment = fragment;
      var url = this.root + fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

        // If hash changes haven't been explicitly disabled, update the hash
        // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

        // If you've told us that you explicitly don't want fallback hashchange-
        // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function() {
        return parent.apply(this, arguments);
      };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function() {
      this.constructor = child;
    };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;
}));
define('models/AppInfoModel',[
"backbone"
],
function() {

  var AppInfoModel = Backbone.Model.extend({
    initialize: function(bone) {
      // this.set("name", bone.name);
      this.set("description", bone.description||"");
      this.set("keywords", bone.keywords||"");
    }
  });

  return AppInfoModel;
});
define('models/FieldModel',['backbone'], function() {

    var FieldModel = Backbone.Model.extend({
        defaults: {
            "name": "Property Name",
            "type": "text"
        },

        // return a string version of the relationship
        getNLType: function() {
            var type = this.get('type');

            if (type == "o2o" || type == "fk") {
                return "Has one " + this.get('entity_name');
            }
            if (type == "m2m") {
                return "List of " + this.get('entity_name');
            }

            var nlType = this.nlTable[type];

            return nlType;
        },

        isRelatedField: function() {
            var type = this.get('type');
            return (type == "o2o" || type == "fk" || type == "m2m");
        },

        // return the relationship type
        getNL: function() {
            var type = this.get('type');

            // if(type == "o2o"){
            //   return
            // } || type == "fk") {
            //   return this.get('entity_name');
            // }
            // if(type == "m2m") {
            //   return "List of " + this.get('entity_name');
            // }

            // var nlType = this.nlTable[type];

            // return nlType;
        },

        // since o2m relationships are stored in the other entity as an fk,
        // find entities which relate to this model with an fk
        getOneToManyRelationships: function() {
            var self = this;
            var otherEntities = Array.prototype.concat.apply(v1State.get('tables').models, v1State.get('users').models);
            otherEntities = _.without(otherEntities, this);
            return _.filter(otherEntities, function(entity) {
                return (entity.get('type') === 'fk' && entity.get('entity_name') == self.get('name'));
            });
        },

        validate: function() {
            var valid = true;
            var name = this.get('name');
            if (!util.isAlphaNumeric(name) || util.doesStartWithKeywords(name)) {
                return false;
            }
        },

        nlTable: {
            "text": 'Text',
            "number": 'Number',
            "email": 'Email',
            "image": 'Image',
            "date": 'Date',
            "file": 'File'
        }

    });

    return FieldModel;

});
define('collections/FieldsCollection',[
  'models/FieldModel'
],
function(FieldModel) {

  var FieldsCollection = Backbone.Collection.extend({
    model : FieldModel,
    uniqueKeys: ["name"],
    getImageFields: function() {
      return this.filter(function(fieldM) { return fieldM.get('type') == "image"; });
    }
  });

  return FieldsCollection;
});
define('models/WhereModel',[
"backbone"
],
function() {

  var WhereModel = Backbone.Model.extend({
    initialize: function(bone) { }
  });

  return WhereModel;
});

define('collections/WhereCollection',["models/WhereModel", "backbone"],
function(WhereModel) {

  var WhereCollection = Backbone.Collection.extend({
    model: WhereModel,
    removeClauseWithName: function (keyStr) {
      this.each(function(clause) {
        if(clause.get('field_name') == keyStr) {
          this.remove(clause);
        }
      });
    }
  });

  return WhereCollection;
});

define('app/Generator',['require','exports','module','underscore'],function(require, exports, module) {

    'use strict';

    var _ = require('underscore');

    var Generator = function(generatorPath) {
        var Vm = function() {

            this.runCode = function(code, globals) {
                var templates = globals.templates;
                var data = globals.data;
                var expand = globals.expand;
                return eval(code);
            };

        };

        var VM = new Vm();
        this.expander = expanderfactory(function(code, globals) {
            return VM.runCode(code, globals);
        });

        if(generatorPath) { return this.getGenerator(generatorPath); }
    };

    Generator.prototype.generate = function(generatorPath, data) {
        var aState = v1State.serialize();
        return this.expander.expand(aState.plugins, aState.generators, {generate: generatorPath, data: data});
    };

    Generator.prototype.getGenerator = function(generatorPath) {
        console.log(generatorPath);
        var aState = v1State.serialize();
        console.log(aState);
        return this.expander.findGenData(aState.plugins, aState.generators, this.expander.parseGenID(generatorPath));
    };

    return Generator;

});

define('models/TableCodeModel',[
  'collections/WhereCollection',
  'app/Generator',
  'backbone',
], function(WhereCollection, Generator) {

  var TableCodeModel = Backbone.Model.extend({
  	/* Note that this may have name/code or it may be a generator */

    initialize: function(bone, entityModel) {
      if ('generate' in this){
      	// XXX note the backbone generate hack
      	this.data = bone; // IDK how to make backbone work with generators.
      } else {
        this.set('code', bone.code||"");
        this.set('name', bone.name||"default");
      }
      _.bindAll(this);

    },

    isGenerator: function(){
    	return this.generate !== undefined;
    },

    getGenerated: function(){
    	// TODO stop making objects of Generator every time
    	if (this.isGenerator()) {
	    	return new Generator().generate(this.generate, this.data);
    	} else {
    		return this.serialize();
    	}
    },

    getCode: function(){
    	if (this.isGenerator()) {
	    	return new Generator().generate(this.generate, this.data).code;
    	} else {
    		return this.get('code');
    	}
    },

  });

  return TableCodeModel;
});
define('models/TableModel',[
    'require',
    'collections/FieldsCollection',
    'models/TableCodeModel',
    'backbone'
], function(require) {

    var FieldsCollection = require('collections/FieldsCollection');
    var TableCodeModel = require('models/TableCodeModel');
    var Backbone = require('backbone');

    var TableModel = Backbone.Model.extend({
        defaults: {
            fields: new FieldsCollection()
        },

        initialize: function(bone) {

            if (typeof bone === "string") {
                if (bone === "User") {
                    alert('TableModel init isnt supposed to receive user');
                    return;
                }
                bone = _.findWhere(appState.entities, {
                    name: bone
                });
            }

            if (bone.name) {
                this.set('name', bone.name || "New Table");
            }

            this.set('fields', new FieldsCollection());
            if (bone.fields) {
                this.get('fields').add(bone.fields);
            }

            var TableCodeCollection = Backbone.Collection.extend({model:TableCodeModel});
            this.set('functions', new TableCodeCollection(bone.functions||[]));

            this.isUser = false;
        },

        serialize: function() {
            var json = {};
            json = _.clone(this.attributes);
            json.fields = this.get('fields').serialize();
            return json;
        },

        addFieldsWithNames: function(nameArr) {
            _(nameArr).each(function(name) {
                this.get('fields').push({
                    name: name
                });
            }, this);
        },

        getFieldsColl: function() {
            var arr = this.get('fields');
            return arr;
        },

        getNormalFields: function() {
            var normalFields = this.get('fields').filter(function(field) {
                return !field.isRelatedField();
            });
            return normalFields;
        },

        getRelationalFields: function() {
            var relationalFields = this.get('fields').filter(function(field) {
                return field.isRelatedField();
            });
            return relationalFields;
        },

        hasMoneyField: function() {
            return (this.getMoneyField() !== null);
        },

        getMoneyField: function() {
            var moneyField = null;
            this.getFieldsColl().each(function(_fieldM) {
                if (_fieldM.get('type') == "money") {
                    moneyField = _fieldM;
                    return;
                }
            }, this);
            return moneyField;
        }
    });

    return TableModel;
});

define('models/UserTableModel',[
  'models/TableModel',
  'models/FieldModel',
  'collections/FieldsCollection',
  'backbone'
],
function(TableModel, FieldModel, FieldsCollection, Backbone) {

  var UserTableModel = TableModel.extend({

    initialize: function(bone) {

      if(typeof bone === "string") {
        bone = appState.users;
      }
      this.set('fields', new FieldsCollection(bone.fields || []));
      this.isUser = true;
    },

    getFieldsColl: function() {
      var arr = _.union(v1State.get('users').predefinedFields, this.get('fields').models);
      var coll = new FieldsCollection(arr);
  
      coll.on('add', function(models) {
        this.get('fields').add(models);
      }, this);

      coll.on('remove', function(models) {
        this.get('fields').remove(models);
      }, this);

      return coll;
    },

    getNormalFields: function() {
      var normalFields = this.get('fields').filter(function(field) { return !field.isRelatedField(); });
      normalFields = _.union(normalFields, v1State.get('users').predefinedFields);
      return normalFields;
    },

    serialize: function () {
      var json = {};
      json        = _.clone(this.attributes);
      json.fields = this.get('fields').serialize();
      json.fields = _.uniq(json.fields, function(val) { return val.name; });
      json.fields = _.filter(json.fields, function(val){ return (val.name != "First Name")&&(val.name != "Last Name");});

      return json;
    }

  });

  return UserTableModel;
});

define('collections/TableCollection',[
        'models/TableModel'
    ],
    function(TableModel) {

        var TableCollection = Backbone.Collection.extend({
            model: TableModel,
            uniqueKeys: ["name"],

            createTableWithName: function(nameStr) {
                return this.push({
                    name: nameStr
                });
            },

            getTableWithName: function(tableNameStr) {
                var table = this.where({
                    name: tableNameStr
                })[0];
                return table;
            },

            getRelationsWithEntityName: function(tableNameStr) {
                var arrFields = [];
                this.each(function(table) {
                    table.get('fields').each(function(fieldModel) {
                        if (fieldModel.has('entity_name') && fieldModel.get('entity_name') == tableNameStr) {
                            var obj = fieldModel.serialize();
                            obj.cid = fieldModel.cid;
                            obj.entity = table.get('name');
                            obj.entity_cid = table.cid;
                            arrFields.push(obj);
                        }
                    });
                });

                return arrFields;
            },

            getAllRelations: function() {
                return this.reduce(function(memo, model) {
                    return _.union(memo, model.getRelationalFields());
                }, []);
            },

            isNameUnique: function(name) {
                isUnique = true;
                this.each(function(table) {
                    if (table.get('name') === name) isUnique = false;
                });
                return isUnique;
            }

        });

        return TableCollection;
    });
define('collections/UserRolesCollection',[
    'models/UserTableModel',
    'models/FieldModel',
    'collections/TableCollection'
], function(UserTableModel, FieldModel, TableCollection) {

    var UserRolesCollection = TableCollection.extend({
        model: UserTableModel,
        predefinedFields: [],
        uniqueKeys: ["name"],

        initialize: function() {
            this.predefinedFields.push(new FieldModel({
                name: "username"
            }));
            this.predefinedFields.push(new FieldModel({
                name: "First Name"
            }));
            this.predefinedFields.push(new FieldModel({
                name: "Last Name"
            }));
            this.predefinedFields.push(new FieldModel({
                name: "Email"
            }));
        },

        /* create functions */
        createUserWithName: function(nameStr) {
            return this.push({
                name: nameStr
            });
        },
        /* get functions */

        getUserTableWithName: function(tableNameStr) {
            var table = this.where({
                name: tableNameStr
            })[0];
            return table;
        },

        getCommonProps: function() {
            var fields = [];
            if (this.length > 0) {
                fields = this.at(0).get('fields').models;
            }
            this.each(function(model) {
                fields = _.union(fields, model.get('fields').models);
            });


            fields = _.uniq(fields, function(obj) {
                return obj.attributes.name;
            });
            fields = _.union(fields, this.predefinedFields);
            return fields;
        }

    });

    return UserRolesCollection;
});
define('models/EmailModel',[
  'backbone'
],
function() {

  var EmailModel = Backbone.Model.extend({
    defaults : {
		"name"      : "New Email",
		"subject"   : "New Subject",
		"content"   : "Hello. Hello."
    }
  });

  return EmailModel;
});

define('collections/EmailCollection',[
  'backbone',
  'models/EmailModel'
],
function(Backbone,
         EmailModel) {

  var EmailCollection = Backbone.Collection.extend({
    model: EmailModel,

    getEmailWithName: function(emailNameStr) {
      var email = this.where({name : emailNameStr })[0];
      return email;
    }
  });

  return EmailCollection;
});
define('models/LinkModel',['backbone'],
function(Backbone) {
  var LinkModel = Backbone.Model.extend({
    defaults : {
      title: 'Homepage',
      url: 'internal://Homepage'
    }
  });

  return LinkModel;
});

define('collections/LinkCollection',[
  'models/LinkModel'
],
function(LinkModel) {

  var LinkCollection = Backbone.Collection.extend({
    model: LinkModel
  });

  return LinkCollection;
});

define('models/NavbarModel',[
  'collections/LinkCollection'
],
function(LinkCollection) {

  var NavbarModel = Backbone.Model.extend({
    defaults : {
      brandName : null,
      isHidden : false,
      isFixed : true
    },
    initialize: function(bone) {

      this.setGenerator("templates.navbar");
      //init items collection with links passed from appState
      this.set('links', new LinkCollection(bone.links||[]));

    },

    getLinks: function() {
      return this.get('links');
    },

    toJSON: function() {
      var json = _.clone(this.attributes);
      json.links = this.get('links').serialize();
      return json;
    }

  });

  return NavbarModel;
});

define('models/FooterModel',[
	'collections/LinkCollection'
],
function(LinkCollection) {

  var FooterModel = Backbone.Model.extend({

    defaults : {
      customText: "Copyright 2014",
      isHidden  : false,
      isFixed   : true
    },

    initialize: function(bone) {

      this.setGenerator("templates.footer");
      //init items collection with links passed from appState
      this.set('links', new LinkCollection(bone.links||[ {
        title: "Powered by Appcubator",
        url:   "http://appcubator.com" }
      ]));

      this.links = this.get('links');
    },

    getLinks: function() {
      return this.get('links');
    },

    toJSON: function() {
      var json = _.clone(this.attributes);
      json.links = json.links.serialize();
      return json;
    }
  });

  return FooterModel;
});

define('models/ContentModel',['backbone'], function(Backbone) {
  var ContentModel = Backbone.Model.extend({

    initialize: function(bone) {
      if(bone.src && util.isInternalData(bone.src)) {
        this.set('src_content', _.clone(bone.src));
        this.set('src', "/static/img/placeholder.png");
      }
    },

    serialize: function() {
      var json = _.clone(this.attributes);
      if(json.src_content) {
        json.src = json.src_content;
      }
      delete json.src_content;
      return json;
    }

  });
  return ContentModel;
});
define('models/QueryModel',[
  'collections/WhereCollection',
  'backbone'
], function(WhereCollection) {

  var QueryModel = Backbone.Model.extend({

    initialize: function(bone, entityModel) {
      this.entity = entityModel;
      this.set('fieldsToDisplay', bone.fieldsToDisplay||[]);
      this.set('sortAccordingTo', bone.sortAccordingTo||"-Date");
      this.set('numberOfRows', bone.numberOfRows||-1);
      this.set('where', new WhereCollection(bone.where||[]));
    },

    serialize: function () {
      var json = _.clone(this.attributes);
      json.where = json.where.serialize();

      return json;
    }

  });

  return QueryModel;
});
define('models/FormFieldModel',[
        'backbone'
    ],
    function() {

        var FormFieldModel = Backbone.Model.extend({
            initialize: function(bone) {
                this.set('field_name', bone.field_name);
                if (bone.type) {
                    this.set('type', bone.type);
                }

                this.set('label', (bone.label || bone.name));
                this.set('placeholder', (bone.placeholder || bone.name) || "placeholder");
                this.set('required', (bone.required || true));

                if (!this.generate) {
                    this.generate = "crud.uielements.form-field";
                }
            },

            toJSON: function() {
                var json = _.clone(this.attributes);
                if (json.displayType == "button") {
                    json = _.omit(json, 'options');
                }
                return json;
            }
        });

        return FormFieldModel;

    });
define('util',['backbone'], function() {

    var util = {

        log_to_server: function(key_str, val_dict, app_id) {
            /*_.each(val_dict, function(val, key) {
            util.assert((typeof key) == (typeof ''));
            util.assert((typeof val) == (typeof ''));
        });*/

            /*val_dict['__key'] = key_str;
        if (app_id)
            val_dict['__app_id'] = app_id;*/
            var logData = {
                '__key': key_str,
                '__app_id': app_id,
                '__data': JSON.stringify(val_dict, undefined, 2)
            };
            $.post('/log/anything/', logData);
        },

        assert: function(inp) {
            if (!inp) {
                console.trace();
                alert('Important Error!');
            }
        },

        setCursor: function(node, pos) {
            var node = (typeof node == "string" || node instanceof String) ? document.getElementById(node) : node;
            if (!node) {
                return false;
            } else if (node.createTextRange) {
                var textRange = node.createTextRange();
                textRange.collapse(true);
                textRange.moveEnd(pos);
                textRange.moveStart(pos);
                textRange.select();
                return true;
            } else if (node.setSelectionRange) {
                node.setSelectionRange(pos, pos);
                return true;
            }
            return false;
        },

        get: function(id) {
            return document.getElementById(id);
        },

        getHTML: function(id) {
            if (!document.getElementById(id)) return null;

            return (document.getElementById(id).innerHTML) || null;
        },

        askBeforeLeave: function(message) {
            window.onbeforeunload = function() {
                return ('You have some unsaved changes.');
            };
        },

        dontAskBeforeLeave: function() {
            window.onbeforeunload = null;
        },

        startAjaxLoading: function() {
            if (!document.getElementById('ajax-loader')) {
                var div = document.createElement('div');
                div.id = 'ajax-loader';
                document.body.appendChild(div);
            }
        },

        stopAjaxLoading: function(txt) {
            if (document.getElementById('ajax-loader')) {
                var child = document.getElementById('ajax-loader');
                child.parentNode.removeChild(child);
            }

            if (txt) {
                var notifId = 'notif-' + Math.floor(Math.random() * 11);
                var notifDiv = document.createElement('div');
                notifDiv.id = notifId;
                notifDiv.className = "fadeIn notification";
                notifDiv.innerHTML = txt;
                document.body.appendChild(notifDiv);

                setTimeout(function() {
                    var elem = document.getElementById(notifId);
                    $(elem).fadeOut(220, function() {
                        $(this).remove();
                    });
                    //.parentNode.removeChild(elem);
                }, 800);
            }
        },

        loadCSS: function(css) {
            if (!document.getElementById('css-' + css)) {
                var cssFile = document.createElement('link');
                cssFile.setAttribute('type', 'text/css');
                cssFile.setAttribute('href', '/static/css/' + css + '.css');
                cssFile.setAttribute('rel', 'stylesheet');
                cssFile.id = 'css-' + css;
            }
        },

        unloadCSS: function(css) {
            var tag = document.getElementById('css-' + css);
            tag.parentNode.removeChild(tag);
        },

        loadDirectory: function(directory, css) {
            var cssFile = document.createElement('link');
            cssFile.setAttribute('type', 'text/css');
            cssFile.setAttribute('href', directory);
            cssFile.setAttribute('rel', 'stylesheet');
            cssFile.id = 'css-' + css;
            document.getElementsByTagName('head')[0].appendChild(cssFile);
        },

        isMouseOn: function(pageX, pageY, element, extraClickArea) {
            extraClickArea = extraClickArea || 0;

            mouseX = pageX;
            mouseY = pageY;
            var div = $(element);
            divTop = div.offset().top;
            divLeft = div.offset().left;
            divRight = divLeft + div.width() + 2 * extraClickArea;
            divBottom = divTop + div.height() + 2 * extraClickArea;
            if (mouseX >= divLeft && mouseX <= divRight && mouseY >= divTop && mouseY <= divBottom) {
                return true;
            }
            return false;
        },

        isRectangleIntersectElement: function(a1x, a1y, a2x, a2y, elem) {
            var div = $(elem);
            if (!div.offset()) return false;

            var windowScrollDown = $(window).scrollTop();
            var divTop = div.offset().top - windowScrollDown;
            var divLeft = div.offset().left;
            var divRight = divLeft + div.width();
            var divBottom = divTop + div.height();

            return this.isRectanglesIntersect(a1x, a1y, a2x, a2y, divLeft, divTop, divRight, divBottom);
        },

        isRectanglesIntersect: function(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {

            var minAx = ax1;
            var minAy = ay1;
            var maxAx = ax1;
            var maxAy = ay1;
            var minBx = bx1;
            var minBy = by1;
            var maxBx = bx1;
            var maxBy = by1;

            if (ax1 < ax2) {
                maxAx = ax2;
            } else {
                minAx = ax2;
            }
            if (ay1 < ay2) {
                maxAy = ay2;
            } else {
                minAy = ay2;
            }

            if (bx1 < bx2) {
                maxBx = bx2;
            } else {
                minAx = ax2;
            }
            if (by1 < by2) {
                maxBy = by2;
            } else {
                minBy = by2;
            }

            return this.rectanglesIntersect(minAx, minAy, maxAx, maxAy, minBx, minBy, maxBx, maxBy);

        },

        rectanglesIntersect: function(minAx, minAy, maxAx, maxAy, minBx, minBy, maxBx, maxBy) {
            var aLeftOfB = maxAx < minBx;
            var aRightOfB = minAx > maxBx;
            var aAboveB = minAy > maxBy;
            var aBelowB = maxAy < minBy;

            return !(aLeftOfB || aRightOfB || aAboveB || aBelowB);
        },

        isPlural: function(str) {
            if (str && str.length > 0) {
                var lastChar = str.charAt(str.length - 1);
                return (lastChar === 's' || lastChar === 'S');
            }
        },

        pluralize: function(str) {
            if (str && str.length > 0) {
                if (str === "pass" || str === "Pass" || str === "PASS") return str;
                var lastChar = str.charAt(str.length - 1);
                return (lastChar === 's' || lastChar === "S") ? str + 'es' : str + 's';
            }
        },

        singularize: function(str) {
            if (str && str.length > 0) {
                var lastChar = str.charAt(str.length - 1);
                return (lastChar === 's' || lastChar === "S") ? str.substring(0, str.length - 1) : str;
            }
        },

        scrollToElement: function($el) {
            var height = $el.offset().top - 90;
            $('html, body').animate({
                scrollTop: height
            }, 'slow', 'swing');
        },

        scrollToBottom: function($el) {
            $el.stop(true, false);
            $el.animate({
                scrollTop: $el[0].scrollHeight
            }, 'slow', 'swing');
        },

        isAlphaNumeric: function(str) {
            var patt = /^[a-z0-9\s]+$/i;
            return patt.test(str);
        },

        doesStartWithKeywords: function(str) {
            if (!str) {
                return false;
            }
            var ind1 = str.indexOf('Page');
            var ind2 = str.indexOf('Form');
            var ind3 = str.indexOf('loop');

            return (!ind1 || !ind2 || !ind3);
        },

        getDisplayType: function(fieldType) {
            switch (fieldType) {
                case "text":
                case "date":
                case "number":
                case "money":
                case "email":
                    return "texts";
                case "image":
                    return "images";
                case "file":
                    return "links";
            }

            return null;
        },

        isInternalData: function(str) {
            if (str.indexOf("{{") === 0) return true;
            return false;
        },

        capitaliseFirstLetter: function(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        },

        selectText: function($el) {
            var doc = document;
            var element = $el.get(0);
            var range;

            if (doc.body.createTextRange) {
                range = document.body.createTextRange();
                range.moveToElementText(element);
                range.select();
            } else if (window.getSelection) {
                var selection = window.getSelection();
                range = document.createRange();
                range.selectNodeContents(element);
                selection.removeAllRanges();
                selection.addRange(range);
            }
        },

        unselectText: function() {
            if (document.selection) {
                document.selection.empty();
            } else if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }
        },

        findPos: function(obj) {
            var curleft = curtop = 0;

            if (obj.style.position == "fixed") return [1, 1];
            if (obj.offsetParent) {
                do {
                    curleft += obj.offsetLeft;
                    curtop += obj.offsetTop;
                } while (obj = obj.offsetParent);
            }

            return [curleft, curtop];
        },

        waitUntilAppears: function(selector, callbackFn, cont_args, count, timer) {
            if (!timer) timer = {};
            clearTimeout(timer);
            var cnt = (count || 0);

            el = document.querySelector(selector);
            if (el && !el.tagName) {
                el = el[0];
            }

            var repeat = function() {
                cnt++;
                timer = window.setTimeout(function() {
                    util.waitUntilAppears.call(this, selector, callbackFn, cont_args, cnt, timer);
                }, 500);
            };

            var fail = function() {
                alert('There has been a problem with the flow of the Walkthrough. Please refresh your page. Don\'t worry, you\'ll start from where you left off!');
            };

            if (cnt > 60) return fail();
            if (!el) return repeat();

            var pos = util.findPos(el);

            if ($(el).height() === 0 || $(el).width() === 0 || pos[0] === 0 || pos[1] === 0) return repeat();
            callbackFn.apply(undefined, cont_args);
        },

        threeDots: function() {
            var el = document.createElement('span');
            el.style.marginLeft = 0;
            el.style.width = '12px';
            el.style.textAlign = 'left';
            var currentNmr = 1;
            var timer = setInterval(function() {
                nmr = (currentNmr % 3);
                var str = '.';
                for (var ii = 0; ii < nmr; ii++) {
                    str += '.';
                }
                el.innerHTML = str;
                currentNmr++;
            }, 200);

            var obj = {};
            obj.el = el;
            obj.timer = timer;

            return obj;
        },

        copyToClipboard: function(text) {
            window.prompt("Copy to clipboard: Ctrl+C/Cmd+C, Enter", text);
        },

        addOverlay: function(el) {
            var $el = $(el);
            var overlayEl = document.createElement('div');
            overlayEl.className = 'global-overlay';
            var position = $el.offset();
            overlayEl.style.position = 'fixed';
            overlayEl.style.top = position.top + 'px';
            overlayEl.style.left = position.left + 'px';
            overlayEl.style.width = $el.outerWidth() + 'px';
            overlayEl.style.height = $el.outerHeight() + 'px';
            document.body.appendChild(overlayEl);

            $(overlayEl).one('click', function(e) {
                $(e.currentTarget).remove();
            });

            return overlayEl;
        },

        addShadow: function(el, pageWrapper, frame, doc) {
            var $el = $(el);
            frame = frame || window;

            var overlayEl = document.createElement('div');
            overlayEl.className = 'global-overlay';
            var position = $el.offset();
            if(doc) {
                position.top -= $(doc).scrollTop();
            }

            if(frame != window) {
                var n = $(frame).offset().top - $(pageWrapper).offset().top;
                position.top += n;
            }

            overlayEl.style.position = 'fixed';
            overlayEl.style.top = position.top + 'px';
            overlayEl.style.left = position.left + 'px';
            overlayEl.style.width = $el.outerWidth() + 'px';
            overlayEl.style.height = $el.outerHeight() + 'px';
            //overlayEl.style.color = 'red';
            overlayEl.style.fontSize = '24px';
            //overlayEl.style.border = '1px solid #ccc';

            return overlayEl;
        },

        guideText: function(e, text) {
            var div = document.createElement('div');
            div.innerHTML = text;
            div.style.position = "fixed";
            div.style.top = e.pageY + 'px';
            div.style.left = e.pageX + 'px';
            div.style.color = "#666";
            div.style.zIndex = 3003;
            document.body.appendChild(div);
            $(div).delay(200).fadeOut(function() {
                $(div).remove();
            });
        },

        isString: function(obj) {
            return toString.call(obj) == '[object String]';
        },

        getWindowRelativeOffset: function(parentWindow, elem) {
            var offset = {
                left : 0,
                top : 0
            };

            if(!elem) return offset;
            // relative to the target field's document
            offset.left = elem.getBoundingClientRect().left;
            offset.top = elem.getBoundingClientRect().top;
            // now we will calculate according to the current document, this current
            // document might be same as the document of target field or it may be
            // parent of the document of the target field
            var childWindow = elem.ownerDocument;
            // while (childWindow != parentWindow) {
            //     offset.left = offset.left + childWindow.body.getBoundingClientRect().left;
            //     offset.top = offset.top + childWindow.body.getBoundingClientRect().top;
            //     childWindow = childWindow.parent;
            // }

            return offset;
        },

        addLoadingSpin: function (domEl) {
            var spinner = document.createElement('img');
            spinner.src = '/static/img/spinner.gif';
            spinner.className = 'generic-spinner';
            domEl.appendChild(spinner);
            
            return spinner;
        },

        packageModuleName: function(generatorName) {
            return expanderfactory(function(code, globals) { }).parseGenID(generatorName);
        }

    };

    function csrfSafeMethod(method) {
        // these HTTP methods do not require CSRF protection
        return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
    }

    function getCookie(name) {
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {

            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    $(function() {
        /* adds csrftoke to every ajax request we send */
        $.ajaxSetup({
            crossDomain: false, // obviates need for sameOrigin test
            beforeSend: function(xhr, settings) {
                if (!csrfSafeMethod(settings.type)) {
                    var token = getCookie('csrftoken');
                    xhr.setRequestHeader("X-CSRFToken", token);
                }
            }
        });
    });

    $(function() {
        /* prevents submitting twice */
        $('form').on('submit', function(e) {
            $(e.target).on('submit', function(e) {
                e.preventDefault();
            });
        });
    });

    document.addEventListener("touchstart", function() {}, true);

    window.util = util;

    if (typeof window.define === "function" && window.define.amd) {
        window.define("util", [], function() {
            return window.util;
        });
    }

    return util;

});
define('mixins/BackboneConvenience',[
        'backbone',
        'app/Generator',
        'util'
    ],

    function(Backbone, Generator) {

        Backbone.View.prototype.close = function() {

            this.undelegateEvents();
            this.$el.removeData().unbind();
            this.remove();
            this.unbind();

            if (this.subviews) {
                _(this.subviews).each(function(subview) {
                    subview.close();
                });
                this.subviews = null;
            }
        };

        Backbone.View.prototype._ensureElement = function() {
            if (!this.el) {
                var attrs = {};
                if (this.id) attrs.id = _.result(this, 'id');
                if (this.className) attrs['class'] = _.result(this, 'className');
                var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
                this.setElement($el, false);
            } else {
                this.setElement(_.result(this, 'el'), false);
            }

            if (this.css) {
                util.loadCSS(this.css);
            }
        };

        Backbone.isModel = function(obj) {
            if (obj && obj.attributes) return true;
            return false;
        };

        Backbone.isCollection = function(obj) {
            if (obj && obj.models) return true;
            return false;
        };

        Backbone.isString = function(obj) {
            return toString.call(obj) == '[object String]';
        };

        Backbone.View.prototype.deepListenTo = function(obj, event, handler) {
            if (Backbone.isModel(obj)) {
                this.listenTo(obj, event, handler);
                _.each(obj.attributes, function(val, key) {
                    this.deepListenTo(val, event, handler);
                }, this);
            } else if (Backbone.isCollection(obj)) {
                this.listenTo(obj, event, handler);
                _.each(obj.models, function(model) {
                    this.deepListenTo(model, event, handler);
                }, this);
            }
        };

        Backbone.View.prototype.listenToModels = function(coll, event, handler) {

            coll.each(function(model) {
                this.listenTo(model, event, handler);
            }, this);

            var self = this;
            this.listenTo(coll, 'add', function(model) {
                self.listenTo(model, event, handler);
            });
        };

        Backbone.View.prototype.createSubview = function(cls, data) {

            var view = new cls(data);
            view.superview = this;
            this.subviews = this.subviews || [];
            this.subviews.push(this);
            
            if(this.topview) { view.topview = this.topview; }
            
            return view;
        };

        Backbone.Collection.prototype.add = function(models, options) {
            /* make things validate by default*/
            models = _.isArray(models) ? models : [models];
            options = _.extend({
                validate: true
            }, options);
            var dupes = [];
            var addOptions = {
                add: true,
                merge: false,
                remove: false
            };

            if (this.uniqueKeys) {
                if (!_.isArray(models)) models = models ? [models] : [];

                _.each(models, function(model) {
                    this.each(function(_model) {
                        var dupe = null;
                        _.each(this.uniqueKeys, function(key) {
                            var _modelVal = _model.attributes ? _model.get(key) : _model[key];
                            if (_modelVal === model.get(key) ||
                                (Backbone.isString(_modelVal) && Backbone.isString(model.get(key)) &&
                                    _modelVal.toLowerCase() === model.get(key).toLowerCase()
                                )) {
                                dupe = model;
                                this.trigger('duplicate', key, model.get(key));
                                return;
                            }
                        }, this);

                        if (dupe) {
                            dupes.push(dupe);
                            return;
                        }
                    }, this);

                }, this);
            }

            models = _.difference(models, dupes);

            return this.set(models, _.defaults(options || {}, addOptions));
        };

        Backbone.Collection.prototype.push = function(model, options) {
            model = this._prepareModel(model, options);
            var dupe = null;
            if (this.uniqueKeys) {

                this.each(function(_model) {

                    _.each(this.uniqueKeys, function(key) {

                        if (_model.get(key) === model.get(key)) {
                            dupe = _model;
                            this.trigger('duplicate', key, model.get(key));
                            return;
                        }
                    }, this);

                    if (dupe) {
                        return;
                    }
                }, this);
            }

            if (dupe) return dupe;

            this.add(model, _.extend({
                at: this.length
            }, options));
            return model;
        };

        Backbone.Model.prototype.setGenerator = function(generatorStr) {
            this.generate = generatorStr;
        };

        Backbone.Model.prototype.serialize = function(options) {
            var json = {};
            var data = this.toJSON(options);

            if (this.generate) {
                json.generate = this.generate;
                json.data = data;
            } else {
                json = data;
            }

            return json;
        };

        Backbone.Collection.prototype.setGenerator = function(generatorStr) {
            this.generate = generatorStr;
        };
        
        Backbone.Collection.prototype.serialize = function(options) {
            var json = {};

            var data = this.map(function(model) {
                return model.serialize(options);
            });

            if (this.generate) {
                json.generate = this.generate;
                json.data = data;
            } else {
                json = data;
            }

            return json;
        };

        Backbone.Model.prototype.expand = function() {

            if (this.generate) {
                var generator = new Generator();
                return generator.generate(this.generate, this.toJSON());
            } else {
                return this.toJSON();
            }

            return null;
        };
    });
define('collections/FormFieldCollection',[
    'models/FormFieldModel',
    'mixins/BackboneConvenience'
  ],
  function(FormFieldModel) {

    var FormFieldCollection = Backbone.Collection.extend({
      model: FormFieldModel
    });

    return FormFieldCollection;
  });
define('models/ActionModel',[
"backbone"
],
function() {

  var ActionModel = Backbone.Model.extend({
    initialize: function(bone) {
      this.set("type", bone.type);
    },

    getNL: function() {
      if(this.get('type') == "redirect") {
        return "Go to " + this.get('page_name');
      }

      if(this.get('type') == "relation") {
        if(this.get('nl_description')) return this.get('nl_description');
      }

      if(this.get('type') == "email") {
        if(this.get('nl_description')) return this.get('nl_description');
      }

      return this.get('type');
    },

    serialize: function () {
      var json = _.clone(this.attributes);
      if(json.type == "goto") {
        var str = "internal://" + json.page_name;
        if(json.context) str += "/?" + json.context;
        return str;
      }
      return json;
    }
  });

  return ActionModel;
});


define('collections/ActionCollection',[
  'models/ActionModel'
],
function(ActionModel) {

  var ActionCollection = Backbone.Collection.extend({
    model: ActionModel
  });

  return ActionCollection;
});

define('collections/LoginRouteCollection',[
  'backbone'
],
function() {

  var LoginRouteCollection = Backbone.Collection.extend({

    initialize: function() {
      v1State.get('users').bind('change add remove', this.reorganize, this);
    },

    findRouteWithRole: function(roleStr) {
      var val = null;
      this.each(function(userRole) {
        if(userRole.get('role') == roleStr) {
          val = userRole.get('redirect');
          return val;
        }
      }, this);
      return "internal://Homepage";
    },

    reorganize: function() {
      var newContent = [];
      v1State.get('users').each(function(user) {
        var val = this.findRouteWithRole(user.get('name'));
        newContent.push({
          role: user.get('name'),
          redirect: val
        });
      }, this);

      this.reset(newContent);
    }

  });

  return LoginRouteCollection;
});

define('models/FormModel',[
        'collections/FormFieldCollection',
        'collections/ActionCollection',
        'collections/LoginRouteCollection',
        'models/ActionModel'
    ],
    function(
        FormFieldCollection,
        ActionCollection,
        LoginRouteCollection,
        ActionModel) {

        var FormModel = Backbone.Model.extend({

            initialize: function(bone) {
                alert('ye');
                this.set('name', bone.name);
                this.set('fields', new FormFieldCollection());
                this.set('action', bone.action || "create");
                this.set('actions', new ActionCollection(bone.actions || []));

                if (bone.loginRoutes) {
                    this.set('loginRoutes', new LoginRouteCollection(bone.loginRoutes));
                }
                if (bone.goto) {
                    var name = bone.goto.replace('internal://', '');
                    var parts = name.split('/?');
                    this.set('goto', new ActionModel({
                        type: "goto",
                        page_name: parts[0],
                        context: parts[1]
                    }));
                }

                this.set('entity', bone.entity);

                if (bone.fields) {
                    this.get('fields').add(bone.fields);
                } else {
                    var field = {
                        "type": "button",
                        "displayType": "button",
                        "placeholder": "Submit",
                        "label": ""
                    };

                    this.get('fields').push(field);
                }
            },

            addAction: function(newActionModel) {
                var isUnique = true;

                this.get('actions').each(function(actionModel) {
                    if (_.isEqual(actionModel.attributes, newActionModel.attributes)) isUnique = false;
                    return;
                }, this);

                if (isUnique) {
                    this.get('actions').push(newActionModel);
                }
                return this.get('actions');
            },

            fillWithProps: function(entity) {
                entity.getFieldsColl().each(function(fieldModel) {
                    var type = fieldModel.get('type');
                    var formFieldModel = {
                        field_name: fieldModel.get('name'),
                        displayType: "single-line-text",
                        type: type,
                        label: fieldModel.get('name'),
                        options: "",
                        placeholder: fieldModel.get('name')
                    };

                    if (type == "fk" && fieldModel.get('entity_name') == "User") {
                        this.addToCurrentUser(fieldModel);
                    }
                    if (type == "fk" || type == "m2m" || type == "o2o") {
                        return;
                    }
                    if (type == "email") {
                        formFieldModel.displayType = "email-text";
                    }
                    if (type == "image") {
                        formFieldModel.displayType = "image-uploader";
                    }
                    if (type == "file") {
                        formFieldModel.displayType = "file-uploader";
                    }
                    if (type == "date") {
                        formFieldModel.displayType = "date-picker";
                    }

                    if (_.contains(["file", "image"], type)) {
                        formFieldModel.placeholder = "Upload " + util.capitaliseFirstLetter(type);
                    }

                    var ind = this.get('fields').models.length - 1;
                    this.get('fields').push(formFieldModel, {
                        at: ind
                    });
                }, this);
            },

            addToCurrentUser: function(field) {
                var nlDescr = "Add to CurrentUser." + field.get('related_name');
                var action = {
                    "type": "relation",
                    "set_fk": "Form." + this.get('entity') + '.' + field.get('name'),
                    "to_object": "CurrentUser",
                    "nl_description": nlDescr
                };
                this.addAction(action);
            },

            fillWithEditProps: function(entity) {
                entity.getFieldsColl().each(function(fieldModel) {

                    var type = fieldModel.get('type');
                    var formFieldModel = {
                        field_name: fieldModel.get('name'),
                        displayType: "single-line-text",
                        type: type,
                        label: fieldModel.get('name'),
                        placeholder: "Prefilled data: ||" + fieldModel.get('name') + '||',
                        options: ""
                    };

                    if (type == "fk" || type == "m2m" || type == "o2o") {
                        return;
                    }
                    if (type == "email") {
                        formFieldModel.displayType = "email-text";
                    }
                    if (type == "image") {
                        formFieldModel.displayType = "image-uploader";
                    }
                    if (type == "file") {
                        formFieldModel.displayType = "file-uploader";
                    }
                    if (type == "date") {
                        formFieldModel.displayType = "date-picker";
                    }

                    if (_.contains(["file", "image"], type)) // #functional
                        formFieldModel.placeholder = "Update " + type;

                    var ind = this.get('fields').models.length - 1;
                    this.get('fields').push(formFieldModel, {
                        at: ind
                    });
                }, this);
            },

            getRelationalActions: function(pageModel) {

                if (this.get('action') == "login" || this.get('action') == "signup") return (new ActionCollection([]));

                var entity = v1State.getTableModelWithName(this.get('entity'));
                var possibleActions = new ActionCollection();
                var userFields = pageModel.getFields();

                _(userFields).each(function(field) {
                    if (field.get('entity_name') == entity.get('name')) {
                        var action = {
                            "set_fk": "this." + field.get('related_name'),
                            "to_object": "CurrentUser"
                        };
                        possibleActions.push(action);
                    }
                });

                entity.get('fields').each(function(field) {
                    if (field.get('entity_name') == "User") {
                        var nlDescr = "Add to CurrentUser." + field.get('related_name');
                        var action = {
                            "type": "relation",
                            "set_fk": "Form." + this.get('entity') + '.' + field.get('name'),
                            "to_object": "CurrentUser",
                            "nl_description": nlDescr
                        };
                        possibleActions.push(action);
                    }
                }, this);

                var pageContextEntities = pageModel.getContextEntities();

                _(pageContextEntities).each(function(entityName) {
                    entity.get('fields').each(function(field) {
                        if (field.get('entity_name') == entityName) {
                            var nlDescr = "Add to Page." + entityName + "." + field.get('related_name');
                            var action = {
                                "type": "relation",
                                "set_fk": "Form." + this.get('entity') + '.' + field.get('name'),
                                "to_object": "Page." + entityName,
                                "nl_description": nlDescr
                            };
                            possibleActions.push(action);
                        }
                    }, this);

                }, this);

                return possibleActions;
            },

            removeFieldsConnectedToField: function(fieldM) {
                this.get('fields').each(function(formFieldM) {
                    if (formFieldM.get('field_name') == fieldM.get('name')) {
                        formFieldM.collection.remove(formFieldM);
                    }
                });
            },

            getEmailActions: function(argument) {
                var possibleActions = new ActionCollection();

                v1State.get('emails').each(function(emailM) {
                    var action = {
                        "type": "email",
                        "email_to": "CurrentUser",
                        "email": emailM.get('name'),
                        "nl_description": "Send " + emailM.get('name') + ' Email'
                    };
                    possibleActions.push(action);
                });

                return possibleActions;
            },

            addRedirect: function(pageModel) {
                this.set('redirect', new ActionModel({
                    type: "redirect",
                    page_name: pageModel.get('name')
                }));
            },

            getPossibleGotos: function() {
                var entityName = this.get('entity');
                var listOfPages = new ActionCollection();

                _(v1State.get('pages').getContextFreePageModels()).each(function(pageModel) {
                    listOfPages.push({
                        type: "goto",
                        page_name: pageModel.get('name')
                    });
                });

                _(v1State.get('pages').getPageModelsWithEntityName(entityName)).each(function(pageModel) {
                    listOfPages.push({
                        type: "goto",
                        page_name: pageModel.get('name'),
                        context: entityName + "=Form." + entityName
                    });
                });

                return listOfPages;
            },

            createLoginRoutes: function() {
                var routes = new LoginRouteCollection();

                v1State.get('users').each(function(userModel) {
                    routes.push({
                        role: userModel.get('name'),
                        redirect: "internal://Homepage"
                    });
                }, this);

                this.set('loginRoutes', routes);
            },


            isConstant: function() {
                return this.get('isConstant');
            },

            serialize: function() {
                var json = _.clone(this.attributes);
                json.name = json.name || "";
                json.fields = this.get('fields').serialize();
                if (json.loginRoutes) json.loginRoutes = json.loginRoutes.serialize();
                if (json.goto) json.goto = json.goto.serialize();
                if (json.actions) json.actions = json.actions.serialize();
                return json;
            }

        });

        return FormModel;

    });
define('models/LayoutModel',['backbone'], function(Backbone) {
    
    var LayoutModel = Backbone.Model.extend({
        
        defaults: {
            'row': 0,
            'col': 0,
            'alignment': 'left'
        }

    });

    return LayoutModel;
});
define('models/RowModel',[
  'models/LayoutModel'
], function(LayoutModel) {

  var RowModel = Backbone.Model.extend({

    initialize: function(bone) {
      this.set('isListOrGrid', "list");
      this.set('layout', new LayoutModel((bone.layout||{height:10, width: 4})));

      var WidgetCollection = require('collections/WidgetCollection');
      this.set('uielements', new WidgetCollection());
      this.set('goesTo', bone.goesTo||null);

      var WidgetModel = require('models/WidgetModel');
      _.each(bone.uielements, function(element) {
        var widget = new WidgetModel(element);
        this.get('uielements').add(widget);
      }, this);
    },

    fillWithProps: function(entity) {
      var nmrElements = 0;
      var nmrImageElements = 0;
      var hasImageElements = 0;

      if(entity.get('fields').getImageFields()) hasImageElements = 1;

      entity.getFieldsColl().each(function(fieldModel) {

        var type = fieldModel.get('type');
        if(type == "fk"||type == "m2m"||type == "o2o") { return; }

        var displayType = util.getDisplayType(type);
        var formFieldModel = { field_name: fieldModel.get('name'),
                               displayType: "single-line-text",
                               type: type,
                               label: fieldModel.get('name'),
                               placeholder: fieldModel.get('name') };

        var layout = {left : hasImageElements*90 + 5, top: nmrElements*45, height: 45, width: 400};
        var content_ops = {};
        content_ops.content =  '{{loop.'+ entity.get('name') +'.'+fieldModel.get('name')+'}}';

        if(displayType == "links") {
          content_ops.content = 'Download '+fieldModel.get('name');
          content_ops.href = '{{loop.'+ entity.get('name') +'.'+fieldModel.get('name')+'}}';
        }

        if(displayType == "images") {
          layout = {left : 0, top: nmrImageElements*90 + 5, height: 90, width: 90};
          content_ops.src_content = '{{loop.'+ entity.get('name') +'.'+fieldModel.get('name')+'}}';
          nmrImageElements++;
        }
        else {
          nmrElements++;
        }

        this.get('uielements').createNodeWithFieldTypeAndContent(layout, displayType, content_ops);

      }, this);

      var height = (nmrImageElements > nmrElements ? nmrImageElements * 95 : nmrElements * 45);
      var rowHeight = Math.ceil(height / 15);
      if(rowHeight < 10) rowHeight = 10;
      this.get('layout').set('height', rowHeight);
    },

    resizeElements: function(rowWidth) {
      rowWidth = rowWidth * 80;
      this.get('uielements').each(function(element) {
        var width = element.get('layout').get('width');
        var left = element.get('layout').get('left');
        if((width + left) <= rowWidth) return;
        if(width < 50) {
          if(left >= 0) {
            left = rowWidth - width;
            //if(left < 0) return element.remove();
          }
          else {
            return element.remove();
          }
        }
        else {
          width = rowWidth-left;
          //if(width < 10) return element.remove();
        }
        element.get('layout').set('width', width);
        element.get('layout').set('left', left);
      });
    },

    serialize: function() {
      var json  = _.clone(this.attributes);
      json.uielements = json.uielements.serialize();

      return json;
    }

  });

  return RowModel;
});
define('models/SlideModel',[
"backbone"
],
function() {

  var SlideModel = Backbone.Model.extend({
    initialize: function(bone) {
      if(!bone) bone = {};
      this.set('image', bone.image || "http://placehold.it/150x150");
      this.set('text', bone.text || "Sample text. Double click to start editing.");
    }
  });

  return SlideModel;
});

define('collections/SlideCollection',[
  'models/SlideModel'
],
function(SlideModel) {

  var SlideCollection = Backbone.Collection.extend({
    model : SlideModel
  });

  return SlideCollection;
});

var constantContainers = {
  'facebook' : {
    provider: "facebook",
    action: "thirdpartylogin",
    content: "Login w/ Facebook",
    container_info: {},
    goto: ""
  },
  'twitter' : {
    provider: "twitter",
    action: "thirdpartylogin",
    content: "Login w/ Twitter",
    container_info: {},
    goto: ""
  },
  'linkedin' : {
    provider: "linkedin",
    action: "thirdpartylogin",
    content: "Login w/ LinkedIn",
    container_info: {},
    goto: ""
  },
  'Local Login': {
    name: "local login",
    action: "login",
    fields : [
                    {
                        "field_name": "username",
                        "placeholder": "Email or username",
                        "label": "Email or username",
                        "displayType": "single-line-text",
                        "type": "text",
                        "options": ''
                    },
                    {
                        "name": "password",
                        "placeholder": "Password",
                        "label": "Password",
                        "displayType": "password-text",
                        "type": "password",
                        "options": ''
                    },
                    {
                        "placeholder": "Login",
                        "displayType": "button",
                        "type": "button"
                    }
    ],
    loginRoutes: []
  },
  'Sign Up' : {
    "action": "signup",
    "entity": "User",
    "fields": [
                    {
                        "field_name": "Email",
                        "placeholder": "Email Address",
                        "label": "Email Address",
                        "displayType": "email-text",
                        "type": "email",
                        "options": ''
                    },
                    {
                        "name": "name",
                        "placeholder": "Name",
                        "label": "Name",
                        "displayType": "single-line-text",
                        "type": "text",
                        "options": ''
                    },
                    {
                        "name": "password",
                        "placeholder": "Password",
                        "label": "Password",
                        "displayType": "password-text",
                        "type": "password",
                        "options": ''
                    },
                    {
                        "placeholder": "Sign Up",
                        "displayType": "button",
                        "type": "button"
                    }
              ],
    "goto": "internal://Homepage",
    "name": "Sign Up"
  }
};

define("dicts/constant-containers", function(){});

define('models/ContainerInfoModel',[
  'models/QueryModel',
  'models/TableModel',
  'models/UserTableModel',
  'models/FormModel',
  'models/RowModel',
  'collections/SlideCollection',
  'models/SlideModel',
  'dicts/constant-containers'
],
function(QueryModel,
         TableModel,
         UserTableModel,
         FormModel,
         RowModel,
         SlideCollection,
         SlideModel,
         SearchQueryModel) {

  var ContainerInfoModel = Backbone.Model.extend({
    initialize: function(bone) {
      if(bone.uielements) {
        var WidgetCollection = require('collections/WidgetCollection');
        this.set('uielements', new WidgetCollection(bone.uielements||[]));
      }

      if(bone.entity) {
        if(!bone.entity.attributes) {
          var entityM = v1State.getTableModelWithName(bone.entity);
          this.set('entity', entityM);
        }
        else {
          this.set('entity', bone.entity);
        }
      }

      if(bone.slides) { this.set('slides', new SlideCollection(bone.slides)); }
      if(bone.row) { this.set('row', new RowModel(bone.row)); }
      if(bone.query) { this.set('query', new QueryModel(bone.query, this.get('entity'))); }
      if(bone.search) { this.set('search', new QueryModel(bone.search, this.get('entity'))); }
      if(bone.form) {
        if(!bone.form.attributes) { this.set('form', new FormModel(bone.form)); }
        else { this.set('form', bone.form); }
      }
    },


    serialize: function() {
      var json = _.clone(this.attributes);
      if(json.uielements) json.uielements = this.get('uielements').serialize();
      if(json.slides) json.slides = json.slides.serialize();
      if(json.form) json.form = json.form.serialize();
      if(json.query) json.query = this.get('query').serialize();
      if(json.search) json.search = json.search.serialize();
      if(json.searchQuery) json.searchQuery = json.searchQuery.serialize();
      if(this.has('row')) json.row = this.get('row').serialize();
      if(this.has('entity')) {
        if(typeof json.entity !== "string") {
          json.entity = json.entity.get('name');
        }
      }

      return json;
    }
  });

  return ContainerInfoModel;
});

define('models/SearchQueryModel',[
  "backbone"
],
function() {

  var SearchQueryModel = Backbone.Model.extend({
    initialize: function(bone) {
      var fields =_.map(bone.searchFields, function(field) { return { value: field }; });
      this.set("searchFields", new Backbone.Collection(fields||[]));
      this.listenTo(v1State.getTableModelWithName(bone.searchOn).get('fields'), 'remove', this.entityFieldRemoved);
    },

    removeFieldWithName: function(nameStr) {
      this.get('searchFields').each(function(searchField) {
        if(searchField.get('value') == nameStr) this.get('searchFields').remove(searchField);
      }, this);
    },

    entityFieldRemoved: function(fieldModel) {
      var name = fieldModel.get('name');
      var searchFieldModel = this.get('searchFields').find(function(sModel) {
        return sModel.get('value') == name;
      });
      this.get('searchFields').remove(searchFieldModel);
    },

    fillWithFields: function(entity) {
      entity.get('fields').each(function (fieldM) {
        if(fieldM.isRelatedField()) return;
        this.get('searchFields').push({ value: fieldM.get('name')});
      }, this);
    },

    serialize: function () {
      var json = _.clone(this.attributes);
      json.searchFields = json.searchFields.pluck('value');
      return json;
    }
  });

  return SearchQueryModel;
});

define('models/DataModel',[
  'models/ContentModel',
  'models/ContainerInfoModel',
  'collections/LoginRouteCollection',
  'models/SearchQueryModel'
],
function(ContentModel,
         ContainerInfoModel,
         LoginRouteCollection,
         SearchQueryModel) {

  var DataModel = Backbone.Model.extend({

    initialize: function(bone, isNew) {
      this.set('content_attribs', new ContentModel(bone.content_attribs||{}));
      if(bone.loginRoutes) { this.set('loginRoutes', new LoginRouteCollection(bone.loginRoutes));}
      if(bone.container_info) {
        this.set('container_info', new ContainerInfoModel(bone.container_info, isNew));
      }
      if(bone.searchQuery) { this.set('searchQuery', new SearchQueryModel(bone.searchQuery)); }
    },

    serialize: function() {
      var json = _.clone(this.attributes);

      if(json.entity) {
        if(_.isString(json.entity)) json.entity = json.entity;
        else if(json.entity.name) json.entity = json.entity.name;
        else json.entity = json.entity.serialize();
      }

      if(json.content_attribs) {
        json.content_attribs = this.get('content_attribs').serialize()||{};
      }

      if(json.container_info) {
        json.container_info = this.get('container_info').serialize();
      }

      if(json.searchQuery) {
        json.searchQuery = this.get('searchQuery').serialize();
      }

      return json;
    }
  });

  return DataModel;
});
define('models/WidgetModel',['require','exports','module','models/DataModel','models/LayoutModel','dicts/constant-containers','collections/FormFieldCollection'],function(require, exports, module) {

    'use strict';

    var DataModel = require('models/DataModel'),
        LayoutModel = require('models/LayoutModel');

    require('dicts/constant-containers');


    var FormFieldCollection = require('collections/FormFieldCollection');

    var WidgetModel = Backbone.Model.extend({
        selected: false,
        editMode: false,

        initialize: function(bone, isNew) {

            this.set('layout', new LayoutModel(bone.layout || {}));
            this.set('data', new DataModel(bone.data || {}, isNew));
            this.set('context', new Backbone.Collection(bone.context || []));

            if (bone.fields) {
                this.set('fields', new FormFieldCollection(bone.fields || []));
            }

            this.bind('editModeOn', function() {
                this.editMode = true;
            }, this);
            this.bind('editModeOff', function() {
                this.editMode = false;
            }, this);

        },

        remove: function() {
            if (this.get('deletable') === false) return;
            if (this.collection) {
                this.collection.remove(this);
            }
        },

        isFullWidth: function() {
            return this.get('layout').get('isFull') === true;
        },

        moveLeft: function() {
            if (this.isFullWidth()) return;

            if (this.get('layout').get('left') < 1 || this.collection.editMode) return;
            this.get('layout').set('left', this.get('layout').get('left') - 1);
        },

        moveRight: function() {
            if (this.isFullWidth()) return;

            var maxWidth = this.collection.grid.maxWidth;
            if (maxWidth && this.get('layout').get('left') + this.get('layout').get('width') > (maxWidth - 1)) return;
            this.get('layout').set('left', this.get('layout').get('left') + 1);
        },

        moveUp: function() {
            if (this.get('layout').get('top') < 1 || this.collection.editMode) return;
            this.get('layout').set('top', this.get('layout').get('top') - 1);
        },

        moveDown: function() {
            if (this.collection.editMode) return;
            this.get('layout').set('top', this.get('layout').get('top') + 1);
        },

        setupPageContext: function(pageModel) {
            // TODO: Fix this
            //var entityList = pageModel.getContextEntities();
            var entityList = [];
            var contextList = this.get('context');

            _(entityList).each(function(entity) {
                contextList.push({
                    entity: entity,
                    context: 'Page.' + entity
                });
            });

            return this;
        },

        setupLoopContext: function(entityModel) {
            var newContext = {
                entity: entityModel.get('name'),
                context: 'loop.' + entityModel.get('name')
            };
            var isUnique = true;

            this.get('context').each(function(context) {
                if (_.isEqual(context.serialize(), newContext)) {
                    isUnique = false;
                }
            });

            if (isUnique) {
                this.get('context').push({
                    entity: entityModel.get('name'),
                    context: 'loop.' + entityModel.get('name')
                });
            }

            return this;
        },

        // getListOfPages: function() {
        //     console.trace();
        //     var pagesCollection = v1State.get('pages');
        //     var listOfLinks = [];

        //     _(pagesCollection.getContextFreePages()).each(function(page) {
        //         listOfLinks.push({
        //             name: page,
        //             val: "internal://" + page
        //         });
        //     });

        //     this.get('context').each(function(context) {
        //         var entityName = context.get('entity');
        //         var entityModel = v1State.getTableModelWithName(entityName);

        //         var listOfPages = v1State.get('pages').getPagesWithEntityName(entityName);
        //         _(listOfPages).each(function(pageName) {
        //             listOfLinks.push({
        //                 name: pageName,
        //                 val: "internal://" + pageName + '/?' + context.get('entity') + '=' + context.get('context')
        //             });
        //         });

        //         entityModel.getFieldsColl().each(function(field) {
        //             if(field.get('type') == "fk") {
        //                 var fieldEntityName = field.get('entity_name');
        //                 var listOfIntPages = v1State.get('pages').getPagesWithEntityName(fieldEntityName);
        //                 _(listOfIntPages).each(function(pageName) {
        //                     listOfLinks.push({
        //                         name: pageName + " with "+ entityName+"."+field.get('name'),
        //                         val: "internal://" + pageName + '/?' + fieldEntityName + '=' + context.get('context') +"."+ field.get('name')
        //                     });
        //                 });
        //             }
        //         });
        //     });

        //     listOfLinks.push({
        //         name: 'External Link',
        //         val: "External Link"
        //     });

        //     return listOfLinks;
        // },

        getAction: function() {
            if (this.get('data').has('container_info')) return this.get('data').get('container_info').get('action');
            else return this.get('data').get('action');

            return;
        },

        getRow: function() {
            if (!this.get('data').has('container_info')) return null;
            return this.get('data').get('container_info').get('row');
        },

        getContent: function() {
            return this.get('content');
        },

        getForm: function() {
            if (!this.get('data').has('container_info')) return null;
            return this.get('data').get('container_info').get('form');
        },

        hasForm: function() {
            if (this.get('data').has('container_info') &&
                this.get('data').get('container_info').has('form')) return true;
            return false;
        },

        getLoginRoutes: function() {

            if (this.get('data').has('loginRoutes')) {
                return this.get('data').get('loginRoutes');
            }

            if (this.get('data').has('container_info') &&
                this.get('data').get('container_info').has('form')) {
                return this.get('data').get('container_info').get('form').get('loginRoutes');
            }

            return null;
        },


        getSearchQuery: function() {
            return this.get('data').get('searchQuery');
        },

        isNode: function() {
            return this.get('type') == "node";
        },

        isImage: function() {
            return (this.isNode() && this.get('data').get('nodeType') == "images");
        },

        isBox: function() {
            return (this.isNode() && this.get('data').get('nodeType') == "boxes");
        },

        isBgElement: function() {
            if ((this.get('type') == "node" && this.get('data').get('nodeType') == "boxes") ||
                (this.get('type') == "imageslider")) return true;
            return false;
        },

        isForm: function() {
            return this.get('type') == "form";
        },

        isLoginForm: function() {
            return false;
            //return (this.isForm() && this.get('data').get('container_info').get('action') == "login") || (this.get('type') == "thirdpartylogin");
        },

        isList: function() {
            if (this.get('type') == "loop") return true;
            return false;
        },

        isCustomWidget: function() {
            if (this.get('type') == "custom" ||
                this.get('data').has('cssC') ||
                this.get('data').has('jsC') ||
                this.get('data').has('htmlC')) return true;
        },

        isBuyButton: function() {
            return this.get('type') === "buybutton";
        },

        isSearchList: function() {
            return this.get('data').has('container_info') && this.get('data').get('container_info').get('action') == "searchlist";
        },

        getBottom: function() {
            return this.get('layout').get('height') + this.get('layout').get('top');
        },

        toJSON: function() {
            var json = _.clone(this.attributes);
            json = _.omit(json, 'selected', 'deletable', 'context');

            json.data = this.get('data').serialize();
            json.layout = this.get('layout').serialize();

            if (json.fields) { json.fields = json.fields.serialize(); }

            if (json.context) delete json.context;
            return json;
        }
    });

    return WidgetModel;
});
define('collections/WidgetCollection',['require','exports','module','models/WidgetModel','app/Generator','backbone'],function(require, exports, module) {

    'use strict';

    var WidgetModel = require("models/WidgetModel");
    var Generator = require("app/Generator")
    require("backbone");

        var WidgetCollection = Backbone.Collection.extend({

            model: WidgetModel,

            createElementWithGenPath: function (layout, generatorPath, type, extraData) {
                this.createUIElement(type, layout, generatorPath, extraData);
            },

            createUIElement: function (type, layout, generatorPath, extraData) {
                var generator = new Generator(generatorPath);

                var widget = {};
                widget.layout = layout;
                widget.type = type;
                
                if(generator.defaults) { widget = _.extend(widget, generator.defaults); }
                if(extraData) { widget = _.extend(widget, extraData); }

                var widgetModel = new WidgetModel(widget);
                widgetModel.setGenerator(generatorPath);

                return this.push(widgetModel);
            }

        });

        return WidgetCollection;
    });
define('models/SectionModel',['require','exports','module','backbone','collections/WidgetCollection'],function(require, exports, module) {

    'use strict';

    require('backbone');

    var WidgetCollection = require('collections/WidgetCollection');

    var SectionModel = Backbone.Model.extend({
        initialize: function(bone) {
            this.set("uielements", new WidgetCollection(bone.uielements || {}));
        },

        getArrangedModels: function() {

            var els = {};

            this.get('uielements').each(function(widgetModel) {

                var key = widgetModel.get('layout').get('col');

                els[key] = els[key] || [];
                els[key].push(widgetModel);

            });

            return els;
        },

        addElement: function(colId, type, extraData) {
            var layout = { col: colId };
            this.get('uielements').createElement(layout, className, id);
        },

        addElementWithPath: function (colId, type, generatorPath, extraData) {
            var layout = { col: colId };
            this.get('uielements').createElementWithGenPath(layout, generatorPath, type, extraData);
        },

        toJSON: function() {
            var json = _.clone(this.attributes);
            json.uielements = json.uielements.serialize();
            return json;
        }
    });

    return SectionModel;
});
define('collections/SectionCollection',['require','exports','module','models/SectionModel','collections/WidgetCollection'],function(require, exports, module) {

    'use strict';
    var SectionModel = require('models/SectionModel');
    var WidgetCollection = require('collections/WidgetCollection');

    var SectionCollection = Backbone.Collection.extend({

        model: SectionModel,

        initialize: function() {
            
            if(!this.generate) {
                this.setGenerator('templates.layoutSections');
            }
        },

        createSectoinWithType: function(type) {


            var sampleHeader = function(col) {

                return {
                    "generate": "uielements.design-header",
                    "data": {
                        "type": "header",
                        "content": "Instructors",
                        "layout": {
                            "col": col
                        },
                        "className": "",
                        "style": ""
                    }
                };

            };

            var sampleImage = function(col) {

                return {
                    "generate": "uielements.design-image",
                    "data": {
                        "type": "image",
                        "src": "http://stuco.conciergeent.com/dist/img/rishabh-photo.png",
                        "layout": {
                            "row": 1,
                            "col": col
                        },
                        "className": "img-rounded",
                        "style": "width: 140px; height: 140px;"
                    }
                };

            };

            var sampleText = function(col) {

                return {
                    "generate": "uielements.design-text",
                    "data": {
                        "type": "text",
                        "content": "I am a senior from CIT who has been DJing since my Freshman Year. Involved with both the American and Indian scene, I've opened for Lupe Fiasco, DJed at 2 Carnival Parties with Steve and have worked with Pranesh to make mixtapes and DJ Live. I made the BIB Mixtape for 2 consecutive years.",
                        "layout": {
                            "row": 2,
                            "col": col
                        },
                        "style": "",
                        "class_name": ""
                    }
                };

            };

            switch (type) {
                case "12":
                    this.add({
                        "layout": "12",
                        "className": "jumbotron",
                        "uielements": [sampleHeader("header"), sampleText(0)]
                    });
                    break;

                case "3-3-3-3":
                    this.add({
                        "layout": "3-3-3-3",
                        "className": "",
                        "uielements": [sampleHeader("header"), sampleImage(0), sampleImage(1), sampleImage(2), sampleImage(3)]
                    });
                    break;

                case "4-4-4":
                    this.add({
                        "layout": "4-4-4",
                        "className": "",
                        "uielements": [sampleHeader("header"), sampleText(0), sampleText(1), sampleText(2)]
                    });
                    break;

                case "8-4":
                    this.add({
                        "layout": "8-4",
                        "className": "",
                        "uielements": [sampleText(0), sampleImage(1)]
                    });
                    break;

                case "4-8":
                    this.add({
                        "layout": "4-8",
                        "className": "",
                        "uielements": [sampleImage(0), sampleText(1)]
                    });
                    break;
            }

        },

        getAllWidgets: function(argument) {
            if (!this.allWidgets) this.allWidgets = this.constructWidgetCollection();
            return this.allWidgets;
        },

        constructWidgetCollection: function() {
            var widgetCollection = new WidgetCollection();
            
            this.each(function(sectionModel) {
                var collection = sectionModel.get('uielements');
                widgetCollection.add(collection.models);
                collection.on('add', function(model) {
                    widgetCollection.add(model);
                });
            }, this);

            this.on('add', function(sectionModel) {
                var collection = sectionModel.get('uielements');
                widgetCollection.add(collection.models);
                collection.on('add', function(model) {
                    widgetCollection.add(model);
                });
            });

            return widgetCollection;
        }
    });

    return SectionCollection;
});
define('models/TemplateModel',['require','exports','module','models/NavbarModel','models/FooterModel','collections/SectionCollection'],function(require, exports, module) {

    'use strict';
    var NavbarModel      = require('models/NavbarModel'),
        FooterModel      = require('models/FooterModel'),
        SectionCollection= require('collections/SectionCollection');

    var TemplateModel = Backbone.Model.extend({

        initialize: function(bone) {

            this.set('name', bone.name);
            this.set('head', bone.head || "");
            
            this.set('uielements', new SectionCollection(bone.uielements || []));
            this.set('navbar', new NavbarModel(bone.navbar || {}));
            this.set('footer', new FooterModel(bone.footer || {}));

        },

        getUIElements: function() {
            return this.get('uielements');
        },

        getSections: function() {
            return this.get('uielements');
        },

        toJSON: function() {

            var json = _.clone(this.attributes);
            json.uielements = json.uielements.serialize();
            json.navbar     = json.navbar.serialize();
            json.footer     = json.footer.serialize();

            return json;
        }
    });

    return TemplateModel;
});
define('collections/TemplateCollection',[
        'models/TemplateModel'
    ],
    function(TemplateModel) {

        var TemplateCollection = Backbone.Collection.extend({
            model: TemplateModel,

            getTemplateWithName: function(name) {
                var page = null;

                this.each(function(templateModel) {
                    if (templateModel.get('name') == name) {
                        page = templateModel;
                    }
                });

                return page;
            }
        });

        return TemplateCollection;
    });
define('models/PluginModel',[
    'require',
    'backbone'
], function(require) {

    var Backbone = require('backbone');
    var GeneratorModel = Backbone.Model.extend({});
    var GeneratorCollection = Backbone.Collection.extend({
        model: GeneratorModel
    });

    var PluginModel = Backbone.Model.extend({
        defaults: {},

        initialize: function(options) {

        },

        fetchPlugin: function() {
            var name = this.get("name");
            var pluginAddress = "http://localhost:3001/package/" + name;
            $.ajax({
                url: pluginAddress,
                success: function(generators) {
                    console.log(generators);
                    //this.set('modules',  generators)
                }.bind(this)
            });
        },

        getGeneratorsWithModule: function(moduleName) {
            if(!this.has(moduleName)) return [];

            var uielements = _.map(this.get(moduleName), function(el) {
                el.generatorIdentifier = this.get('pluginInformation').name + ".uielements." + el.name;
                return el;
            }, this);
            return uielements;
        }

    });

    return PluginModel;
});
define('models/PluginsModel',[
		'models/PluginModel'
	],
	function(PluginModel) {

		var PluginsModel = Backbone.Model.extend({


			install: function(plugin) {
				var pluginModel = new PluginModel(JSON.parse(plugin.data));

				pluginModel.set('pluginInformation', {
					description: plugin.description,
					name: plugin.name,
					origin: "appcubator"
				});

				this.set(plugin.name, pluginModel);
			},

			getGeneratorsWithModule: function(generatorModule) {
				var generators = [];

				var generators = _.flatten(_.map(this.attributes, function(pluginModel, packageName) {
					return pluginModel.getGeneratorsWithModule(generatorModule);

					// _.each(packageContent[generatorModule], function(generator) {
					// 	generators.push({
					// 		package: packageName,
					// 		module: generatorModule,
					// 		name: generator.name
					// 	});
					// });
				}));

				return generators;
			},

			toJSON: function() {
				var json = _.clone(this.attributes);
				
				_.each(json, function(val, key) {
					json[key] = val.serialize();
				});

				return json;
			}

		});

		return PluginsModel;
	});
define('models/GeneratorsModel',['backbone'], function(Backbone) {
    
    var GeneratorsModel = Backbone.Model.extend({

    	getGeneratorsWithModule: function (generatorModule) {

    		var generators = [];
    		
    		_.each(this.attributes, function(packageContent, packageName) {
    			_.each(packageContent[generatorModule], function(generator) {
    				generators.push({
    					package: packageName,
    					module: generatorModule,
    					name: generator.name
    				});
    			});
    		});

            generators = _.union(generators, v1State.get('plugins').getGeneratorsWithModule(generatorModule));

    		return generators;
    	},

        isNameUnique: function(packageModuleName) {
            var gensWrapper = v1.currentApp.model.get('generators');
            var isUnique = true;
            var gens = gensWrapper.local[packageModuleName.module];
            _.each(gens, function(gen) {
                if(gen.name == packageModuleName.name) isUnique = false;
            }, this);

            return isUnique;
        },

    	fork: function (generator, generatorPath, newName) {

    		var genObj = _.clone(generator);
    		var newPath = util.packageModuleName(generatorPath);
    		newPath.name = newName;
    		genObj.name = newName;

    		this.get(newPath.package)[newPath.module].push(genObj);

    		return [newPath.package, newPath.module, newPath.name].join('.');
    	}

    });

    return GeneratorsModel;
});
define('models/EntityManager',['require','exports','module','backbone'],function(require, exports, module) {
    'use strict';

    require('backbone');


    var EntityManager = Backbone.Model.extend({

        initialize: function(options) {
            _.bindAll(this);
            this.pages = options.pages;
        },

        getWidgetsRelatedToTable: function(tableM) {
            var widgetsWithEntity = this.searchPageWidgetCollectionForKey(this.pages, "entity", function(val) {
                if(Backbone.isModel(val)) {
                    return val.cid == tableM.cid;
                }
                else {
                    var table = v1State.getTableModelWithName(val);
                    return val == table.cid;
                }
            });

            return widgetsWithEntity;
        },

        getWidgetsRelatedToPage:  function(pageM) {
            var widgetsWithGoto = this.searchPageWidgetCollectionForKey(this.pages, "goto", function(val) {
                return val == "internal://" + pageM.get('name');
            });
            var widgetsWithHref = this.searchPageWidgetCollectionForKey(this.pages, "href", function(val) {
                return val == "internal://" + pageM.get('name');
            });

            return _.union(widgetsWithGoto, widgetsWithHref);
        },

        getLinksRelatedToPage: function(pageM) {
            var linksWithUrl= this.searchPageNavCollectionForKey(this.pages, "url", function(val) {
                return val == "internal://" + pageM.get('name');
            });

            return linksWithUrl;
        },

        getWidgetsRelatedToField:  function(fieldM) {
            var widgetsWithField = this.searchPageWidgetCollectionForKey(this.pages, "field_name", function(val) {
                return val == fieldM.get('name');
            });

            return widgetsWithField;
        },

        searchPageNavCollectionForKey: function(pagesColl, key, truthTest) {
            var self = this;
            var links = [];

            console.log(pagesColl);

            pagesColl.each(function(pageM) {
                var pageName = pageM.get('name');
                pageM.get('navbar').get('links').each(function(navLinkM) {
                    var navlink = self.searchForKeyInWidget(navLinkM, key, truthTest);
                    if(navlink) {
                        links.push({ link: navLinkM, pageName: pageName, section: "navigation bar" });
                    }
                });
                pageM.get('footer').get('links').each(function(navLinkM) {
                    var navlink = self.searchForKeyInWidget(navLinkM, key, truthTest);

                    if(navlink) {
                        links.push({ link: navLinkM, pageName: pageName, section: "footer" });
                    }
                });
            });

            return links;
        },

        searchPageWidgetCollectionForKey: function(pagesColl, key, truthTest) {
            var self = this;
            var widgets = [];

            console.log(pagesColl);

            pagesColl.each(function(pageM) {
                var pageName = pageM.get('name');

                pageM.get('uielements').each(function(widgetM) {
                    var widget = self.searchForKeyInWidget(widgetM, key, truthTest);

                    if(widget) {
                        widgets.push({ widget: widgetM, pageName: pageName});
                    }
                });
            });

            return widgets;
        },

        searchForKeyInWidget: function(widgetM, key, truthTest) {
            var lookingFor = null;

            var checkIfEntity = function(model) {
                _.each(model.attributes, function(val, attribKey) {
                    if(lookingFor) return;
                    if(attribKey == key && truthTest(val)) {
                        lookingFor = val;
                        return;
                    }
                    else if(Backbone.isModel(val)) {
                        checkIfEntity(val);
                    }
                    else if(Backbone.isCollection(val)) {
                        val.each(checkIfEntity);
                    }
                });
            };

            checkIfEntity(widgetM);

            return lookingFor;
        }

    });

    return EntityManager;
});

define('models/AppModel',[
        'models/AppInfoModel',
        'collections/UserRolesCollection',
        'collections/TableCollection',
        'collections/EmailCollection',
        'collections/TemplateCollection',
        'models/PluginsModel',
        'models/GeneratorsModel',
        'models/EntityManager'
    ],
    function(AppInfoModel,
        UserRolesCollection,
        TableCollection,
        EmailCollection,
        TemplateCollection,
        PluginsModel,
        GeneratorsModel,
        EntityManager) {

        var AppModel = Backbone.Model.extend({

            currentPage: null,
            isMobile: false,
            lazy: {},

            initialize: function(aState) {
                if (!aState) return;

                this.set('info', new AppInfoModel(aState.info));
                this.set('users', new UserRolesCollection(aState.users));
                this.set('tables', new TableCollection(aState.models));
                this.set('emails', new EmailCollection(aState.emails));
                this.set('templates', new TemplateCollection(aState.templates));
                this.set('plugins', new PluginsModel(aState.plugins || {}));
                this.set('generators', new GeneratorsModel(aState.generators|| {}));

            },

            getPages: function() {
                if (!this.isMobile) {
                    return this.get('pages');
                } else {
                    return this.get('mobilePages');
                }
            },

            getTableModelWithName: function(nameStr) {
                var tableM = this.get('tables').getTableWithName(nameStr);
                if (!tableM) tableM = this.get('users').getTableWithName(nameStr);
                return tableM;
            },

            getTableModelWithCid: function(cid) {
                var tableM = this.get('tables').get(cid);
                if (!tableM) tableM = this.get('users').get(cid);
                return tableM;
            },

            isSingleUser: function() {
                return this.get('users').length == 1;
            },

            lazySet: function(key, coll) {
                this.lazy[key] = coll;
                this.set(key, new Backbone.Collection([]));
            },

            get: function(key) {
                if (this.lazy[key]) {
                    this.set(key, this.lazy[key]);
                    delete this.lazy[key];
                }

                return AppModel.__super__.get.call(this, key);
            },

            getWidgetsRelatedToTable: function(tableM) {
                return new EntityManager({
                    pages: this.get('pages')
                }).getWidgetsRelatedToTable(tableM);
            },

            getWidgetsRelatedToPage: function(pageM) {
                return new EntityManager({
                    pages: this.get('pages')
                }).getWidgetsRelatedToPage(pageM);
            },

            getNavLinkRelatedToPage: function(pageM) {
                return new EntityManager({
                    pages: this.get('pages')
                }).getLinksRelatedToPage(pageM);
            },

            getWidgetsRelatedToField: function(fieldM) {
                return new EntityManager({
                    pages: this.get('pages')
                }).getWidgetsRelatedToField(fieldM);
            },

            serialize: function() {
                var json = _.clone(this.attributes);
                json.info = json.info.serialize();
                json.users = json.users.serialize();
                json.tables = json.tables.serialize();
                //if(json.mobilePages) json.mobilePages = json.mobilePages.serialize();
                json.emails = json.emails.serialize();
                json.templates = json.templates.serialize();
                json.routes = json.routes.serialize();
                json.plugins = json.plugins.serialize();
                json.generators = json.generators.serialize();

                return json;
            }
        });

        return AppModel;
    });
define('models/UIElementModel',['backbone'], function() {
  var UIElementModel = Backbone.Model.extend({
    initialize: function(bone) {

      this.set('style', bone.style||'');
      this.set('hoverStyle', bone.hoverStyle||'');
      this.set('activeStyle', bone.activeStyle||'');

    }
  });

  return UIElementModel;
});
define('collections/UIElementCollection',[
  'models/UIElementModel'
],
function(UIElementModel) {

  var UIElementCollection = Backbone.Collection.extend({
    model : UIElementModel,

    initialize: function (models, type) {
      this.type = type;
    }
  });

  return UIElementCollection;
});

define('models/ThemeModel',['require','exports','module','collections/UIElementCollection'],function(require, exports, module) {

    'use strict';

    var UIElementCollection = require('collections/UIElementCollection');

    var ThemeModel = Backbone.Model.extend({

        initialize: function(themeState) {
            this.set('basecss', themeState.basecss || "font-size:14px;");
            //this.set('pages', new PageDesignCollection(themeState.pages));

            this.set('buttons', new UIElementCollection(themeState["buttons"], "button"));
            this.set('images', new UIElementCollection(themeState["images"], "image"));
            this.set('headerTexts', new UIElementCollection(themeState["headerTexts"], "header-text"));
            this.set('texts', new UIElementCollection(themeState["texts"], "text"));
            this.set('links', new UIElementCollection(themeState["links"], "link"));
            this.set('textInputs', new UIElementCollection(themeState["textInputs"], "text-input"));
            this.set('passwords', new UIElementCollection(themeState["passwords"], "password"));
            this.set('textAreas', new UIElementCollection(themeState["textAreas"], "text-area"));
            this.set('lines', new UIElementCollection(themeState["lines"], "line"));
            this.set('dropdowns', new UIElementCollection(themeState["dropdowns"], "dropdown"));
            this.set('boxes', new UIElementCollection(themeState["boxes"], "box"));
            this.set('forms', new UIElementCollection((themeState["forms"] || []), "form"));
            this.set('lists', new Backbone.Collection((themeState["lists"] || []), "list"));
            this.set('fonts', new Backbone.Collection(themeState["fonts"] || []));
        },

        getUIElementCollections: function() {

            return [this.get('buttons'), this.get('images'), this.get('headerTexts'),
                this.get('texts'), this.get('links'), this.get('textInputs'),
                this.get('passwords'), this.get('textAreas'), this.get('lines'),
                this.get('dropdowns'), this.get('boxes'), this.get('forms'),
                this.get('lists')];
        },

        getStyleWithClassAndType: function(className, type) {
            var model = null;
            if(type == "form") type = "forms";

            this.get(type).each(function(styleModel) {
                if (styleModel.get('class_name') == className) {
                    model = styleModel;
                }
            });

            return model;
        },

        getUIEVals: function(type) {

            if(this.has(type)) {
                return this.get(type);
            }

            switch(type) {
                case "button":
                    return this.getUIEVals("buttons");
                case "header":
                    return this.getUIEVals("headerTexts");
                case "image":
                    return this.getUIEVals("images");
                case "text":
                    return this.getUIEVals("texts");
                case "link":
                    return this.getUIEVals("links");
                case "line":
                    return this.getUIEVals("lines");
                case "box":
                    return this.getUIEVals("boxes");
                case "create-form":
                case "form":
                    return this.getUIEVals("forms");
            }

            return this.getUIEVals("texts");
        },

        getBaseClass: function (type) {
            if(this.has(type)) {
                return this.get(type).first().get('class_name');
            }
            return null;
        },

        getBaseStyleOf: function(type) {
            
            if(this.has(type)) {
                console.log(this.get(type));
                return this.get(type).first();
            }

            switch(type) {
                case "button":
                    return this.getBaseStyleOf("buttons");
                case "header":
                    return this.getBaseStyleOf("headerTexts");
                case "image":
                    return this.getBaseStyleOf("images");
                case "text":
                    return this.getBaseStyleOf("texts");
                case "link":
                    return this.getBaseStyleOf("links");
                case "line":
                    return this.getBaseStyleOf("lines");
                case "box":
                    return this.getBaseStyleOf("boxes");
                case "form":
                    return this.getBaseStyleOf("forms");
            }

            return null;
        },

        serialize: function() {
            var json = _.clone(this.attributes);

            json["buttons"] = this.get('buttons').serialize();
            json["images"] = this.get('images').serialize();
            json["headerTexts"] = this.get('headerTexts').serialize();
            json["texts"] = this.get('texts').serialize();
            json["links"] = this.get('links').serialize();
            json["textInputs"] = this.get('textInputs').serialize();
            json["passwords"] = this.get('passwords').serialize();
            json["textAreas"] = this.get('textAreas').serialize();
            json["lines"] = this.get('lines').serialize();
            json["dropdowns"] = this.get('dropdowns').serialize();
            json["boxes"] = this.get('boxes').serialize();
            json["forms"] = this.get('forms').serialize();
            json["lists"] = this.get('lists').serialize();
            json["fonts"] = this.get('fonts').serialize();

            return json;
        }

    });

    return ThemeModel;
});
define('models/UrlModel',['backbone'], function(Backbone) {
  var UrlModel = Backbone.Model.extend({
    defaults : {
    },

    initialize: function(bone) {
      var urlparts = [];

      if(bone) {
        urlparts = _(bone).map(function(value) {
          return {
            value: value
          };
        });
      }
      this.set('urlparts', new Backbone.Collection(urlparts));
    },

    getAppendixString: function() {
      return this.get('urlparts').pluck('value').join('/');
    },

    getUrlString: function(appSubdomain) {
      return (appUrl||'http://yourapp.com') + this.getAppendixString();
    },

    addUrlPart: function(value) {
      this.get('urlparts').push(value);
    },

    removeUrlPart: function(value) {
      var value = this.get('urlparts').remove(value);
    },

    toJSON: function() {
      var json = this.get('urlparts').pluck('value');
      return json;
    }
  });

  return UrlModel;
});

define('models/RouteModel',[
        'models/UrlModel',
        'models/NavbarModel',
        'models/FooterModel',
        'collections/WidgetCollection'
    ],
    function(UrlModel, NavbarModel, FooterModel, WidgetCollection) {

        var RouteModel = Backbone.Model.extend({
            
            defaults: {
                "name": "default-page"
            },

            initialize: function(bone) {
                bone = bone || {};
                if (bone.url && bone.url.length === 0) {
                    // homepage shouldn't have a customizable url
                    if (this.get('name') === 'Homepage') {
                        bone.url = [];
                    } else {
                        bone.url = [this.get('name') || "Page Name"];
                    }
                }
                
                this.set('url', new UrlModel(bone.url || {}));
            },

            getUrlString: function() {
                return '/' + this.get('url').toJSON().join('/');
            },

            addToContext: function(tableM) {
                this.get('url').get('urlparts').push({
                    value: '{{' + tableM.get('name') + '}}'
                });
            },

            hasContext: function(tableM) {
                return this.doesContainEntityName(tableM.get('name'));
            },

            doesContainEntityName: function(entityName) {
                return _.contains(this.get('url').get('urlparts').pluck('value'), '{{' + entityName + '}}');
            },

            getContextEntities: function() {
                var entities = [];
                this.get('url').get('urlparts').each(function(urlPart) {
                    var part = urlPart.get('value');
                    if (/{{([^\}]+)}}/g.exec(part)) entities.push(/\{\{([^\}]+)\}\}/g.exec(part)[1]);
                });
                return entities;
            },

            getContextSentence: function() {
                var entities = [];
                this.get('url').get('urlparts').each(function(urlPart) {
                    if (/{{([^\}]+)}}/g.exec(urlPart.get('value'))) entities.push(/\{\{([^\}]+)\}\}/g.exec(urlPart.get('value'))[1]);
                });

                if (entities.length === 0) {
                    return "";
                } else if (entities.length === 1) {
                    return "Page has a " + entities[0];
                } else {
                    var str = "Page has ";
                    _(entities).each(function(val, ind) {
                        if (ind == entities.length - 1) {
                            str += "and a " + val;
                        } else {
                            str += "a " + val + " ";
                        }
                    });

                    return str;
                }
            },

            getFields: function() {
                // TODO: fix this
                // var access = this.get('access_level');

                // if (access == "all") {
                //     return v1State.get('users').getCommonProps();
                // }
                // if (access == "users") {
                //     return v1State.get('users').getCommonProps();
                // }

                // var model = v1State.get('users').getUserTableWithName(access);
                // return model.getFieldsColl().models;

                return [];
            },

            updatePageName: function(urlModel, newPageName) {
                this.set('page_name', newPageName);
            },

            getLinkLang: function(contextArgs) {
                var str = "internal://" + this.get('name');
                var entities = this.getContextEntities();
                if (entities.length) {
                    str += '/?' + entities[0] + '=' + this.getPageContextDatalang();
                }
                return str;
            },

            getDataLang: function() {
                var str = "internal://" + this.get('name');
                return str;
            },

            getPageContextDatalang: function() {
                var entities = this.getContextEntities();
                return "Page." + entities[0];
            },

            validate: function() {
                var valid = true;
                var name = this.get('name');
                if (!util.isAlphaNumeric(name) || util.doesStartWithKeywords(name)) {
                    return false;
                }
            },

            setupUrl: function(name) {
                name = name.toLowerCase().replace(/ /g, '_');
                name = name.replace(/[^a-zA-Z0-9\s]+/g, '_');
                var urlparts = { value: name.toLowerCase().replace(/ /g, '_') };
                this.get('url').get('urlparts').reset([urlparts]);
            },

            isContextFree: function() {
                return (!this.get('url').get('urlparts').some(function(part) { return (/\{\{([^\}]+)\}\}/g).test(part.get('value')); }));
            },

            hasSearchList: function(searchOn) {
                var hasSearchList = false;
                this.get('uielements').each(function(widgetM) {
                    if(widgetM.isSearchList() && widgetM.get('data').get('container_info').get('entity').get('name') == searchOn) {
                        hasSearchList = true;
                    }
                });
                return hasSearchList;
            },

            toJSON: function() {
                var json = _.clone(this.attributes);
                json.url = this.get('url').serialize();
                // json.navbar = this.get('navbar').serialize();
                // json.footer = this.get('footer').serialize();
                // json.uielements = this.get('uielements').serialize();
                return json;
            }
        });

        return RouteModel;
    });
define('collections/RouteCollection',['require','exports','module','backbone','models/RouteModel'],function(require, exports, module) {

    require('backbone');

    var RouteModel = require('models/RouteModel');

    var RouteCollection = Backbone.Collection.extend({
        
        model: RouteModel,
        uniqueKeys: ["name"],

        getContextFreePages: function() {
            var pagesList = _(this.getContextFreePageModels()).map(function(pageM) {
                return pageM.get('name');
            });
            return pagesList;
        },

        getContextFreePageModels: function() {
            var pagesList = [];
            this.each(function(page) {
                if (!page.get('url').get('urlparts').some(function(part) {
                    return (/\{\{([^\}]+)\}\}/g).test(part.get('value'));
                })) {
                    pagesList.push(page);
                }
            });

            return pagesList;
        },

        getPagesWithEntityName: function(entityName) {
            var pagesList = [];
            this.each(function(page) {
                if (page.doesContainEntityName(entityName)) {
                    pagesList.push(page.get('name'));
                }
            });

            return pagesList;
        },

        getPageModelsWithEntityName: function(entityName) {
            var pagesList = [];
            this.each(function(page) {
                if (page.doesContainEntityName(entityName)) {
                    pagesList.push(page);
                }
            });

            return pagesList;
        },

        removePagesWithContext: function(tableM) {
            var arr = this.getPageModelsWithEntityName(tableM.get('name'));
            _.each(arr, function(pageM) {
                this.remove(pageM);
            }, this);
        }

    });

    return RouteCollection;
});
/*! jQuery UI - v1.10.4 - 2014-01-17
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.slider.js, jquery.ui.sortable.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

(function( $, undefined ) {

var uuid = 0,
  runiqueId = /^ui-id-\d+$/;

// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
  version: "1.10.4",

  keyCode: {
    BACKSPACE: 8,
    COMMA: 188,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    LEFT: 37,
    NUMPAD_ADD: 107,
    NUMPAD_DECIMAL: 110,
    NUMPAD_DIVIDE: 111,
    NUMPAD_ENTER: 108,
    NUMPAD_MULTIPLY: 106,
    NUMPAD_SUBTRACT: 109,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SPACE: 32,
    TAB: 9,
    UP: 38
  }
});

// plugins
$.fn.extend({
  focus: (function( orig ) {
    return function( delay, fn ) {
      return typeof delay === "number" ?
        this.each(function() {
          var elem = this;
          setTimeout(function() {
            $( elem ).focus();
            if ( fn ) {
              fn.call( elem );
            }
          }, delay );
        }) :
        orig.apply( this, arguments );
    };
  })( $.fn.focus ),

  scrollParent: function() {
    var scrollParent;
    if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
      scrollParent = this.parents().filter(function() {
        return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
      }).eq(0);
    } else {
      scrollParent = this.parents().filter(function() {
        return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
      }).eq(0);
    }

    return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
  },

  zIndex: function( zIndex ) {
    if ( zIndex !== undefined ) {
      return this.css( "zIndex", zIndex );
    }

    if ( this.length ) {
      var elem = $( this[ 0 ] ), position, value;
      while ( elem.length && elem[ 0 ] !== document ) {
        // Ignore z-index if position is set to a value where z-index is ignored by the browser
        // This makes behavior of this function consistent across browsers
        // WebKit always returns auto if the element is positioned
        position = elem.css( "position" );
        if ( position === "absolute" || position === "relative" || position === "fixed" ) {
          // IE returns 0 when zIndex is not specified
          // other browsers return a string
          // we ignore the case of nested elements with an explicit value of 0
          // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
          value = parseInt( elem.css( "zIndex" ), 10 );
          if ( !isNaN( value ) && value !== 0 ) {
            return value;
          }
        }
        elem = elem.parent();
      }
    }

    return 0;
  },

  uniqueId: function() {
    return this.each(function() {
      if ( !this.id ) {
        this.id = "ui-id-" + (++uuid);
      }
    });
  },

  removeUniqueId: function() {
    return this.each(function() {
      if ( runiqueId.test( this.id ) ) {
        $( this ).removeAttr( "id" );
      }
    });
  }
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
  var map, mapName, img,
    nodeName = element.nodeName.toLowerCase();
  if ( "area" === nodeName ) {
    map = element.parentNode;
    mapName = map.name;
    if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
      return false;
    }
    img = $( "img[usemap=#" + mapName + "]" )[0];
    return !!img && visible( img );
  }
  return ( /input|select|textarea|button|object/.test( nodeName ) ?
    !element.disabled :
    "a" === nodeName ?
      element.href || isTabIndexNotNaN :
      isTabIndexNotNaN) &&
    // the element and all of its ancestors must be visible
    visible( element );
}

function visible( element ) {
  return $.expr.filters.visible( element ) &&
    !$( element ).parents().addBack().filter(function() {
      return $.css( this, "visibility" ) === "hidden";
    }).length;
}

$.extend( $.expr[ ":" ], {
  data: $.expr.createPseudo ?
    $.expr.createPseudo(function( dataName ) {
      return function( elem ) {
        return !!$.data( elem, dataName );
      };
    }) :
    // support: jQuery <1.8
    function( elem, i, match ) {
      return !!$.data( elem, match[ 3 ] );
    },

  focusable: function( element ) {
    return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
  },

  tabbable: function( element ) {
    var tabIndex = $.attr( element, "tabindex" ),
      isTabIndexNaN = isNaN( tabIndex );
    return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
  }
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
  $.each( [ "Width", "Height" ], function( i, name ) {
    var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
      type = name.toLowerCase(),
      orig = {
        innerWidth: $.fn.innerWidth,
        innerHeight: $.fn.innerHeight,
        outerWidth: $.fn.outerWidth,
        outerHeight: $.fn.outerHeight
      };

    function reduce( elem, size, border, margin ) {
      $.each( side, function() {
        size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
        if ( border ) {
          size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
        }
        if ( margin ) {
          size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
        }
      });
      return size;
    }

    $.fn[ "inner" + name ] = function( size ) {
      if ( size === undefined ) {
        return orig[ "inner" + name ].call( this );
      }

      return this.each(function() {
        $( this ).css( type, reduce( this, size ) + "px" );
      });
    };

    $.fn[ "outer" + name] = function( size, margin ) {
      if ( typeof size !== "number" ) {
        return orig[ "outer" + name ].call( this, size );
      }

      return this.each(function() {
        $( this).css( type, reduce( this, size, true, margin ) + "px" );
      });
    };
  });
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
  $.fn.addBack = function( selector ) {
    return this.add( selector == null ?
      this.prevObject : this.prevObject.filter( selector )
    );
  };
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
  $.fn.removeData = (function( removeData ) {
    return function( key ) {
      if ( arguments.length ) {
        return removeData.call( this, $.camelCase( key ) );
      } else {
        return removeData.call( this );
      }
    };
  })( $.fn.removeData );
}





// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.support.selectstart = "onselectstart" in document.createElement( "div" );
$.fn.extend({
  disableSelection: function() {
    return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
      ".ui-disableSelection", function( event ) {
        event.preventDefault();
      });
  },

  enableSelection: function() {
    return this.unbind( ".ui-disableSelection" );
  }
});

$.extend( $.ui, {
  // $.ui.plugin is deprecated. Use $.widget() extensions instead.
  plugin: {
    add: function( module, option, set ) {
      var i,
        proto = $.ui[ module ].prototype;
      for ( i in set ) {
        proto.plugins[ i ] = proto.plugins[ i ] || [];
        proto.plugins[ i ].push( [ option, set[ i ] ] );
      }
    },
    call: function( instance, name, args ) {
      var i,
        set = instance.plugins[ name ];
      if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
        return;
      }

      for ( i = 0; i < set.length; i++ ) {
        if ( instance.options[ set[ i ][ 0 ] ] ) {
          set[ i ][ 1 ].apply( instance.element, args );
        }
      }
    }
  },

  // only used by resizable
  hasScroll: function( el, a ) {

    //If overflow is hidden, the element might have extra content, but the user wants to hide it
    if ( $( el ).css( "overflow" ) === "hidden") {
      return false;
    }

    var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
      has = false;

    if ( el[ scroll ] > 0 ) {
      return true;
    }

    // TODO: determine which cases actually cause this to happen
    // if the element doesn't have the scroll set, see if it's possible to
    // set the scroll
    el[ scroll ] = 1;
    has = ( el[ scroll ] > 0 );
    el[ scroll ] = 0;
    return has;
  }
});

})( jQuery );
(function( $, undefined ) {

var uuid = 0,
  slice = Array.prototype.slice,
  _cleanData = $.cleanData;
$.cleanData = function( elems ) {
  for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
    try {
      $( elem ).triggerHandler( "remove" );
    // http://bugs.jquery.com/ticket/8235
    } catch( e ) {}
  }
  _cleanData( elems );
};

$.widget = function( name, base, prototype ) {
  var fullName, existingConstructor, constructor, basePrototype,
    // proxiedPrototype allows the provided prototype to remain unmodified
    // so that it can be used as a mixin for multiple widgets (#8876)
    proxiedPrototype = {},
    namespace = name.split( "." )[ 0 ];

  name = name.split( "." )[ 1 ];
  fullName = namespace + "-" + name;

  if ( !prototype ) {
    prototype = base;
    base = $.Widget;
  }

  // create selector for plugin
  $.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
    return !!$.data( elem, fullName );
  };

  $[ namespace ] = $[ namespace ] || {};
  existingConstructor = $[ namespace ][ name ];
  constructor = $[ namespace ][ name ] = function( options, element ) {
    // allow instantiation without "new" keyword
    if ( !this._createWidget ) {
      return new constructor( options, element );
    }

    // allow instantiation without initializing for simple inheritance
    // must use "new" keyword (the code above always passes args)
    if ( arguments.length ) {
      this._createWidget( options, element );
    }
  };
  // extend with the existing constructor to carry over any static properties
  $.extend( constructor, existingConstructor, {
    version: prototype.version,
    // copy the object used to create the prototype in case we need to
    // redefine the widget later
    _proto: $.extend( {}, prototype ),
    // track widgets that inherit from this widget in case this widget is
    // redefined after a widget inherits from it
    _childConstructors: []
  });

  basePrototype = new base();
  // we need to make the options hash a property directly on the new instance
  // otherwise we'll modify the options hash on the prototype that we're
  // inheriting from
  basePrototype.options = $.widget.extend( {}, basePrototype.options );
  $.each( prototype, function( prop, value ) {
    if ( !$.isFunction( value ) ) {
      proxiedPrototype[ prop ] = value;
      return;
    }
    proxiedPrototype[ prop ] = (function() {
      var _super = function() {
          return base.prototype[ prop ].apply( this, arguments );
        },
        _superApply = function( args ) {
          return base.prototype[ prop ].apply( this, args );
        };
      return function() {
        var __super = this._super,
          __superApply = this._superApply,
          returnValue;

        this._super = _super;
        this._superApply = _superApply;

        returnValue = value.apply( this, arguments );

        this._super = __super;
        this._superApply = __superApply;

        return returnValue;
      };
    })();
  });
  constructor.prototype = $.widget.extend( basePrototype, {
    // TODO: remove support for widgetEventPrefix
    // always use the name + a colon as the prefix, e.g., draggable:start
    // don't prefix for widgets that aren't DOM-based
    widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
  }, proxiedPrototype, {
    constructor: constructor,
    namespace: namespace,
    widgetName: name,
    widgetFullName: fullName
  });

  // If this widget is being redefined then we need to find all widgets that
  // are inheriting from it and redefine all of them so that they inherit from
  // the new version of this widget. We're essentially trying to replace one
  // level in the prototype chain.
  if ( existingConstructor ) {
    $.each( existingConstructor._childConstructors, function( i, child ) {
      var childPrototype = child.prototype;

      // redefine the child widget using the same prototype that was
      // originally used, but inherit from the new version of the base
      $.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
    });
    // remove the list of existing child constructors from the old constructor
    // so the old child constructors can be garbage collected
    delete existingConstructor._childConstructors;
  } else {
    base._childConstructors.push( constructor );
  }

  $.widget.bridge( name, constructor );
};

$.widget.extend = function( target ) {
  var input = slice.call( arguments, 1 ),
    inputIndex = 0,
    inputLength = input.length,
    key,
    value;
  for ( ; inputIndex < inputLength; inputIndex++ ) {
    for ( key in input[ inputIndex ] ) {
      value = input[ inputIndex ][ key ];
      if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
        // Clone objects
        if ( $.isPlainObject( value ) ) {
          target[ key ] = $.isPlainObject( target[ key ] ) ?
            $.widget.extend( {}, target[ key ], value ) :
            // Don't extend strings, arrays, etc. with objects
            $.widget.extend( {}, value );
        // Copy everything else by reference
        } else {
          target[ key ] = value;
        }
      }
    }
  }
  return target;
};

$.widget.bridge = function( name, object ) {
  var fullName = object.prototype.widgetFullName || name;
  $.fn[ name ] = function( options ) {
    var isMethodCall = typeof options === "string",
      args = slice.call( arguments, 1 ),
      returnValue = this;

    // allow multiple hashes to be passed on init
    options = !isMethodCall && args.length ?
      $.widget.extend.apply( null, [ options ].concat(args) ) :
      options;

    if ( isMethodCall ) {
      this.each(function() {
        var methodValue,
          instance = $.data( this, fullName );
        if ( !instance ) {
          return $.error( "cannot call methods on " + name + " prior to initialization; " +
            "attempted to call method '" + options + "'" );
        }
        if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
          return $.error( "no such method '" + options + "' for " + name + " widget instance" );
        }
        methodValue = instance[ options ].apply( instance, args );
        if ( methodValue !== instance && methodValue !== undefined ) {
          returnValue = methodValue && methodValue.jquery ?
            returnValue.pushStack( methodValue.get() ) :
            methodValue;
          return false;
        }
      });
    } else {
      this.each(function() {
        var instance = $.data( this, fullName );
        if ( instance ) {
          instance.option( options || {} )._init();
        } else {
          $.data( this, fullName, new object( options, this ) );
        }
      });
    }

    return returnValue;
  };
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
  widgetName: "widget",
  widgetEventPrefix: "",
  defaultElement: "<div>",
  options: {
    disabled: false,

    // callbacks
    create: null
  },
  _createWidget: function( options, element ) {
    element = $( element || this.defaultElement || this )[ 0 ];
    this.element = $( element );
    this.uuid = uuid++;
    this.eventNamespace = "." + this.widgetName + this.uuid;
    this.options = $.widget.extend( {},
      this.options,
      this._getCreateOptions(),
      options );

    this.bindings = $();
    this.hoverable = $();
    this.focusable = $();

    if ( element !== this ) {
      $.data( element, this.widgetFullName, this );
      this._on( true, this.element, {
        remove: function( event ) {
          if ( event.target === element ) {
            this.destroy();
          }
        }
      });
      this.document = $( element.style ?
        // element within the document
        element.ownerDocument :
        // element is window or document
        element.document || element );
      this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
    }

    this._create();
    this._trigger( "create", null, this._getCreateEventData() );
    this._init();
  },
  _getCreateOptions: $.noop,
  _getCreateEventData: $.noop,
  _create: $.noop,
  _init: $.noop,

  destroy: function() {
    this._destroy();
    // we can probably remove the unbind calls in 2.0
    // all event bindings should go through this._on()
    this.element
      .unbind( this.eventNamespace )
      // 1.9 BC for #7810
      // TODO remove dual storage
      .removeData( this.widgetName )
      .removeData( this.widgetFullName )
      // support: jquery <1.6.3
      // http://bugs.jquery.com/ticket/9413
      .removeData( $.camelCase( this.widgetFullName ) );
    this.widget()
      .unbind( this.eventNamespace )
      .removeAttr( "aria-disabled" )
      .removeClass(
        this.widgetFullName + "-disabled " +
        "ui-state-disabled" );

    // clean up events and states
    this.bindings.unbind( this.eventNamespace );
    this.hoverable.removeClass( "ui-state-hover" );
    this.focusable.removeClass( "ui-state-focus" );
  },
  _destroy: $.noop,

  widget: function() {
    return this.element;
  },

  option: function( key, value ) {
    var options = key,
      parts,
      curOption,
      i;

    if ( arguments.length === 0 ) {
      // don't return a reference to the internal hash
      return $.widget.extend( {}, this.options );
    }

    if ( typeof key === "string" ) {
      // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
      options = {};
      parts = key.split( "." );
      key = parts.shift();
      if ( parts.length ) {
        curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
        for ( i = 0; i < parts.length - 1; i++ ) {
          curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
          curOption = curOption[ parts[ i ] ];
        }
        key = parts.pop();
        if ( arguments.length === 1 ) {
          return curOption[ key ] === undefined ? null : curOption[ key ];
        }
        curOption[ key ] = value;
      } else {
        if ( arguments.length === 1 ) {
          return this.options[ key ] === undefined ? null : this.options[ key ];
        }
        options[ key ] = value;
      }
    }

    this._setOptions( options );

    return this;
  },
  _setOptions: function( options ) {
    var key;

    for ( key in options ) {
      this._setOption( key, options[ key ] );
    }

    return this;
  },
  _setOption: function( key, value ) {
    this.options[ key ] = value;

    if ( key === "disabled" ) {
      this.widget()
        .toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
        .attr( "aria-disabled", value );
      this.hoverable.removeClass( "ui-state-hover" );
      this.focusable.removeClass( "ui-state-focus" );
    }

    return this;
  },

  enable: function() {
    return this._setOption( "disabled", false );
  },
  disable: function() {
    return this._setOption( "disabled", true );
  },

  _on: function( suppressDisabledCheck, element, handlers ) {
    var delegateElement,
      instance = this;

    // no suppressDisabledCheck flag, shuffle arguments
    if ( typeof suppressDisabledCheck !== "boolean" ) {
      handlers = element;
      element = suppressDisabledCheck;
      suppressDisabledCheck = false;
    }

    // no element argument, shuffle and use this.element
    if ( !handlers ) {
      handlers = element;
      element = this.element;
      delegateElement = this.widget();
    } else {
      // accept selectors, DOM elements
      element = delegateElement = $( element );
      this.bindings = this.bindings.add( element );
    }

    $.each( handlers, function( event, handler ) {
      function handlerProxy() {
        // allow widgets to customize the disabled handling
        // - disabled as an array instead of boolean
        // - disabled class as method for disabling individual parts
        if ( !suppressDisabledCheck &&
            ( instance.options.disabled === true ||
              $( this ).hasClass( "ui-state-disabled" ) ) ) {
          return;
        }
        return ( typeof handler === "string" ? instance[ handler ] : handler )
          .apply( instance, arguments );
      }

      // copy the guid so direct unbinding works
      if ( typeof handler !== "string" ) {
        handlerProxy.guid = handler.guid =
          handler.guid || handlerProxy.guid || $.guid++;
      }

      var match = event.match( /^(\w+)\s*(.*)$/ ),
        eventName = match[1] + instance.eventNamespace,
        selector = match[2];
      if ( selector ) {
        delegateElement.delegate( selector, eventName, handlerProxy );
      } else {
        element.bind( eventName, handlerProxy );
      }
    });
  },

  _off: function( element, eventName ) {
    eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
    element.unbind( eventName ).undelegate( eventName );
  },

  _delay: function( handler, delay ) {
    function handlerProxy() {
      return ( typeof handler === "string" ? instance[ handler ] : handler )
        .apply( instance, arguments );
    }
    var instance = this;
    return setTimeout( handlerProxy, delay || 0 );
  },

  _hoverable: function( element ) {
    this.hoverable = this.hoverable.add( element );
    this._on( element, {
      mouseenter: function( event ) {
        $( event.currentTarget ).addClass( "ui-state-hover" );
      },
      mouseleave: function( event ) {
        $( event.currentTarget ).removeClass( "ui-state-hover" );
      }
    });
  },

  _focusable: function( element ) {
    this.focusable = this.focusable.add( element );
    this._on( element, {
      focusin: function( event ) {
        $( event.currentTarget ).addClass( "ui-state-focus" );
      },
      focusout: function( event ) {
        $( event.currentTarget ).removeClass( "ui-state-focus" );
      }
    });
  },

  _trigger: function( type, event, data ) {
    var prop, orig,
      callback = this.options[ type ];

    data = data || {};
    event = $.Event( event );
    event.type = ( type === this.widgetEventPrefix ?
      type :
      this.widgetEventPrefix + type ).toLowerCase();
    // the original event may come from any element
    // so we need to reset the target on the new event
    event.target = this.element[ 0 ];

    // copy original event properties over to the new event
    orig = event.originalEvent;
    if ( orig ) {
      for ( prop in orig ) {
        if ( !( prop in event ) ) {
          event[ prop ] = orig[ prop ];
        }
      }
    }

    this.element.trigger( event, data );
    return !( $.isFunction( callback ) &&
      callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
      event.isDefaultPrevented() );
  }
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
  $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
    if ( typeof options === "string" ) {
      options = { effect: options };
    }
    var hasOptions,
      effectName = !options ?
        method :
        options === true || typeof options === "number" ?
          defaultEffect :
          options.effect || defaultEffect;
    options = options || {};
    if ( typeof options === "number" ) {
      options = { duration: options };
    }
    hasOptions = !$.isEmptyObject( options );
    options.complete = callback;
    if ( options.delay ) {
      element.delay( options.delay );
    }
    if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
      element[ method ]( options );
    } else if ( effectName !== method && element[ effectName ] ) {
      element[ effectName ]( options.duration, options.easing, callback );
    } else {
      element.queue(function( next ) {
        $( this )[ method ]();
        if ( callback ) {
          callback.call( element[ 0 ] );
        }
        next();
      });
    }
  };
});

})( jQuery );
(function( $, undefined ) {

var mouseHandled = false;
$( document ).mouseup( function() {
  mouseHandled = false;
});

$.widget("ui.mouse", {
  version: "1.10.4",
  options: {
    cancel: "input,textarea,button,select,option",
    distance: 1,
    delay: 0
  },
  _mouseInit: function() {
    var that = this;

    this.element
      .bind("mousedown."+this.widgetName, function(event) {
        return that._mouseDown(event);
      })
      .bind("click."+this.widgetName, function(event) {
        if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
          $.removeData(event.target, that.widgetName + ".preventClickEvent");
          event.stopImmediatePropagation();
          return false;
        }
      });

    this.started = false;
  },

  // TODO: make sure destroying one instance of mouse doesn't mess with
  // other instances of mouse
  _mouseDestroy: function() {
    this.element.unbind("."+this.widgetName);
    if ( this._mouseMoveDelegate ) {
      $(document)
        .unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
        .unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
    }
  },

  _mouseDown: function(event) {
    // don't let more than one widget handle mouseStart
    if( mouseHandled ) { return; }

    // we may have missed mouseup (out of window)
    (this._mouseStarted && this._mouseUp(event));

    this._mouseDownEvent = event;

    var that = this,
      btnIsLeft = (event.which === 1),
      // event.target.nodeName works around a bug in IE 8 with
      // disabled inputs (#7620)
      elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
    if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
      return true;
    }

    this.mouseDelayMet = !this.options.delay;
    if (!this.mouseDelayMet) {
      this._mouseDelayTimer = setTimeout(function() {
        that.mouseDelayMet = true;
      }, this.options.delay);
    }

    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
      this._mouseStarted = (this._mouseStart(event) !== false);
      if (!this._mouseStarted) {
        event.preventDefault();
        return true;
      }
    }

    // Click event may never have fired (Gecko & Opera)
    if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
      $.removeData(event.target, this.widgetName + ".preventClickEvent");
    }

    // these delegates are required to keep context
    this._mouseMoveDelegate = function(event) {
      return that._mouseMove(event);
    };
    this._mouseUpDelegate = function(event) {
      return that._mouseUp(event);
    };
    $(document)
      .bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
      .bind("mouseup."+this.widgetName, this._mouseUpDelegate);

    event.preventDefault();

    mouseHandled = true;
    return true;
  },

  _mouseMove: function(event) {
    // IE mouseup check - mouseup happened when mouse was out of window
    if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
      return this._mouseUp(event);
    }

    if (this._mouseStarted) {
      this._mouseDrag(event);
      return event.preventDefault();
    }

    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
      this._mouseStarted =
        (this._mouseStart(this._mouseDownEvent, event) !== false);
      (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
    }

    return !this._mouseStarted;
  },

  _mouseUp: function(event) {
    $(document)
      .unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
      .unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

    if (this._mouseStarted) {
      this._mouseStarted = false;

      if (event.target === this._mouseDownEvent.target) {
        $.data(event.target, this.widgetName + ".preventClickEvent", true);
      }

      this._mouseStop(event);
    }

    return false;
  },

  _mouseDistanceMet: function(event) {
    return (Math.max(
        Math.abs(this._mouseDownEvent.pageX - event.pageX),
        Math.abs(this._mouseDownEvent.pageY - event.pageY)
      ) >= this.options.distance
    );
  },

  _mouseDelayMet: function(/* event */) {
    return this.mouseDelayMet;
  },

  // These are placeholder methods, to be overriden by extending plugin
  _mouseStart: function(/* event */) {},
  _mouseDrag: function(/* event */) {},
  _mouseStop: function(/* event */) {},
  _mouseCapture: function(/* event */) { return true; }
});

})(jQuery);
(function( $, undefined ) {

$.ui = $.ui || {};

var cachedScrollbarWidth,
  max = Math.max,
  abs = Math.abs,
  round = Math.round,
  rhorizontal = /left|center|right/,
  rvertical = /top|center|bottom/,
  roffset = /[\+\-]\d+(\.[\d]+)?%?/,
  rposition = /^\w+/,
  rpercent = /%$/,
  _position = $.fn.position;

function getOffsets( offsets, width, height ) {
  return [
    parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
    parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
  ];
}

function parseCss( element, property ) {
  return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
  var raw = elem[0];
  if ( raw.nodeType === 9 ) {
    return {
      width: elem.width(),
      height: elem.height(),
      offset: { top: 0, left: 0 }
    };
  }
  if ( $.isWindow( raw ) ) {
    return {
      width: elem.width(),
      height: elem.height(),
      offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
    };
  }
  if ( raw.preventDefault ) {
    return {
      width: 0,
      height: 0,
      offset: { top: raw.pageY, left: raw.pageX }
    };
  }
  return {
    width: elem.outerWidth(),
    height: elem.outerHeight(),
    offset: elem.offset()
  };
}

$.position = {
  scrollbarWidth: function() {
    if ( cachedScrollbarWidth !== undefined ) {
      return cachedScrollbarWidth;
    }
    var w1, w2,
      div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
      innerDiv = div.children()[0];

    $( "body" ).append( div );
    w1 = innerDiv.offsetWidth;
    div.css( "overflow", "scroll" );

    w2 = innerDiv.offsetWidth;

    if ( w1 === w2 ) {
      w2 = div[0].clientWidth;
    }

    div.remove();

    return (cachedScrollbarWidth = w1 - w2);
  },
  getScrollInfo: function( within ) {
    var overflowX = within.isWindow || within.isDocument ? "" :
        within.element.css( "overflow-x" ),
      overflowY = within.isWindow || within.isDocument ? "" :
        within.element.css( "overflow-y" ),
      hasOverflowX = overflowX === "scroll" ||
        ( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
      hasOverflowY = overflowY === "scroll" ||
        ( overflowY === "auto" && within.height < within.element[0].scrollHeight );
    return {
      width: hasOverflowY ? $.position.scrollbarWidth() : 0,
      height: hasOverflowX ? $.position.scrollbarWidth() : 0
    };
  },
  getWithinInfo: function( element ) {
    var withinElement = $( element || window ),
      isWindow = $.isWindow( withinElement[0] ),
      isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
    return {
      element: withinElement,
      isWindow: isWindow,
      isDocument: isDocument,
      offset: withinElement.offset() || { left: 0, top: 0 },
      scrollLeft: withinElement.scrollLeft(),
      scrollTop: withinElement.scrollTop(),
      width: isWindow ? withinElement.width() : withinElement.outerWidth(),
      height: isWindow ? withinElement.height() : withinElement.outerHeight()
    };
  }
};

$.fn.position = function( options ) {
  if ( !options || !options.of ) {
    return _position.apply( this, arguments );
  }

  // make a copy, we don't want to modify arguments
  options = $.extend( {}, options );

  var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
    target = $( options.of ),
    within = $.position.getWithinInfo( options.within ),
    scrollInfo = $.position.getScrollInfo( within ),
    collision = ( options.collision || "flip" ).split( " " ),
    offsets = {};

  dimensions = getDimensions( target );
  if ( target[0].preventDefault ) {
    // force left top to allow flipping
    options.at = "left top";
  }
  targetWidth = dimensions.width;
  targetHeight = dimensions.height;
  targetOffset = dimensions.offset;
  // clone to reuse original targetOffset later
  basePosition = $.extend( {}, targetOffset );

  // force my and at to have valid horizontal and vertical positions
  // if a value is missing or invalid, it will be converted to center
  $.each( [ "my", "at" ], function() {
    var pos = ( options[ this ] || "" ).split( " " ),
      horizontalOffset,
      verticalOffset;

    if ( pos.length === 1) {
      pos = rhorizontal.test( pos[ 0 ] ) ?
        pos.concat( [ "center" ] ) :
        rvertical.test( pos[ 0 ] ) ?
          [ "center" ].concat( pos ) :
          [ "center", "center" ];
    }
    pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
    pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

    // calculate offsets
    horizontalOffset = roffset.exec( pos[ 0 ] );
    verticalOffset = roffset.exec( pos[ 1 ] );
    offsets[ this ] = [
      horizontalOffset ? horizontalOffset[ 0 ] : 0,
      verticalOffset ? verticalOffset[ 0 ] : 0
    ];

    // reduce to just the positions without the offsets
    options[ this ] = [
      rposition.exec( pos[ 0 ] )[ 0 ],
      rposition.exec( pos[ 1 ] )[ 0 ]
    ];
  });

  // normalize collision option
  if ( collision.length === 1 ) {
    collision[ 1 ] = collision[ 0 ];
  }

  if ( options.at[ 0 ] === "right" ) {
    basePosition.left += targetWidth;
  } else if ( options.at[ 0 ] === "center" ) {
    basePosition.left += targetWidth / 2;
  }

  if ( options.at[ 1 ] === "bottom" ) {
    basePosition.top += targetHeight;
  } else if ( options.at[ 1 ] === "center" ) {
    basePosition.top += targetHeight / 2;
  }

  atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
  basePosition.left += atOffset[ 0 ];
  basePosition.top += atOffset[ 1 ];

  return this.each(function() {
    var collisionPosition, using,
      elem = $( this ),
      elemWidth = elem.outerWidth(),
      elemHeight = elem.outerHeight(),
      marginLeft = parseCss( this, "marginLeft" ),
      marginTop = parseCss( this, "marginTop" ),
      collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
      collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
      position = $.extend( {}, basePosition ),
      myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

    if ( options.my[ 0 ] === "right" ) {
      position.left -= elemWidth;
    } else if ( options.my[ 0 ] === "center" ) {
      position.left -= elemWidth / 2;
    }

    if ( options.my[ 1 ] === "bottom" ) {
      position.top -= elemHeight;
    } else if ( options.my[ 1 ] === "center" ) {
      position.top -= elemHeight / 2;
    }

    position.left += myOffset[ 0 ];
    position.top += myOffset[ 1 ];

    // if the browser doesn't support fractions, then round for consistent results
    if ( !$.support.offsetFractions ) {
      position.left = round( position.left );
      position.top = round( position.top );
    }

    collisionPosition = {
      marginLeft: marginLeft,
      marginTop: marginTop
    };

    $.each( [ "left", "top" ], function( i, dir ) {
      if ( $.ui.position[ collision[ i ] ] ) {
        $.ui.position[ collision[ i ] ][ dir ]( position, {
          targetWidth: targetWidth,
          targetHeight: targetHeight,
          elemWidth: elemWidth,
          elemHeight: elemHeight,
          collisionPosition: collisionPosition,
          collisionWidth: collisionWidth,
          collisionHeight: collisionHeight,
          offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
          my: options.my,
          at: options.at,
          within: within,
          elem : elem
        });
      }
    });

    if ( options.using ) {
      // adds feedback as second argument to using callback, if present
      using = function( props ) {
        var left = targetOffset.left - position.left,
          right = left + targetWidth - elemWidth,
          top = targetOffset.top - position.top,
          bottom = top + targetHeight - elemHeight,
          feedback = {
            target: {
              element: target,
              left: targetOffset.left,
              top: targetOffset.top,
              width: targetWidth,
              height: targetHeight
            },
            element: {
              element: elem,
              left: position.left,
              top: position.top,
              width: elemWidth,
              height: elemHeight
            },
            horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
            vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
          };
        if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
          feedback.horizontal = "center";
        }
        if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
          feedback.vertical = "middle";
        }
        if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
          feedback.important = "horizontal";
        } else {
          feedback.important = "vertical";
        }
        options.using.call( this, props, feedback );
      };
    }

    elem.offset( $.extend( position, { using: using } ) );
  });
};

$.ui.position = {
  fit: {
    left: function( position, data ) {
      var within = data.within,
        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
        outerWidth = within.width,
        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
        overLeft = withinOffset - collisionPosLeft,
        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
        newOverRight;

      // element is wider than within
      if ( data.collisionWidth > outerWidth ) {
        // element is initially over the left side of within
        if ( overLeft > 0 && overRight <= 0 ) {
          newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
          position.left += overLeft - newOverRight;
        // element is initially over right side of within
        } else if ( overRight > 0 && overLeft <= 0 ) {
          position.left = withinOffset;
        // element is initially over both left and right sides of within
        } else {
          if ( overLeft > overRight ) {
            position.left = withinOffset + outerWidth - data.collisionWidth;
          } else {
            position.left = withinOffset;
          }
        }
      // too far left -> align with left edge
      } else if ( overLeft > 0 ) {
        position.left += overLeft;
      // too far right -> align with right edge
      } else if ( overRight > 0 ) {
        position.left -= overRight;
      // adjust based on position and margin
      } else {
        position.left = max( position.left - collisionPosLeft, position.left );
      }
    },
    top: function( position, data ) {
      var within = data.within,
        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
        outerHeight = data.within.height,
        collisionPosTop = position.top - data.collisionPosition.marginTop,
        overTop = withinOffset - collisionPosTop,
        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
        newOverBottom;

      // element is taller than within
      if ( data.collisionHeight > outerHeight ) {
        // element is initially over the top of within
        if ( overTop > 0 && overBottom <= 0 ) {
          newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
          position.top += overTop - newOverBottom;
        // element is initially over bottom of within
        } else if ( overBottom > 0 && overTop <= 0 ) {
          position.top = withinOffset;
        // element is initially over both top and bottom of within
        } else {
          if ( overTop > overBottom ) {
            position.top = withinOffset + outerHeight - data.collisionHeight;
          } else {
            position.top = withinOffset;
          }
        }
      // too far up -> align with top
      } else if ( overTop > 0 ) {
        position.top += overTop;
      // too far down -> align with bottom edge
      } else if ( overBottom > 0 ) {
        position.top -= overBottom;
      // adjust based on position and margin
      } else {
        position.top = max( position.top - collisionPosTop, position.top );
      }
    }
  },
  flip: {
    left: function( position, data ) {
      var within = data.within,
        withinOffset = within.offset.left + within.scrollLeft,
        outerWidth = within.width,
        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
        overLeft = collisionPosLeft - offsetLeft,
        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
        myOffset = data.my[ 0 ] === "left" ?
          -data.elemWidth :
          data.my[ 0 ] === "right" ?
            data.elemWidth :
            0,
        atOffset = data.at[ 0 ] === "left" ?
          data.targetWidth :
          data.at[ 0 ] === "right" ?
            -data.targetWidth :
            0,
        offset = -2 * data.offset[ 0 ],
        newOverRight,
        newOverLeft;

      if ( overLeft < 0 ) {
        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
        if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
          position.left += myOffset + atOffset + offset;
        }
      }
      else if ( overRight > 0 ) {
        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
        if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
          position.left += myOffset + atOffset + offset;
        }
      }
    },
    top: function( position, data ) {
      var within = data.within,
        withinOffset = within.offset.top + within.scrollTop,
        outerHeight = within.height,
        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
        collisionPosTop = position.top - data.collisionPosition.marginTop,
        overTop = collisionPosTop - offsetTop,
        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
        top = data.my[ 1 ] === "top",
        myOffset = top ?
          -data.elemHeight :
          data.my[ 1 ] === "bottom" ?
            data.elemHeight :
            0,
        atOffset = data.at[ 1 ] === "top" ?
          data.targetHeight :
          data.at[ 1 ] === "bottom" ?
            -data.targetHeight :
            0,
        offset = -2 * data.offset[ 1 ],
        newOverTop,
        newOverBottom;
      if ( overTop < 0 ) {
        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
        if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
          position.top += myOffset + atOffset + offset;
        }
      }
      else if ( overBottom > 0 ) {
        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
        if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
          position.top += myOffset + atOffset + offset;
        }
      }
    }
  },
  flipfit: {
    left: function() {
      $.ui.position.flip.left.apply( this, arguments );
      $.ui.position.fit.left.apply( this, arguments );
    },
    top: function() {
      $.ui.position.flip.top.apply( this, arguments );
      $.ui.position.fit.top.apply( this, arguments );
    }
  }
};

// fraction support test
(function () {
  var testElement, testElementParent, testElementStyle, offsetLeft, i,
    body = document.getElementsByTagName( "body" )[ 0 ],
    div = document.createElement( "div" );

  //Create a "fake body" for testing based on method used in jQuery.support
  testElement = document.createElement( body ? "div" : "body" );
  testElementStyle = {
    visibility: "hidden",
    width: 0,
    height: 0,
    border: 0,
    margin: 0,
    background: "none"
  };
  if ( body ) {
    $.extend( testElementStyle, {
      position: "absolute",
      left: "-1000px",
      top: "-1000px"
    });
  }
  for ( i in testElementStyle ) {
    testElement.style[ i ] = testElementStyle[ i ];
  }
  testElement.appendChild( div );
  testElementParent = body || document.documentElement;
  testElementParent.insertBefore( testElement, testElementParent.firstChild );

  div.style.cssText = "position: absolute; left: 10.7432222px;";

  offsetLeft = $( div ).offset().left;
  $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

  testElement.innerHTML = "";
  testElementParent.removeChild( testElement );
})();

}( jQuery ) );
(function( $, undefined ) {

var uid = 0,
  hideProps = {},
  showProps = {};

hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =
  hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
showProps.height = showProps.paddingTop = showProps.paddingBottom =
  showProps.borderTopWidth = showProps.borderBottomWidth = "show";

$.widget( "ui.accordion", {
  version: "1.10.4",
  options: {
    active: 0,
    animate: {},
    collapsible: false,
    event: "click",
    header: "> li > :first-child,> :not(li):even",
    heightStyle: "auto",
    icons: {
      activeHeader: "ui-icon-triangle-1-s",
      header: "ui-icon-triangle-1-e"
    },

    // callbacks
    activate: null,
    beforeActivate: null
  },

  _create: function() {
    var options = this.options;
    this.prevShow = this.prevHide = $();
    this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )
      // ARIA
      .attr( "role", "tablist" );

    // don't allow collapsible: false and active: false / null
    if ( !options.collapsible && (options.active === false || options.active == null) ) {
      options.active = 0;
    }

    this._processPanels();
    // handle negative values
    if ( options.active < 0 ) {
      options.active += this.headers.length;
    }
    this._refresh();
  },

  _getCreateEventData: function() {
    return {
      header: this.active,
      panel: !this.active.length ? $() : this.active.next(),
      content: !this.active.length ? $() : this.active.next()
    };
  },

  _createIcons: function() {
    var icons = this.options.icons;
    if ( icons ) {
      $( "<span>" )
        .addClass( "ui-accordion-header-icon ui-icon " + icons.header )
        .prependTo( this.headers );
      this.active.children( ".ui-accordion-header-icon" )
        .removeClass( icons.header )
        .addClass( icons.activeHeader );
      this.headers.addClass( "ui-accordion-icons" );
    }
  },

  _destroyIcons: function() {
    this.headers
      .removeClass( "ui-accordion-icons" )
      .children( ".ui-accordion-header-icon" )
        .remove();
  },

  _destroy: function() {
    var contents;

    // clean up main element
    this.element
      .removeClass( "ui-accordion ui-widget ui-helper-reset" )
      .removeAttr( "role" );

    // clean up headers
    this.headers
      .removeClass( "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
      .removeAttr( "role" )
      .removeAttr( "aria-expanded" )
      .removeAttr( "aria-selected" )
      .removeAttr( "aria-controls" )
      .removeAttr( "tabIndex" )
      .each(function() {
        if ( /^ui-accordion/.test( this.id ) ) {
          this.removeAttribute( "id" );
        }
      });
    this._destroyIcons();

    // clean up content panels
    contents = this.headers.next()
      .css( "display", "" )
      .removeAttr( "role" )
      .removeAttr( "aria-hidden" )
      .removeAttr( "aria-labelledby" )
      .removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled" )
      .each(function() {
        if ( /^ui-accordion/.test( this.id ) ) {
          this.removeAttribute( "id" );
        }
      });
    if ( this.options.heightStyle !== "content" ) {
      contents.css( "height", "" );
    }
  },

  _setOption: function( key, value ) {
    if ( key === "active" ) {
      // _activate() will handle invalid values and update this.options
      this._activate( value );
      return;
    }

    if ( key === "event" ) {
      if ( this.options.event ) {
        this._off( this.headers, this.options.event );
      }
      this._setupEvents( value );
    }

    this._super( key, value );

    // setting collapsible: false while collapsed; open first panel
    if ( key === "collapsible" && !value && this.options.active === false ) {
      this._activate( 0 );
    }

    if ( key === "icons" ) {
      this._destroyIcons();
      if ( value ) {
        this._createIcons();
      }
    }

    // #5332 - opacity doesn't cascade to positioned elements in IE
    // so we need to add the disabled class to the headers and panels
    if ( key === "disabled" ) {
      this.headers.add( this.headers.next() )
        .toggleClass( "ui-state-disabled", !!value );
    }
  },

  _keydown: function( event ) {
    if ( event.altKey || event.ctrlKey ) {
      return;
    }

    var keyCode = $.ui.keyCode,
      length = this.headers.length,
      currentIndex = this.headers.index( event.target ),
      toFocus = false;

    switch ( event.keyCode ) {
      case keyCode.RIGHT:
      case keyCode.DOWN:
        toFocus = this.headers[ ( currentIndex + 1 ) % length ];
        break;
      case keyCode.LEFT:
      case keyCode.UP:
        toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
        break;
      case keyCode.SPACE:
      case keyCode.ENTER:
        this._eventHandler( event );
        break;
      case keyCode.HOME:
        toFocus = this.headers[ 0 ];
        break;
      case keyCode.END:
        toFocus = this.headers[ length - 1 ];
        break;
    }

    if ( toFocus ) {
      $( event.target ).attr( "tabIndex", -1 );
      $( toFocus ).attr( "tabIndex", 0 );
      toFocus.focus();
      event.preventDefault();
    }
  },

  _panelKeyDown : function( event ) {
    if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
      $( event.currentTarget ).prev().focus();
    }
  },

  refresh: function() {
    var options = this.options;
    this._processPanels();

    // was collapsed or no panel
    if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
      options.active = false;
      this.active = $();
    // active false only when collapsible is true
    } else if ( options.active === false ) {
      this._activate( 0 );
    // was active, but active panel is gone
    } else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
      // all remaining panel are disabled
      if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {
        options.active = false;
        this.active = $();
      // activate previous panel
      } else {
        this._activate( Math.max( 0, options.active - 1 ) );
      }
    // was active, active panel still exists
    } else {
      // make sure active index is correct
      options.active = this.headers.index( this.active );
    }

    this._destroyIcons();

    this._refresh();
  },

  _processPanels: function() {
    this.headers = this.element.find( this.options.header )
      .addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" );

    this.headers.next()
      .addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
      .filter(":not(.ui-accordion-content-active)")
      .hide();
  },

  _refresh: function() {
    var maxHeight,
      options = this.options,
      heightStyle = options.heightStyle,
      parent = this.element.parent(),
      accordionId = this.accordionId = "ui-accordion-" +
        (this.element.attr( "id" ) || ++uid);

    this.active = this._findActive( options.active )
      .addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )
      .removeClass( "ui-corner-all" );
    this.active.next()
      .addClass( "ui-accordion-content-active" )
      .show();

    this.headers
      .attr( "role", "tab" )
      .each(function( i ) {
        var header = $( this ),
          headerId = header.attr( "id" ),
          panel = header.next(),
          panelId = panel.attr( "id" );
        if ( !headerId ) {
          headerId = accordionId + "-header-" + i;
          header.attr( "id", headerId );
        }
        if ( !panelId ) {
          panelId = accordionId + "-panel-" + i;
          panel.attr( "id", panelId );
        }
        header.attr( "aria-controls", panelId );
        panel.attr( "aria-labelledby", headerId );
      })
      .next()
        .attr( "role", "tabpanel" );

    this.headers
      .not( this.active )
      .attr({
        "aria-selected": "false",
        "aria-expanded": "false",
        tabIndex: -1
      })
      .next()
        .attr({
          "aria-hidden": "true"
        })
        .hide();

    // make sure at least one header is in the tab order
    if ( !this.active.length ) {
      this.headers.eq( 0 ).attr( "tabIndex", 0 );
    } else {
      this.active.attr({
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      })
      .next()
        .attr({
          "aria-hidden": "false"
        });
    }

    this._createIcons();

    this._setupEvents( options.event );

    if ( heightStyle === "fill" ) {
      maxHeight = parent.height();
      this.element.siblings( ":visible" ).each(function() {
        var elem = $( this ),
          position = elem.css( "position" );

        if ( position === "absolute" || position === "fixed" ) {
          return;
        }
        maxHeight -= elem.outerHeight( true );
      });

      this.headers.each(function() {
        maxHeight -= $( this ).outerHeight( true );
      });

      this.headers.next()
        .each(function() {
          $( this ).height( Math.max( 0, maxHeight -
            $( this ).innerHeight() + $( this ).height() ) );
        })
        .css( "overflow", "auto" );
    } else if ( heightStyle === "auto" ) {
      maxHeight = 0;
      this.headers.next()
        .each(function() {
          maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
        })
        .height( maxHeight );
    }
  },

  _activate: function( index ) {
    var active = this._findActive( index )[ 0 ];

    // trying to activate the already active panel
    if ( active === this.active[ 0 ] ) {
      return;
    }

    // trying to collapse, simulate a click on the currently active header
    active = active || this.active[ 0 ];

    this._eventHandler({
      target: active,
      currentTarget: active,
      preventDefault: $.noop
    });
  },

  _findActive: function( selector ) {
    return typeof selector === "number" ? this.headers.eq( selector ) : $();
  },

  _setupEvents: function( event ) {
    var events = {
      keydown: "_keydown"
    };
    if ( event ) {
      $.each( event.split(" "), function( index, eventName ) {
        events[ eventName ] = "_eventHandler";
      });
    }

    this._off( this.headers.add( this.headers.next() ) );
    this._on( this.headers, events );
    this._on( this.headers.next(), { keydown: "_panelKeyDown" });
    this._hoverable( this.headers );
    this._focusable( this.headers );
  },

  _eventHandler: function( event ) {
    var options = this.options,
      active = this.active,
      clicked = $( event.currentTarget ),
      clickedIsActive = clicked[ 0 ] === active[ 0 ],
      collapsing = clickedIsActive && options.collapsible,
      toShow = collapsing ? $() : clicked.next(),
      toHide = active.next(),
      eventData = {
        oldHeader: active,
        oldPanel: toHide,
        newHeader: collapsing ? $() : clicked,
        newPanel: toShow
      };

    event.preventDefault();

    if (
        // click on active header, but not collapsible
        ( clickedIsActive && !options.collapsible ) ||
        // allow canceling activation
        ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
      return;
    }

    options.active = collapsing ? false : this.headers.index( clicked );

    // when the call to ._toggle() comes after the class changes
    // it causes a very odd bug in IE 8 (see #6720)
    this.active = clickedIsActive ? $() : clicked;
    this._toggle( eventData );

    // switch classes
    // corner classes on the previously active header stay after the animation
    active.removeClass( "ui-accordion-header-active ui-state-active" );
    if ( options.icons ) {
      active.children( ".ui-accordion-header-icon" )
        .removeClass( options.icons.activeHeader )
        .addClass( options.icons.header );
    }

    if ( !clickedIsActive ) {
      clicked
        .removeClass( "ui-corner-all" )
        .addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
      if ( options.icons ) {
        clicked.children( ".ui-accordion-header-icon" )
          .removeClass( options.icons.header )
          .addClass( options.icons.activeHeader );
      }

      clicked
        .next()
        .addClass( "ui-accordion-content-active" );
    }
  },

  _toggle: function( data ) {
    var toShow = data.newPanel,
      toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

    // handle activating a panel during the animation for another activation
    this.prevShow.add( this.prevHide ).stop( true, true );
    this.prevShow = toShow;
    this.prevHide = toHide;

    if ( this.options.animate ) {
      this._animate( toShow, toHide, data );
    } else {
      toHide.hide();
      toShow.show();
      this._toggleComplete( data );
    }

    toHide.attr({
      "aria-hidden": "true"
    });
    toHide.prev().attr( "aria-selected", "false" );
    // if we're switching panels, remove the old header from the tab order
    // if we're opening from collapsed state, remove the previous header from the tab order
    // if we're collapsing, then keep the collapsing header in the tab order
    if ( toShow.length && toHide.length ) {
      toHide.prev().attr({
        "tabIndex": -1,
        "aria-expanded": "false"
      });
    } else if ( toShow.length ) {
      this.headers.filter(function() {
        return $( this ).attr( "tabIndex" ) === 0;
      })
      .attr( "tabIndex", -1 );
    }

    toShow
      .attr( "aria-hidden", "false" )
      .prev()
        .attr({
          "aria-selected": "true",
          tabIndex: 0,
          "aria-expanded": "true"
        });
  },

  _animate: function( toShow, toHide, data ) {
    var total, easing, duration,
      that = this,
      adjust = 0,
      down = toShow.length &&
        ( !toHide.length || ( toShow.index() < toHide.index() ) ),
      animate = this.options.animate || {},
      options = down && animate.down || animate,
      complete = function() {
        that._toggleComplete( data );
      };

    if ( typeof options === "number" ) {
      duration = options;
    }
    if ( typeof options === "string" ) {
      easing = options;
    }
    // fall back from options to animation in case of partial down settings
    easing = easing || options.easing || animate.easing;
    duration = duration || options.duration || animate.duration;

    if ( !toHide.length ) {
      return toShow.animate( showProps, duration, easing, complete );
    }
    if ( !toShow.length ) {
      return toHide.animate( hideProps, duration, easing, complete );
    }

    total = toShow.show().outerHeight();
    toHide.animate( hideProps, {
      duration: duration,
      easing: easing,
      step: function( now, fx ) {
        fx.now = Math.round( now );
      }
    });
    toShow
      .hide()
      .animate( showProps, {
        duration: duration,
        easing: easing,
        complete: complete,
        step: function( now, fx ) {
          fx.now = Math.round( now );
          if ( fx.prop !== "height" ) {
            adjust += fx.now;
          } else if ( that.options.heightStyle !== "content" ) {
            fx.now = Math.round( total - toHide.outerHeight() - adjust );
            adjust = 0;
          }
        }
      });
  },

  _toggleComplete: function( data ) {
    var toHide = data.oldPanel;

    toHide
      .removeClass( "ui-accordion-content-active" )
      .prev()
        .removeClass( "ui-corner-top" )
        .addClass( "ui-corner-all" );

    // Work around for rendering bug in IE (#5421)
    if ( toHide.length ) {
      toHide.parent()[0].className = toHide.parent()[0].className;
    }
    this._trigger( "activate", null, data );
  }
});

})( jQuery );
(function( $, undefined ) {

$.widget( "ui.autocomplete", {
  version: "1.10.4",
  defaultElement: "<input>",
  options: {
    appendTo: null,
    autoFocus: false,
    delay: 300,
    minLength: 1,
    position: {
      my: "left top",
      at: "left bottom",
      collision: "none"
    },
    source: null,

    // callbacks
    change: null,
    close: null,
    focus: null,
    open: null,
    response: null,
    search: null,
    select: null
  },

  requestIndex: 0,
  pending: 0,

  _create: function() {
    // Some browsers only repeat keydown events, not keypress events,
    // so we use the suppressKeyPress flag to determine if we've already
    // handled the keydown event. #7269
    // Unfortunately the code for & in keypress is the same as the up arrow,
    // so we use the suppressKeyPressRepeat flag to avoid handling keypress
    // events when we know the keydown event was used to modify the
    // search term. #7799
    var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
      nodeName = this.element[0].nodeName.toLowerCase(),
      isTextarea = nodeName === "textarea",
      isInput = nodeName === "input";

    this.isMultiLine =
      // Textareas are always multi-line
      isTextarea ? true :
      // Inputs are always single-line, even if inside a contentEditable element
      // IE also treats inputs as contentEditable
      isInput ? false :
      // All other element types are determined by whether or not they're contentEditable
      this.element.prop( "isContentEditable" );

    this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
    this.isNewMenu = true;

    this.element
      .addClass( "ui-autocomplete-input" )
      .attr( "autocomplete", "off" );

    this._on( this.element, {
      keydown: function( event ) {
        if ( this.element.prop( "readOnly" ) ) {
          suppressKeyPress = true;
          suppressInput = true;
          suppressKeyPressRepeat = true;
          return;
        }

        suppressKeyPress = false;
        suppressInput = false;
        suppressKeyPressRepeat = false;
        var keyCode = $.ui.keyCode;
        switch( event.keyCode ) {
        case keyCode.PAGE_UP:
          suppressKeyPress = true;
          this._move( "previousPage", event );
          break;
        case keyCode.PAGE_DOWN:
          suppressKeyPress = true;
          this._move( "nextPage", event );
          break;
        case keyCode.UP:
          suppressKeyPress = true;
          this._keyEvent( "previous", event );
          break;
        case keyCode.DOWN:
          suppressKeyPress = true;
          this._keyEvent( "next", event );
          break;
        case keyCode.ENTER:
        case keyCode.NUMPAD_ENTER:
          // when menu is open and has focus
          if ( this.menu.active ) {
            // #6055 - Opera still allows the keypress to occur
            // which causes forms to submit
            suppressKeyPress = true;
            event.preventDefault();
            this.menu.select( event );
          }
          break;
        case keyCode.TAB:
          if ( this.menu.active ) {
            this.menu.select( event );
          }
          break;
        case keyCode.ESCAPE:
          if ( this.menu.element.is( ":visible" ) ) {
            this._value( this.term );
            this.close( event );
            // Different browsers have different default behavior for escape
            // Single press can mean undo or clear
            // Double press in IE means clear the whole form
            event.preventDefault();
          }
          break;
        default:
          suppressKeyPressRepeat = true;
          // search timeout should be triggered before the input value is changed
          this._searchTimeout( event );
          break;
        }
      },
      keypress: function( event ) {
        if ( suppressKeyPress ) {
          suppressKeyPress = false;
          if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
            event.preventDefault();
          }
          return;
        }
        if ( suppressKeyPressRepeat ) {
          return;
        }

        // replicate some key handlers to allow them to repeat in Firefox and Opera
        var keyCode = $.ui.keyCode;
        switch( event.keyCode ) {
        case keyCode.PAGE_UP:
          this._move( "previousPage", event );
          break;
        case keyCode.PAGE_DOWN:
          this._move( "nextPage", event );
          break;
        case keyCode.UP:
          this._keyEvent( "previous", event );
          break;
        case keyCode.DOWN:
          this._keyEvent( "next", event );
          break;
        }
      },
      input: function( event ) {
        if ( suppressInput ) {
          suppressInput = false;
          event.preventDefault();
          return;
        }
        this._searchTimeout( event );
      },
      focus: function() {
        this.selectedItem = null;
        this.previous = this._value();
      },
      blur: function( event ) {
        if ( this.cancelBlur ) {
          delete this.cancelBlur;
          return;
        }

        clearTimeout( this.searching );
        this.close( event );
        this._change( event );
      }
    });

    this._initSource();
    this.menu = $( "<ul>" )
      .addClass( "ui-autocomplete ui-front" )
      .appendTo( this._appendTo() )
      .menu({
        // disable ARIA support, the live region takes care of that
        role: null
      })
      .hide()
      .data( "ui-menu" );

    this._on( this.menu.element, {
      mousedown: function( event ) {
        // prevent moving focus out of the text field
        event.preventDefault();

        // IE doesn't prevent moving focus even with event.preventDefault()
        // so we set a flag to know when we should ignore the blur event
        this.cancelBlur = true;
        this._delay(function() {
          delete this.cancelBlur;
        });

        // clicking on the scrollbar causes focus to shift to the body
        // but we can't detect a mouseup or a click immediately afterward
        // so we have to track the next mousedown and close the menu if
        // the user clicks somewhere outside of the autocomplete
        var menuElement = this.menu.element[ 0 ];
        if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
          this._delay(function() {
            var that = this;
            this.document.one( "mousedown", function( event ) {
              if ( event.target !== that.element[ 0 ] &&
                  event.target !== menuElement &&
                  !$.contains( menuElement, event.target ) ) {
                that.close();
              }
            });
          });
        }
      },
      menufocus: function( event, ui ) {
        // support: Firefox
        // Prevent accidental activation of menu items in Firefox (#7024 #9118)
        if ( this.isNewMenu ) {
          this.isNewMenu = false;
          if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
            this.menu.blur();

            this.document.one( "mousemove", function() {
              $( event.target ).trigger( event.originalEvent );
            });

            return;
          }
        }

        var item = ui.item.data( "ui-autocomplete-item" );
        if ( false !== this._trigger( "focus", event, { item: item } ) ) {
          // use value to match what will end up in the input, if it was a key event
          if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
            this._value( item.value );
          }
        } else {
          // Normally the input is populated with the item's value as the
          // menu is navigated, causing screen readers to notice a change and
          // announce the item. Since the focus event was canceled, this doesn't
          // happen, so we update the live region so that screen readers can
          // still notice the change and announce it.
          this.liveRegion.text( item.value );
        }
      },
      menuselect: function( event, ui ) {
        var item = ui.item.data( "ui-autocomplete-item" ),
          previous = this.previous;

        // only trigger when focus was lost (click on menu)
        if ( this.element[0] !== this.document[0].activeElement ) {
          this.element.focus();
          this.previous = previous;
          // #6109 - IE triggers two focus events and the second
          // is asynchronous, so we need to reset the previous
          // term synchronously and asynchronously :-(
          this._delay(function() {
            this.previous = previous;
            this.selectedItem = item;
          });
        }

        if ( false !== this._trigger( "select", event, { item: item } ) ) {
          this._value( item.value );
        }
        // reset the term after the select event
        // this allows custom select handling to work properly
        this.term = this._value();

        this.close( event );
        this.selectedItem = item;
      }
    });

    this.liveRegion = $( "<span>", {
        role: "status",
        "aria-live": "polite"
      })
      .addClass( "ui-helper-hidden-accessible" )
      .insertBefore( this.element );

    // turning off autocomplete prevents the browser from remembering the
    // value when navigating through history, so we re-enable autocomplete
    // if the page is unloaded before the widget is destroyed. #7790
    this._on( this.window, {
      beforeunload: function() {
        this.element.removeAttr( "autocomplete" );
      }
    });
  },

  _destroy: function() {
    clearTimeout( this.searching );
    this.element
      .removeClass( "ui-autocomplete-input" )
      .removeAttr( "autocomplete" );
    this.menu.element.remove();
    this.liveRegion.remove();
  },

  _setOption: function( key, value ) {
    this._super( key, value );
    if ( key === "source" ) {
      this._initSource();
    }
    if ( key === "appendTo" ) {
      this.menu.element.appendTo( this._appendTo() );
    }
    if ( key === "disabled" && value && this.xhr ) {
      this.xhr.abort();
    }
  },

  _appendTo: function() {
    var element = this.options.appendTo;

    if ( element ) {
      element = element.jquery || element.nodeType ?
        $( element ) :
        this.document.find( element ).eq( 0 );
    }

    if ( !element ) {
      element = this.element.closest( ".ui-front" );
    }

    if ( !element.length ) {
      element = this.document[0].body;
    }

    return element;
  },

  _initSource: function() {
    var array, url,
      that = this;
    if ( $.isArray(this.options.source) ) {
      array = this.options.source;
      this.source = function( request, response ) {
        response( $.ui.autocomplete.filter( array, request.term ) );
      };
    } else if ( typeof this.options.source === "string" ) {
      url = this.options.source;
      this.source = function( request, response ) {
        if ( that.xhr ) {
          that.xhr.abort();
        }
        that.xhr = $.ajax({
          url: url,
          data: request,
          dataType: "json",
          success: function( data ) {
            response( data );
          },
          error: function() {
            response( [] );
          }
        });
      };
    } else {
      this.source = this.options.source;
    }
  },

  _searchTimeout: function( event ) {
    clearTimeout( this.searching );
    this.searching = this._delay(function() {
      // only search if the value has changed
      if ( this.term !== this._value() ) {
        this.selectedItem = null;
        this.search( null, event );
      }
    }, this.options.delay );
  },

  search: function( value, event ) {
    value = value != null ? value : this._value();

    // always save the actual value, not the one passed as an argument
    this.term = this._value();

    if ( value.length < this.options.minLength ) {
      return this.close( event );
    }

    if ( this._trigger( "search", event ) === false ) {
      return;
    }

    return this._search( value );
  },

  _search: function( value ) {
    this.pending++;
    this.element.addClass( "ui-autocomplete-loading" );
    this.cancelSearch = false;

    this.source( { term: value }, this._response() );
  },

  _response: function() {
    var index = ++this.requestIndex;

    return $.proxy(function( content ) {
      if ( index === this.requestIndex ) {
        this.__response( content );
      }

      this.pending--;
      if ( !this.pending ) {
        this.element.removeClass( "ui-autocomplete-loading" );
      }
    }, this );
  },

  __response: function( content ) {
    if ( content ) {
      content = this._normalize( content );
    }
    this._trigger( "response", null, { content: content } );
    if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
      this._suggest( content );
      this._trigger( "open" );
    } else {
      // use ._close() instead of .close() so we don't cancel future searches
      this._close();
    }
  },

  close: function( event ) {
    this.cancelSearch = true;
    this._close( event );
  },

  _close: function( event ) {
    if ( this.menu.element.is( ":visible" ) ) {
      this.menu.element.hide();
      this.menu.blur();
      this.isNewMenu = true;
      this._trigger( "close", event );
    }
  },

  _change: function( event ) {
    if ( this.previous !== this._value() ) {
      this._trigger( "change", event, { item: this.selectedItem } );
    }
  },

  _normalize: function( items ) {
    // assume all items have the right format when the first item is complete
    if ( items.length && items[0].label && items[0].value ) {
      return items;
    }
    return $.map( items, function( item ) {
      if ( typeof item === "string" ) {
        return {
          label: item,
          value: item
        };
      }
      return $.extend({
        label: item.label || item.value,
        value: item.value || item.label
      }, item );
    });
  },

  _suggest: function( items ) {
    var ul = this.menu.element.empty();
    this._renderMenu( ul, items );
    this.isNewMenu = true;
    this.menu.refresh();

    // size and position menu
    ul.show();
    this._resizeMenu();
    ul.position( $.extend({
      of: this.element
    }, this.options.position ));

    if ( this.options.autoFocus ) {
      this.menu.next();
    }
  },

  _resizeMenu: function() {
    var ul = this.menu.element;
    ul.outerWidth( Math.max(
      // Firefox wraps long text (possibly a rounding bug)
      // so we add 1px to avoid the wrapping (#7513)
      ul.width( "" ).outerWidth() + 1,
      this.element.outerWidth()
    ) );
  },

  _renderMenu: function( ul, items ) {
    var that = this;
    $.each( items, function( index, item ) {
      that._renderItemData( ul, item );
    });
  },

  _renderItemData: function( ul, item ) {
    return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
  },

  _renderItem: function( ul, item ) {
    return $( "<li>" )
      .append( $( "<a>" ).text( item.label ) )
      .appendTo( ul );
  },

  _move: function( direction, event ) {
    if ( !this.menu.element.is( ":visible" ) ) {
      this.search( null, event );
      return;
    }
    if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
        this.menu.isLastItem() && /^next/.test( direction ) ) {
      this._value( this.term );
      this.menu.blur();
      return;
    }
    this.menu[ direction ]( event );
  },

  widget: function() {
    return this.menu.element;
  },

  _value: function() {
    return this.valueMethod.apply( this.element, arguments );
  },

  _keyEvent: function( keyEvent, event ) {
    if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
      this._move( keyEvent, event );

      // prevents moving cursor to beginning/end of the text field in some browsers
      event.preventDefault();
    }
  }
});

$.extend( $.ui.autocomplete, {
  escapeRegex: function( value ) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  },
  filter: function(array, term) {
    var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
    return $.grep( array, function(value) {
      return matcher.test( value.label || value.value || value );
    });
  }
});


// live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
  options: {
    messages: {
      noResults: "No search results.",
      results: function( amount ) {
        return amount + ( amount > 1 ? " results are" : " result is" ) +
          " available, use up and down arrow keys to navigate.";
      }
    }
  },

  __response: function( content ) {
    var message;
    this._superApply( arguments );
    if ( this.options.disabled || this.cancelSearch ) {
      return;
    }
    if ( content && content.length ) {
      message = this.options.messages.results( content.length );
    } else {
      message = this.options.messages.noResults;
    }
    this.liveRegion.text( message );
  }
});

}( jQuery ));
(function( $, undefined ) {

var lastActive,
  baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
  typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
  formResetHandler = function() {
    var form = $( this );
    setTimeout(function() {
      form.find( ":ui-button" ).button( "refresh" );
    }, 1 );
  },
  radioGroup = function( radio ) {
    var name = radio.name,
      form = radio.form,
      radios = $( [] );
    if ( name ) {
      name = name.replace( /'/g, "\\'" );
      if ( form ) {
        radios = $( form ).find( "[name='" + name + "']" );
      } else {
        radios = $( "[name='" + name + "']", radio.ownerDocument )
          .filter(function() {
            return !this.form;
          });
      }
    }
    return radios;
  };

$.widget( "ui.button", {
  version: "1.10.4",
  defaultElement: "<button>",
  options: {
    disabled: null,
    text: true,
    label: null,
    icons: {
      primary: null,
      secondary: null
    }
  },
  _create: function() {
    this.element.closest( "form" )
      .unbind( "reset" + this.eventNamespace )
      .bind( "reset" + this.eventNamespace, formResetHandler );

    if ( typeof this.options.disabled !== "boolean" ) {
      this.options.disabled = !!this.element.prop( "disabled" );
    } else {
      this.element.prop( "disabled", this.options.disabled );
    }

    this._determineButtonType();
    this.hasTitle = !!this.buttonElement.attr( "title" );

    var that = this,
      options = this.options,
      toggleButton = this.type === "checkbox" || this.type === "radio",
      activeClass = !toggleButton ? "ui-state-active" : "";

    if ( options.label === null ) {
      options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
    }

    this._hoverable( this.buttonElement );

    this.buttonElement
      .addClass( baseClasses )
      .attr( "role", "button" )
      .bind( "mouseenter" + this.eventNamespace, function() {
        if ( options.disabled ) {
          return;
        }
        if ( this === lastActive ) {
          $( this ).addClass( "ui-state-active" );
        }
      })
      .bind( "mouseleave" + this.eventNamespace, function() {
        if ( options.disabled ) {
          return;
        }
        $( this ).removeClass( activeClass );
      })
      .bind( "click" + this.eventNamespace, function( event ) {
        if ( options.disabled ) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }
      });

    // Can't use _focusable() because the element that receives focus
    // and the element that gets the ui-state-focus class are different
    this._on({
      focus: function() {
        this.buttonElement.addClass( "ui-state-focus" );
      },
      blur: function() {
        this.buttonElement.removeClass( "ui-state-focus" );
      }
    });

    if ( toggleButton ) {
      this.element.bind( "change" + this.eventNamespace, function() {
        that.refresh();
      });
    }

    if ( this.type === "checkbox" ) {
      this.buttonElement.bind( "click" + this.eventNamespace, function() {
        if ( options.disabled ) {
          return false;
        }
      });
    } else if ( this.type === "radio" ) {
      this.buttonElement.bind( "click" + this.eventNamespace, function() {
        if ( options.disabled ) {
          return false;
        }
        $( this ).addClass( "ui-state-active" );
        that.buttonElement.attr( "aria-pressed", "true" );

        var radio = that.element[ 0 ];
        radioGroup( radio )
          .not( radio )
          .map(function() {
            return $( this ).button( "widget" )[ 0 ];
          })
          .removeClass( "ui-state-active" )
          .attr( "aria-pressed", "false" );
      });
    } else {
      this.buttonElement
        .bind( "mousedown" + this.eventNamespace, function() {
          if ( options.disabled ) {
            return false;
          }
          $( this ).addClass( "ui-state-active" );
          lastActive = this;
          that.document.one( "mouseup", function() {
            lastActive = null;
          });
        })
        .bind( "mouseup" + this.eventNamespace, function() {
          if ( options.disabled ) {
            return false;
          }
          $( this ).removeClass( "ui-state-active" );
        })
        .bind( "keydown" + this.eventNamespace, function(event) {
          if ( options.disabled ) {
            return false;
          }
          if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
            $( this ).addClass( "ui-state-active" );
          }
        })
        // see #8559, we bind to blur here in case the button element loses
        // focus between keydown and keyup, it would be left in an "active" state
        .bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
          $( this ).removeClass( "ui-state-active" );
        });

      if ( this.buttonElement.is("a") ) {
        this.buttonElement.keyup(function(event) {
          if ( event.keyCode === $.ui.keyCode.SPACE ) {
            // TODO pass through original event correctly (just as 2nd argument doesn't work)
            $( this ).click();
          }
        });
      }
    }

    // TODO: pull out $.Widget's handling for the disabled option into
    // $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
    // be overridden by individual plugins
    this._setOption( "disabled", options.disabled );
    this._resetButton();
  },

  _determineButtonType: function() {
    var ancestor, labelSelector, checked;

    if ( this.element.is("[type=checkbox]") ) {
      this.type = "checkbox";
    } else if ( this.element.is("[type=radio]") ) {
      this.type = "radio";
    } else if ( this.element.is("input") ) {
      this.type = "input";
    } else {
      this.type = "button";
    }

    if ( this.type === "checkbox" || this.type === "radio" ) {
      // we don't search against the document in case the element
      // is disconnected from the DOM
      ancestor = this.element.parents().last();
      labelSelector = "label[for='" + this.element.attr("id") + "']";
      this.buttonElement = ancestor.find( labelSelector );
      if ( !this.buttonElement.length ) {
        ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
        this.buttonElement = ancestor.filter( labelSelector );
        if ( !this.buttonElement.length ) {
          this.buttonElement = ancestor.find( labelSelector );
        }
      }
      this.element.addClass( "ui-helper-hidden-accessible" );

      checked = this.element.is( ":checked" );
      if ( checked ) {
        this.buttonElement.addClass( "ui-state-active" );
      }
      this.buttonElement.prop( "aria-pressed", checked );
    } else {
      this.buttonElement = this.element;
    }
  },

  widget: function() {
    return this.buttonElement;
  },

  _destroy: function() {
    this.element
      .removeClass( "ui-helper-hidden-accessible" );
    this.buttonElement
      .removeClass( baseClasses + " ui-state-active " + typeClasses )
      .removeAttr( "role" )
      .removeAttr( "aria-pressed" )
      .html( this.buttonElement.find(".ui-button-text").html() );

    if ( !this.hasTitle ) {
      this.buttonElement.removeAttr( "title" );
    }
  },

  _setOption: function( key, value ) {
    this._super( key, value );
    if ( key === "disabled" ) {
      this.element.prop( "disabled", !!value );
      if ( value ) {
        this.buttonElement.removeClass( "ui-state-focus" );
      }
      return;
    }
    this._resetButton();
  },

  refresh: function() {
    //See #8237 & #8828
    var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

    if ( isDisabled !== this.options.disabled ) {
      this._setOption( "disabled", isDisabled );
    }
    if ( this.type === "radio" ) {
      radioGroup( this.element[0] ).each(function() {
        if ( $( this ).is( ":checked" ) ) {
          $( this ).button( "widget" )
            .addClass( "ui-state-active" )
            .attr( "aria-pressed", "true" );
        } else {
          $( this ).button( "widget" )
            .removeClass( "ui-state-active" )
            .attr( "aria-pressed", "false" );
        }
      });
    } else if ( this.type === "checkbox" ) {
      if ( this.element.is( ":checked" ) ) {
        this.buttonElement
          .addClass( "ui-state-active" )
          .attr( "aria-pressed", "true" );
      } else {
        this.buttonElement
          .removeClass( "ui-state-active" )
          .attr( "aria-pressed", "false" );
      }
    }
  },

  _resetButton: function() {
    if ( this.type === "input" ) {
      if ( this.options.label ) {
        this.element.val( this.options.label );
      }
      return;
    }
    var buttonElement = this.buttonElement.removeClass( typeClasses ),
      buttonText = $( "<span></span>", this.document[0] )
        .addClass( "ui-button-text" )
        .html( this.options.label )
        .appendTo( buttonElement.empty() )
        .text(),
      icons = this.options.icons,
      multipleIcons = icons.primary && icons.secondary,
      buttonClasses = [];

    if ( icons.primary || icons.secondary ) {
      if ( this.options.text ) {
        buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
      }

      if ( icons.primary ) {
        buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
      }

      if ( icons.secondary ) {
        buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
      }

      if ( !this.options.text ) {
        buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

        if ( !this.hasTitle ) {
          buttonElement.attr( "title", $.trim( buttonText ) );
        }
      }
    } else {
      buttonClasses.push( "ui-button-text-only" );
    }
    buttonElement.addClass( buttonClasses.join( " " ) );
  }
});

$.widget( "ui.buttonset", {
  version: "1.10.4",
  options: {
    items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
  },

  _create: function() {
    this.element.addClass( "ui-buttonset" );
  },

  _init: function() {
    this.refresh();
  },

  _setOption: function( key, value ) {
    if ( key === "disabled" ) {
      this.buttons.button( "option", key, value );
    }

    this._super( key, value );
  },

  refresh: function() {
    var rtl = this.element.css( "direction" ) === "rtl";

    this.buttons = this.element.find( this.options.items )
      .filter( ":ui-button" )
        .button( "refresh" )
      .end()
      .not( ":ui-button" )
        .button()
      .end()
      .map(function() {
        return $( this ).button( "widget" )[ 0 ];
      })
        .removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
        .filter( ":first" )
          .addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
        .end()
        .filter( ":last" )
          .addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
        .end()
      .end();
  },

  _destroy: function() {
    this.element.removeClass( "ui-buttonset" );
    this.buttons
      .map(function() {
        return $( this ).button( "widget" )[ 0 ];
      })
        .removeClass( "ui-corner-left ui-corner-right" )
      .end()
      .button( "destroy" );
  }
});

}( jQuery ) );
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.10.4" } });

var PROP_NAME = "datepicker",
  instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
  this._curInst = null; // The current instance in use
  this._keyEvent = false; // If the last event was a key event
  this._disabledInputs = []; // List of date picker inputs that have been disabled
  this._datepickerShowing = false; // True if the popup picker is showing , false if not
  this._inDialog = false; // True if showing within a "dialog", false if not
  this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
  this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
  this._appendClass = "ui-datepicker-append"; // The name of the append marker class
  this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
  this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
  this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
  this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
  this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
  this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
  this.regional = []; // Available regional settings, indexed by language code
  this.regional[""] = { // Default regional settings
    closeText: "Done", // Display text for close link
    prevText: "Prev", // Display text for previous month link
    nextText: "Next", // Display text for next month link
    currentText: "Today", // Display text for current month link
    monthNames: ["January","February","March","April","May","June",
      "July","August","September","October","November","December"], // Names of months for drop-down and formatting
    monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
    dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
    dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
    weekHeader: "Wk", // Column header for week of the year
    dateFormat: "mm/dd/yy", // See format options on parseDate
    firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
    isRTL: false, // True if right-to-left language, false if left-to-right
    showMonthAfterYear: false, // True if the year select precedes month, false for month then year
    yearSuffix: "" // Additional text to append to the year in the month headers
  };
  this._defaults = { // Global defaults for all the date picker instances
    showOn: "focus", // "focus" for popup on focus,
      // "button" for trigger button, or "both" for either
    showAnim: "fadeIn", // Name of jQuery animation for popup
    showOptions: {}, // Options for enhanced animations
    defaultDate: null, // Used when field is blank: actual date,
      // +/-number for offset from today, null for today
    appendText: "", // Display text following the input box, e.g. showing the format
    buttonText: "...", // Text for trigger button
    buttonImage: "", // URL for trigger button image
    buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
    hideIfNoPrevNext: false, // True to hide next/previous month links
      // if not applicable, false to just disable them
    navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
    gotoCurrent: false, // True if today link goes back to current selection instead
    changeMonth: false, // True if month can be selected directly, false if only prev/next
    changeYear: false, // True if year can be selected directly, false if only prev/next
    yearRange: "c-10:c+10", // Range of years to display in drop-down,
      // either relative to today's year (-nn:+nn), relative to currently displayed year
      // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
    showOtherMonths: false, // True to show dates in other months, false to leave blank
    selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
    showWeek: false, // True to show week of the year, false to not show it
    calculateWeek: this.iso8601Week, // How to calculate the week of the year,
      // takes a Date and returns the number of the week for it
    shortYearCutoff: "+10", // Short year values < this are in the current century,
      // > this are in the previous century,
      // string value starting with "+" for current year + value
    minDate: null, // The earliest selectable date, or null for no limit
    maxDate: null, // The latest selectable date, or null for no limit
    duration: "fast", // Duration of display/closure
    beforeShowDay: null, // Function that takes a date and returns an array with
      // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
      // [2] = cell title (optional), e.g. $.datepicker.noWeekends
    beforeShow: null, // Function that takes an input field and
      // returns a set of custom settings for the date picker
    onSelect: null, // Define a callback function when a date is selected
    onChangeMonthYear: null, // Define a callback function when the month or year is changed
    onClose: null, // Define a callback function when the datepicker is closed
    numberOfMonths: 1, // Number of months to show at a time
    showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
    stepMonths: 1, // Number of months to step back/forward
    stepBigMonths: 12, // Number of months to step back/forward for the big links
    altField: "", // Selector for an alternate field to store selected dates into
    altFormat: "", // The date format to use for the alternate field
    constrainInput: true, // The input is constrained by the current date format
    showButtonPanel: false, // True to show button panel, false to not show it
    autoSize: false, // True to size the input for the date format, false to leave as is
    disabled: false // The initial disabled state
  };
  $.extend(this._defaults, this.regional[""]);
  this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

$.extend(Datepicker.prototype, {
  /* Class name added to elements to indicate already configured with a date picker. */
  markerClassName: "hasDatepicker",

  //Keep track of the maximum number of rows displayed (see #7043)
  maxRows: 4,

  // TODO rename to "widget" when switching to widget factory
  _widgetDatepicker: function() {
    return this.dpDiv;
  },

  /* Override the default settings for all instances of the date picker.
   * @param  settings  object - the new settings to use as defaults (anonymous object)
   * @return the manager object
   */
  setDefaults: function(settings) {
    extendRemove(this._defaults, settings || {});
    return this;
  },

  /* Attach the date picker to a jQuery selection.
   * @param  target element - the target input field or division or span
   * @param  settings  object - the new settings to use for this date picker instance (anonymous)
   */
  _attachDatepicker: function(target, settings) {
    var nodeName, inline, inst;
    nodeName = target.nodeName.toLowerCase();
    inline = (nodeName === "div" || nodeName === "span");
    if (!target.id) {
      this.uuid += 1;
      target.id = "dp" + this.uuid;
    }
    inst = this._newInst($(target), inline);
    inst.settings = $.extend({}, settings || {});
    if (nodeName === "input") {
      this._connectDatepicker(target, inst);
    } else if (inline) {
      this._inlineDatepicker(target, inst);
    }
  },

  /* Create a new instance object. */
  _newInst: function(target, inline) {
    var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
    return {id: id, input: target, // associated target
      selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
      drawMonth: 0, drawYear: 0, // month being drawn
      inline: inline, // is datepicker inline or not
      dpDiv: (!inline ? this.dpDiv : // presentation div
      bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
  },

  /* Attach the date picker to an input field. */
  _connectDatepicker: function(target, inst) {
    var input = $(target);
    inst.append = $([]);
    inst.trigger = $([]);
    if (input.hasClass(this.markerClassName)) {
      return;
    }
    this._attachments(input, inst);
    input.addClass(this.markerClassName).keydown(this._doKeyDown).
      keypress(this._doKeyPress).keyup(this._doKeyUp);
    this._autoSize(inst);
    $.data(target, PROP_NAME, inst);
    //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
    if( inst.settings.disabled ) {
      this._disableDatepicker( target );
    }
  },

  /* Make attachments based on settings. */
  _attachments: function(input, inst) {
    var showOn, buttonText, buttonImage,
      appendText = this._get(inst, "appendText"),
      isRTL = this._get(inst, "isRTL");

    if (inst.append) {
      inst.append.remove();
    }
    if (appendText) {
      inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
      input[isRTL ? "before" : "after"](inst.append);
    }

    input.unbind("focus", this._showDatepicker);

    if (inst.trigger) {
      inst.trigger.remove();
    }

    showOn = this._get(inst, "showOn");
    if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
      input.focus(this._showDatepicker);
    }
    if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
      buttonText = this._get(inst, "buttonText");
      buttonImage = this._get(inst, "buttonImage");
      inst.trigger = $(this._get(inst, "buttonImageOnly") ?
        $("<img/>").addClass(this._triggerClass).
          attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
        $("<button type='button'></button>").addClass(this._triggerClass).
          html(!buttonImage ? buttonText : $("<img/>").attr(
          { src:buttonImage, alt:buttonText, title:buttonText })));
      input[isRTL ? "before" : "after"](inst.trigger);
      inst.trigger.click(function() {
        if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
          $.datepicker._hideDatepicker();
        } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
          $.datepicker._hideDatepicker();
          $.datepicker._showDatepicker(input[0]);
        } else {
          $.datepicker._showDatepicker(input[0]);
        }
        return false;
      });
    }
  },

  /* Apply the maximum length for the date format. */
  _autoSize: function(inst) {
    if (this._get(inst, "autoSize") && !inst.inline) {
      var findMax, max, maxI, i,
        date = new Date(2009, 12 - 1, 20), // Ensure double digits
        dateFormat = this._get(inst, "dateFormat");

      if (dateFormat.match(/[DM]/)) {
        findMax = function(names) {
          max = 0;
          maxI = 0;
          for (i = 0; i < names.length; i++) {
            if (names[i].length > max) {
              max = names[i].length;
              maxI = i;
            }
          }
          return maxI;
        };
        date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
          "monthNames" : "monthNamesShort"))));
        date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
          "dayNames" : "dayNamesShort"))) + 20 - date.getDay());
      }
      inst.input.attr("size", this._formatDate(inst, date).length);
    }
  },

  /* Attach an inline date picker to a div. */
  _inlineDatepicker: function(target, inst) {
    var divSpan = $(target);
    if (divSpan.hasClass(this.markerClassName)) {
      return;
    }
    divSpan.addClass(this.markerClassName).append(inst.dpDiv);
    $.data(target, PROP_NAME, inst);
    this._setDate(inst, this._getDefaultDate(inst), true);
    this._updateDatepicker(inst);
    this._updateAlternate(inst);
    //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
    if( inst.settings.disabled ) {
      this._disableDatepicker( target );
    }
    // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
    // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
    inst.dpDiv.css( "display", "block" );
  },

  /* Pop-up the date picker in a "dialog" box.
   * @param  input element - ignored
   * @param  date string or Date - the initial date to display
   * @param  onSelect  function - the function to call when a date is selected
   * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
   * @param  pos int[2] - coordinates for the dialog's position within the screen or
   *          event - with x/y coordinates or
   *          leave empty for default (screen centre)
   * @return the manager object
   */
  _dialogDatepicker: function(input, date, onSelect, settings, pos) {
    var id, browserWidth, browserHeight, scrollX, scrollY,
      inst = this._dialogInst; // internal instance

    if (!inst) {
      this.uuid += 1;
      id = "dp" + this.uuid;
      this._dialogInput = $("<input type='text' id='" + id +
        "' style='position: absolute; top: -100px; width: 0px;'/>");
      this._dialogInput.keydown(this._doKeyDown);
      $("body").append(this._dialogInput);
      inst = this._dialogInst = this._newInst(this._dialogInput, false);
      inst.settings = {};
      $.data(this._dialogInput[0], PROP_NAME, inst);
    }
    extendRemove(inst.settings, settings || {});
    date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
    this._dialogInput.val(date);

    this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
    if (!this._pos) {
      browserWidth = document.documentElement.clientWidth;
      browserHeight = document.documentElement.clientHeight;
      scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
      scrollY = document.documentElement.scrollTop || document.body.scrollTop;
      this._pos = // should use actual width/height below
        [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
    }

    // move input on screen for focus, but hidden behind dialog
    this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
    inst.settings.onSelect = onSelect;
    this._inDialog = true;
    this.dpDiv.addClass(this._dialogClass);
    this._showDatepicker(this._dialogInput[0]);
    if ($.blockUI) {
      $.blockUI(this.dpDiv);
    }
    $.data(this._dialogInput[0], PROP_NAME, inst);
    return this;
  },

  /* Detach a datepicker from its control.
   * @param  target element - the target input field or division or span
   */
  _destroyDatepicker: function(target) {
    var nodeName,
      $target = $(target),
      inst = $.data(target, PROP_NAME);

    if (!$target.hasClass(this.markerClassName)) {
      return;
    }

    nodeName = target.nodeName.toLowerCase();
    $.removeData(target, PROP_NAME);
    if (nodeName === "input") {
      inst.append.remove();
      inst.trigger.remove();
      $target.removeClass(this.markerClassName).
        unbind("focus", this._showDatepicker).
        unbind("keydown", this._doKeyDown).
        unbind("keypress", this._doKeyPress).
        unbind("keyup", this._doKeyUp);
    } else if (nodeName === "div" || nodeName === "span") {
      $target.removeClass(this.markerClassName).empty();
    }
  },

  /* Enable the date picker to a jQuery selection.
   * @param  target element - the target input field or division or span
   */
  _enableDatepicker: function(target) {
    var nodeName, inline,
      $target = $(target),
      inst = $.data(target, PROP_NAME);

    if (!$target.hasClass(this.markerClassName)) {
      return;
    }

    nodeName = target.nodeName.toLowerCase();
    if (nodeName === "input") {
      target.disabled = false;
      inst.trigger.filter("button").
        each(function() { this.disabled = false; }).end().
        filter("img").css({opacity: "1.0", cursor: ""});
    } else if (nodeName === "div" || nodeName === "span") {
      inline = $target.children("." + this._inlineClass);
      inline.children().removeClass("ui-state-disabled");
      inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
        prop("disabled", false);
    }
    this._disabledInputs = $.map(this._disabledInputs,
      function(value) { return (value === target ? null : value); }); // delete entry
  },

  /* Disable the date picker to a jQuery selection.
   * @param  target element - the target input field or division or span
   */
  _disableDatepicker: function(target) {
    var nodeName, inline,
      $target = $(target),
      inst = $.data(target, PROP_NAME);

    if (!$target.hasClass(this.markerClassName)) {
      return;
    }

    nodeName = target.nodeName.toLowerCase();
    if (nodeName === "input") {
      target.disabled = true;
      inst.trigger.filter("button").
        each(function() { this.disabled = true; }).end().
        filter("img").css({opacity: "0.5", cursor: "default"});
    } else if (nodeName === "div" || nodeName === "span") {
      inline = $target.children("." + this._inlineClass);
      inline.children().addClass("ui-state-disabled");
      inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
        prop("disabled", true);
    }
    this._disabledInputs = $.map(this._disabledInputs,
      function(value) { return (value === target ? null : value); }); // delete entry
    this._disabledInputs[this._disabledInputs.length] = target;
  },

  /* Is the first field in a jQuery collection disabled as a datepicker?
   * @param  target element - the target input field or division or span
   * @return boolean - true if disabled, false if enabled
   */
  _isDisabledDatepicker: function(target) {
    if (!target) {
      return false;
    }
    for (var i = 0; i < this._disabledInputs.length; i++) {
      if (this._disabledInputs[i] === target) {
        return true;
      }
    }
    return false;
  },

  /* Retrieve the instance data for the target control.
   * @param  target  element - the target input field or division or span
   * @return  object - the associated instance data
   * @throws  error if a jQuery problem getting data
   */
  _getInst: function(target) {
    try {
      return $.data(target, PROP_NAME);
    }
    catch (err) {
      throw "Missing instance data for this datepicker";
    }
  },

  /* Update or retrieve the settings for a date picker attached to an input field or division.
   * @param  target  element - the target input field or division or span
   * @param  name object - the new settings to update or
   *        string - the name of the setting to change or retrieve,
   *        when retrieving also "all" for all instance settings or
   *        "defaults" for all global defaults
   * @param  value   any - the new value for the setting
   *        (omit if above is an object or to retrieve a value)
   */
  _optionDatepicker: function(target, name, value) {
    var settings, date, minDate, maxDate,
      inst = this._getInst(target);

    if (arguments.length === 2 && typeof name === "string") {
      return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
        (inst ? (name === "all" ? $.extend({}, inst.settings) :
        this._get(inst, name)) : null));
    }

    settings = name || {};
    if (typeof name === "string") {
      settings = {};
      settings[name] = value;
    }

    if (inst) {
      if (this._curInst === inst) {
        this._hideDatepicker();
      }

      date = this._getDateDatepicker(target, true);
      minDate = this._getMinMaxDate(inst, "min");
      maxDate = this._getMinMaxDate(inst, "max");
      extendRemove(inst.settings, settings);
      // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
      if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
        inst.settings.minDate = this._formatDate(inst, minDate);
      }
      if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
        inst.settings.maxDate = this._formatDate(inst, maxDate);
      }
      if ( "disabled" in settings ) {
        if ( settings.disabled ) {
          this._disableDatepicker(target);
        } else {
          this._enableDatepicker(target);
        }
      }
      this._attachments($(target), inst);
      this._autoSize(inst);
      this._setDate(inst, date);
      this._updateAlternate(inst);
      this._updateDatepicker(inst);
    }
  },

  // change method deprecated
  _changeDatepicker: function(target, name, value) {
    this._optionDatepicker(target, name, value);
  },

  /* Redraw the date picker attached to an input field or division.
   * @param  target  element - the target input field or division or span
   */
  _refreshDatepicker: function(target) {
    var inst = this._getInst(target);
    if (inst) {
      this._updateDatepicker(inst);
    }
  },

  /* Set the dates for a jQuery selection.
   * @param  target element - the target input field or division or span
   * @param  date Date - the new date
   */
  _setDateDatepicker: function(target, date) {
    var inst = this._getInst(target);
    if (inst) {
      this._setDate(inst, date);
      this._updateDatepicker(inst);
      this._updateAlternate(inst);
    }
  },

  /* Get the date(s) for the first entry in a jQuery selection.
   * @param  target element - the target input field or division or span
   * @param  noDefault boolean - true if no default date is to be used
   * @return Date - the current date
   */
  _getDateDatepicker: function(target, noDefault) {
    var inst = this._getInst(target);
    if (inst && !inst.inline) {
      this._setDateFromField(inst, noDefault);
    }
    return (inst ? this._getDate(inst) : null);
  },

  /* Handle keystrokes. */
  _doKeyDown: function(event) {
    var onSelect, dateStr, sel,
      inst = $.datepicker._getInst(event.target),
      handled = true,
      isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

    inst._keyEvent = true;
    if ($.datepicker._datepickerShowing) {
      switch (event.keyCode) {
        case 9: $.datepicker._hideDatepicker();
            handled = false;
            break; // hide on tab out
        case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
                  $.datepicker._currentClass + ")", inst.dpDiv);
            if (sel[0]) {
              $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
            }

            onSelect = $.datepicker._get(inst, "onSelect");
            if (onSelect) {
              dateStr = $.datepicker._formatDate(inst);

              // trigger custom callback
              onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
            } else {
              $.datepicker._hideDatepicker();
            }

            return false; // don't submit the form
        case 27: $.datepicker._hideDatepicker();
            break; // hide on escape
        case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
              -$.datepicker._get(inst, "stepBigMonths") :
              -$.datepicker._get(inst, "stepMonths")), "M");
            break; // previous month/year on page up/+ ctrl
        case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
              +$.datepicker._get(inst, "stepBigMonths") :
              +$.datepicker._get(inst, "stepMonths")), "M");
            break; // next month/year on page down/+ ctrl
        case 35: if (event.ctrlKey || event.metaKey) {
              $.datepicker._clearDate(event.target);
            }
            handled = event.ctrlKey || event.metaKey;
            break; // clear on ctrl or command +end
        case 36: if (event.ctrlKey || event.metaKey) {
              $.datepicker._gotoToday(event.target);
            }
            handled = event.ctrlKey || event.metaKey;
            break; // current on ctrl or command +home
        case 37: if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
            }
            handled = event.ctrlKey || event.metaKey;
            // -1 day on ctrl or command +left
            if (event.originalEvent.altKey) {
              $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                -$.datepicker._get(inst, "stepBigMonths") :
                -$.datepicker._get(inst, "stepMonths")), "M");
            }
            // next month/year on alt +left on Mac
            break;
        case 38: if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, -7, "D");
            }
            handled = event.ctrlKey || event.metaKey;
            break; // -1 week on ctrl or command +up
        case 39: if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
            }
            handled = event.ctrlKey || event.metaKey;
            // +1 day on ctrl or command +right
            if (event.originalEvent.altKey) {
              $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                +$.datepicker._get(inst, "stepBigMonths") :
                +$.datepicker._get(inst, "stepMonths")), "M");
            }
            // next month/year on alt +right
            break;
        case 40: if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, +7, "D");
            }
            handled = event.ctrlKey || event.metaKey;
            break; // +1 week on ctrl or command +down
        default: handled = false;
      }
    } else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
      $.datepicker._showDatepicker(this);
    } else {
      handled = false;
    }

    if (handled) {
      event.preventDefault();
      event.stopPropagation();
    }
  },

  /* Filter entered characters - based on date format. */
  _doKeyPress: function(event) {
    var chars, chr,
      inst = $.datepicker._getInst(event.target);

    if ($.datepicker._get(inst, "constrainInput")) {
      chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
      chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
      return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
    }
  },

  /* Synchronise manual entry and field/alternate field. */
  _doKeyUp: function(event) {
    var date,
      inst = $.datepicker._getInst(event.target);

    if (inst.input.val() !== inst.lastVal) {
      try {
        date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
          (inst.input ? inst.input.val() : null),
          $.datepicker._getFormatConfig(inst));

        if (date) { // only if valid
          $.datepicker._setDateFromField(inst);
          $.datepicker._updateAlternate(inst);
          $.datepicker._updateDatepicker(inst);
        }
      }
      catch (err) {
      }
    }
    return true;
  },

  /* Pop-up the date picker for a given input field.
   * If false returned from beforeShow event handler do not show.
   * @param  input  element - the input field attached to the date picker or
   *          event - if triggered by focus
   */
  _showDatepicker: function(input) {
    input = input.target || input;
    if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
      input = $("input", input.parentNode)[0];
    }

    if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
      return;
    }

    var inst, beforeShow, beforeShowSettings, isFixed,
      offset, showAnim, duration;

    inst = $.datepicker._getInst(input);
    if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
      $.datepicker._curInst.dpDiv.stop(true, true);
      if ( inst && $.datepicker._datepickerShowing ) {
        $.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
      }
    }

    beforeShow = $.datepicker._get(inst, "beforeShow");
    beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
    if(beforeShowSettings === false){
      return;
    }
    extendRemove(inst.settings, beforeShowSettings);

    inst.lastVal = null;
    $.datepicker._lastInput = input;
    $.datepicker._setDateFromField(inst);

    if ($.datepicker._inDialog) { // hide cursor
      input.value = "";
    }
    if (!$.datepicker._pos) { // position below input
      $.datepicker._pos = $.datepicker._findPos(input);
      $.datepicker._pos[1] += input.offsetHeight; // add the height
    }

    isFixed = false;
    $(input).parents().each(function() {
      isFixed |= $(this).css("position") === "fixed";
      return !isFixed;
    });

    offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
    $.datepicker._pos = null;
    //to avoid flashes on Firefox
    inst.dpDiv.empty();
    // determine sizing offscreen
    inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
    $.datepicker._updateDatepicker(inst);
    // fix width for dynamic number of date pickers
    // and adjust position before showing
    offset = $.datepicker._checkOffset(inst, offset, isFixed);
    inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
      "static" : (isFixed ? "fixed" : "absolute")), display: "none",
      left: offset.left + "px", top: offset.top + "px"});

    if (!inst.inline) {
      showAnim = $.datepicker._get(inst, "showAnim");
      duration = $.datepicker._get(inst, "duration");
      inst.dpDiv.zIndex($(input).zIndex()+1);
      $.datepicker._datepickerShowing = true;

      if ( $.effects && $.effects.effect[ showAnim ] ) {
        inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
      } else {
        inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
      }

      if ( $.datepicker._shouldFocusInput( inst ) ) {
        inst.input.focus();
      }

      $.datepicker._curInst = inst;
    }
  },

  /* Generate the date picker content. */
  _updateDatepicker: function(inst) {
    this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
    instActive = inst; // for delegate hover events
    inst.dpDiv.empty().append(this._generateHTML(inst));
    this._attachHandlers(inst);
    inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

    var origyearshtml,
      numMonths = this._getNumberOfMonths(inst),
      cols = numMonths[1],
      width = 17;

    inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
    if (cols > 1) {
      inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
    }
    inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
      "Class"]("ui-datepicker-multi");
    inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
      "Class"]("ui-datepicker-rtl");

    if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
      inst.input.focus();
    }

    // deffered render of the years select (to avoid flashes on Firefox)
    if( inst.yearshtml ){
      origyearshtml = inst.yearshtml;
      setTimeout(function(){
        //assure that inst.yearshtml didn't change.
        if( origyearshtml === inst.yearshtml && inst.yearshtml ){
          inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
        }
        origyearshtml = inst.yearshtml = null;
      }, 0);
    }
  },

  // #6694 - don't focus the input if it's already focused
  // this breaks the change event in IE
  // Support: IE and jQuery <1.9
  _shouldFocusInput: function( inst ) {
    return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
  },

  /* Check positioning to remain on screen. */
  _checkOffset: function(inst, offset, isFixed) {
    var dpWidth = inst.dpDiv.outerWidth(),
      dpHeight = inst.dpDiv.outerHeight(),
      inputWidth = inst.input ? inst.input.outerWidth() : 0,
      inputHeight = inst.input ? inst.input.outerHeight() : 0,
      viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
      viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

    offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
    offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
    offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

    // now check if datepicker is showing outside window viewport - move to a better place if so.
    offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
      Math.abs(offset.left + dpWidth - viewWidth) : 0);
    offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
      Math.abs(dpHeight + inputHeight) : 0);

    return offset;
  },

  /* Find an object's position on the screen. */
  _findPos: function(obj) {
    var position,
      inst = this._getInst(obj),
      isRTL = this._get(inst, "isRTL");

    while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
      obj = obj[isRTL ? "previousSibling" : "nextSibling"];
    }

    position = $(obj).offset();
    return [position.left, position.top];
  },

  /* Hide the date picker from view.
   * @param  input  element - the input field attached to the date picker
   */
  _hideDatepicker: function(input) {
    var showAnim, duration, postProcess, onClose,
      inst = this._curInst;

    if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
      return;
    }

    if (this._datepickerShowing) {
      showAnim = this._get(inst, "showAnim");
      duration = this._get(inst, "duration");
      postProcess = function() {
        $.datepicker._tidyDialog(inst);
      };

      // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
      if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
        inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
      } else {
        inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
          (showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
      }

      if (!showAnim) {
        postProcess();
      }
      this._datepickerShowing = false;

      onClose = this._get(inst, "onClose");
      if (onClose) {
        onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
      }

      this._lastInput = null;
      if (this._inDialog) {
        this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
        if ($.blockUI) {
          $.unblockUI();
          $("body").append(this.dpDiv);
        }
      }
      this._inDialog = false;
    }
  },

  /* Tidy up after a dialog display. */
  _tidyDialog: function(inst) {
    inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
  },

  /* Close date picker if clicked elsewhere. */
  _checkExternalClick: function(event) {
    if (!$.datepicker._curInst) {
      return;
    }

    var $target = $(event.target),
      inst = $.datepicker._getInst($target[0]);

    if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
        $target.parents("#" + $.datepicker._mainDivId).length === 0 &&
        !$target.hasClass($.datepicker.markerClassName) &&
        !$target.closest("." + $.datepicker._triggerClass).length &&
        $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
      ( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
        $.datepicker._hideDatepicker();
    }
  },

  /* Adjust one of the date sub-fields. */
  _adjustDate: function(id, offset, period) {
    var target = $(id),
      inst = this._getInst(target[0]);

    if (this._isDisabledDatepicker(target[0])) {
      return;
    }
    this._adjustInstDate(inst, offset +
      (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
      period);
    this._updateDatepicker(inst);
  },

  /* Action for current link. */
  _gotoToday: function(id) {
    var date,
      target = $(id),
      inst = this._getInst(target[0]);

    if (this._get(inst, "gotoCurrent") && inst.currentDay) {
      inst.selectedDay = inst.currentDay;
      inst.drawMonth = inst.selectedMonth = inst.currentMonth;
      inst.drawYear = inst.selectedYear = inst.currentYear;
    } else {
      date = new Date();
      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
    }
    this._notifyChange(inst);
    this._adjustDate(target);
  },

  /* Action for selecting a new month/year. */
  _selectMonthYear: function(id, select, period) {
    var target = $(id),
      inst = this._getInst(target[0]);

    inst["selected" + (period === "M" ? "Month" : "Year")] =
    inst["draw" + (period === "M" ? "Month" : "Year")] =
      parseInt(select.options[select.selectedIndex].value,10);

    this._notifyChange(inst);
    this._adjustDate(target);
  },

  /* Action for selecting a day. */
  _selectDay: function(id, month, year, td) {
    var inst,
      target = $(id);

    if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
      return;
    }

    inst = this._getInst(target[0]);
    inst.selectedDay = inst.currentDay = $("a", td).html();
    inst.selectedMonth = inst.currentMonth = month;
    inst.selectedYear = inst.currentYear = year;
    this._selectDate(id, this._formatDate(inst,
      inst.currentDay, inst.currentMonth, inst.currentYear));
  },

  /* Erase the input field and hide the date picker. */
  _clearDate: function(id) {
    var target = $(id);
    this._selectDate(target, "");
  },

  /* Update the input field with the selected date. */
  _selectDate: function(id, dateStr) {
    var onSelect,
      target = $(id),
      inst = this._getInst(target[0]);

    dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
    if (inst.input) {
      inst.input.val(dateStr);
    }
    this._updateAlternate(inst);

    onSelect = this._get(inst, "onSelect");
    if (onSelect) {
      onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
    } else if (inst.input) {
      inst.input.trigger("change"); // fire the change event
    }

    if (inst.inline){
      this._updateDatepicker(inst);
    } else {
      this._hideDatepicker();
      this._lastInput = inst.input[0];
      if (typeof(inst.input[0]) !== "object") {
        inst.input.focus(); // restore focus
      }
      this._lastInput = null;
    }
  },

  /* Update any alternate field to synchronise with the main field. */
  _updateAlternate: function(inst) {
    var altFormat, date, dateStr,
      altField = this._get(inst, "altField");

    if (altField) { // update alternate field too
      altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
      date = this._getDate(inst);
      dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
      $(altField).each(function() { $(this).val(dateStr); });
    }
  },

  /* Set as beforeShowDay function to prevent selection of weekends.
   * @param  date  Date - the date to customise
   * @return [boolean, string] - is this date selectable?, what is its CSS class?
   */
  noWeekends: function(date) {
    var day = date.getDay();
    return [(day > 0 && day < 6), ""];
  },

  /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
   * @param  date  Date - the date to get the week for
   * @return  number - the number of the week within the year that contains this date
   */
  iso8601Week: function(date) {
    var time,
      checkDate = new Date(date.getTime());

    // Find Thursday of this week starting on Monday
    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

    time = checkDate.getTime();
    checkDate.setMonth(0); // Compare with Jan 1
    checkDate.setDate(1);
    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
  },

  /* Parse a string value into a date object.
   * See formatDate below for the possible formats.
   *
   * @param  format string - the expected format of the date
   * @param  value string - the date in the above format
   * @param  settings Object - attributes include:
   *          shortYearCutoff  number - the cutoff year for determining the century (optional)
   *          dayNamesShort string[7] - abbreviated names of the days from Sunday (optional)
   *          dayNames    string[7] - names of the days from Sunday (optional)
   *          monthNamesShort string[12] - abbreviated names of the months (optional)
   *          monthNames    string[12] - names of the months (optional)
   * @return  Date - the extracted date value or null if value is blank
   */
  parseDate: function (format, value, settings) {
    if (format == null || value == null) {
      throw "Invalid arguments";
    }

    value = (typeof value === "object" ? value.toString() : value + "");
    if (value === "") {
      return null;
    }

    var iFormat, dim, extra,
      iValue = 0,
      shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
      shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
        new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
      dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
      dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
      monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
      monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
      year = -1,
      month = -1,
      day = -1,
      doy = -1,
      literal = false,
      date,
      // Check whether a format character is doubled
      lookAhead = function(match) {
        var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
        if (matches) {
          iFormat++;
        }
        return matches;
      },
      // Extract a number from the string value
      getNumber = function(match) {
        var isDoubled = lookAhead(match),
          size = (match === "@" ? 14 : (match === "!" ? 20 :
          (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
          digits = new RegExp("^\\d{1," + size + "}"),
          num = value.substring(iValue).match(digits);
        if (!num) {
          throw "Missing number at position " + iValue;
        }
        iValue += num[0].length;
        return parseInt(num[0], 10);
      },
      // Extract a name from the string value and convert to an index
      getName = function(match, shortNames, longNames) {
        var index = -1,
          names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
            return [ [k, v] ];
          }).sort(function (a, b) {
            return -(a[1].length - b[1].length);
          });

        $.each(names, function (i, pair) {
          var name = pair[1];
          if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
            index = pair[0];
            iValue += name.length;
            return false;
          }
        });
        if (index !== -1) {
          return index + 1;
        } else {
          throw "Unknown name at position " + iValue;
        }
      },
      // Confirm that a literal character matches the string value
      checkLiteral = function() {
        if (value.charAt(iValue) !== format.charAt(iFormat)) {
          throw "Unexpected literal at position " + iValue;
        }
        iValue++;
      };

    for (iFormat = 0; iFormat < format.length; iFormat++) {
      if (literal) {
        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
          literal = false;
        } else {
          checkLiteral();
        }
      } else {
        switch (format.charAt(iFormat)) {
          case "d":
            day = getNumber("d");
            break;
          case "D":
            getName("D", dayNamesShort, dayNames);
            break;
          case "o":
            doy = getNumber("o");
            break;
          case "m":
            month = getNumber("m");
            break;
          case "M":
            month = getName("M", monthNamesShort, monthNames);
            break;
          case "y":
            year = getNumber("y");
            break;
          case "@":
            date = new Date(getNumber("@"));
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;
          case "!":
            date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;
          case "'":
            if (lookAhead("'")){
              checkLiteral();
            } else {
              literal = true;
            }
            break;
          default:
            checkLiteral();
        }
      }
    }

    if (iValue < value.length){
      extra = value.substr(iValue);
      if (!/^\s+/.test(extra)) {
        throw "Extra/unparsed characters found in date: " + extra;
      }
    }

    if (year === -1) {
      year = new Date().getFullYear();
    } else if (year < 100) {
      year += new Date().getFullYear() - new Date().getFullYear() % 100 +
        (year <= shortYearCutoff ? 0 : -100);
    }

    if (doy > -1) {
      month = 1;
      day = doy;
      do {
        dim = this._getDaysInMonth(year, month - 1);
        if (day <= dim) {
          break;
        }
        month++;
        day -= dim;
      } while (true);
    }

    date = this._daylightSavingAdjust(new Date(year, month - 1, day));
    if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
      throw "Invalid date"; // E.g. 31/02/00
    }
    return date;
  },

  /* Standard date formats. */
  ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
  COOKIE: "D, dd M yy",
  ISO_8601: "yy-mm-dd",
  RFC_822: "D, d M y",
  RFC_850: "DD, dd-M-y",
  RFC_1036: "D, d M y",
  RFC_1123: "D, d M yy",
  RFC_2822: "D, d M yy",
  RSS: "D, d M y", // RFC 822
  TICKS: "!",
  TIMESTAMP: "@",
  W3C: "yy-mm-dd", // ISO 8601

  _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
    Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

  /* Format a date object into a string value.
   * The format can be combinations of the following:
   * d  - day of month (no leading zero)
   * dd - day of month (two digit)
   * o  - day of year (no leading zeros)
   * oo - day of year (three digit)
   * D  - day name short
   * DD - day name long
   * m  - month of year (no leading zero)
   * mm - month of year (two digit)
   * M  - month name short
   * MM - month name long
   * y  - year (two digit)
   * yy - year (four digit)
   * @ - Unix timestamp (ms since 01/01/1970)
   * ! - Windows ticks (100ns since 01/01/0001)
   * "..." - literal text
   * '' - single quote
   *
   * @param  format string - the desired format of the date
   * @param  date Date - the date value to format
   * @param  settings Object - attributes include:
   *          dayNamesShort string[7] - abbreviated names of the days from Sunday (optional)
   *          dayNames    string[7] - names of the days from Sunday (optional)
   *          monthNamesShort string[12] - abbreviated names of the months (optional)
   *          monthNames    string[12] - names of the months (optional)
   * @return  string - the date in the above format
   */
  formatDate: function (format, date, settings) {
    if (!date) {
      return "";
    }

    var iFormat,
      dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
      dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
      monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
      monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
      // Check whether a format character is doubled
      lookAhead = function(match) {
        var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
        if (matches) {
          iFormat++;
        }
        return matches;
      },
      // Format a number, with leading zero if necessary
      formatNumber = function(match, value, len) {
        var num = "" + value;
        if (lookAhead(match)) {
          while (num.length < len) {
            num = "0" + num;
          }
        }
        return num;
      },
      // Format a name, short or long as requested
      formatName = function(match, value, shortNames, longNames) {
        return (lookAhead(match) ? longNames[value] : shortNames[value]);
      },
      output = "",
      literal = false;

    if (date) {
      for (iFormat = 0; iFormat < format.length; iFormat++) {
        if (literal) {
          if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
            literal = false;
          } else {
            output += format.charAt(iFormat);
          }
        } else {
          switch (format.charAt(iFormat)) {
            case "d":
              output += formatNumber("d", date.getDate(), 2);
              break;
            case "D":
              output += formatName("D", date.getDay(), dayNamesShort, dayNames);
              break;
            case "o":
              output += formatNumber("o",
                Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
              break;
            case "m":
              output += formatNumber("m", date.getMonth() + 1, 2);
              break;
            case "M":
              output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
              break;
            case "y":
              output += (lookAhead("y") ? date.getFullYear() :
                (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
              break;
            case "@":
              output += date.getTime();
              break;
            case "!":
              output += date.getTime() * 10000 + this._ticksTo1970;
              break;
            case "'":
              if (lookAhead("'")) {
                output += "'";
              } else {
                literal = true;
              }
              break;
            default:
              output += format.charAt(iFormat);
          }
        }
      }
    }
    return output;
  },

  /* Extract all possible characters from the date format. */
  _possibleChars: function (format) {
    var iFormat,
      chars = "",
      literal = false,
      // Check whether a format character is doubled
      lookAhead = function(match) {
        var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
        if (matches) {
          iFormat++;
        }
        return matches;
      };

    for (iFormat = 0; iFormat < format.length; iFormat++) {
      if (literal) {
        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
          literal = false;
        } else {
          chars += format.charAt(iFormat);
        }
      } else {
        switch (format.charAt(iFormat)) {
          case "d": case "m": case "y": case "@":
            chars += "0123456789";
            break;
          case "D": case "M":
            return null; // Accept anything
          case "'":
            if (lookAhead("'")) {
              chars += "'";
            } else {
              literal = true;
            }
            break;
          default:
            chars += format.charAt(iFormat);
        }
      }
    }
    return chars;
  },

  /* Get a setting value, defaulting if necessary. */
  _get: function(inst, name) {
    return inst.settings[name] !== undefined ?
      inst.settings[name] : this._defaults[name];
  },

  /* Parse existing date and initialise date picker. */
  _setDateFromField: function(inst, noDefault) {
    if (inst.input.val() === inst.lastVal) {
      return;
    }

    var dateFormat = this._get(inst, "dateFormat"),
      dates = inst.lastVal = inst.input ? inst.input.val() : null,
      defaultDate = this._getDefaultDate(inst),
      date = defaultDate,
      settings = this._getFormatConfig(inst);

    try {
      date = this.parseDate(dateFormat, dates, settings) || defaultDate;
    } catch (event) {
      dates = (noDefault ? "" : dates);
    }
    inst.selectedDay = date.getDate();
    inst.drawMonth = inst.selectedMonth = date.getMonth();
    inst.drawYear = inst.selectedYear = date.getFullYear();
    inst.currentDay = (dates ? date.getDate() : 0);
    inst.currentMonth = (dates ? date.getMonth() : 0);
    inst.currentYear = (dates ? date.getFullYear() : 0);
    this._adjustInstDate(inst);
  },

  /* Retrieve the default date shown on opening. */
  _getDefaultDate: function(inst) {
    return this._restrictMinMax(inst,
      this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
  },

  /* A date may be specified as an exact value or a relative one. */
  _determineDate: function(inst, date, defaultDate) {
    var offsetNumeric = function(offset) {
        var date = new Date();
        date.setDate(date.getDate() + offset);
        return date;
      },
      offsetString = function(offset) {
        try {
          return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
            offset, $.datepicker._getFormatConfig(inst));
        }
        catch (e) {
          // Ignore
        }

        var date = (offset.toLowerCase().match(/^c/) ?
          $.datepicker._getDate(inst) : null) || new Date(),
          year = date.getFullYear(),
          month = date.getMonth(),
          day = date.getDate(),
          pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
          matches = pattern.exec(offset);

        while (matches) {
          switch (matches[2] || "d") {
            case "d" : case "D" :
              day += parseInt(matches[1],10); break;
            case "w" : case "W" :
              day += parseInt(matches[1],10) * 7; break;
            case "m" : case "M" :
              month += parseInt(matches[1],10);
              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
              break;
            case "y": case "Y" :
              year += parseInt(matches[1],10);
              day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
              break;
          }
          matches = pattern.exec(offset);
        }
        return new Date(year, month, day);
      },
      newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
        (typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

    newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
    if (newDate) {
      newDate.setHours(0);
      newDate.setMinutes(0);
      newDate.setSeconds(0);
      newDate.setMilliseconds(0);
    }
    return this._daylightSavingAdjust(newDate);
  },

  /* Handle switch to/from daylight saving.
   * Hours may be non-zero on daylight saving cut-over:
   * > 12 when midnight changeover, but then cannot generate
   * midnight datetime, so jump to 1AM, otherwise reset.
   * @param  date  (Date) the date to check
   * @return  (Date) the corrected date
   */
  _daylightSavingAdjust: function(date) {
    if (!date) {
      return null;
    }
    date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
    return date;
  },

  /* Set the date(s) directly. */
  _setDate: function(inst, date, noChange) {
    var clear = !date,
      origMonth = inst.selectedMonth,
      origYear = inst.selectedYear,
      newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

    inst.selectedDay = inst.currentDay = newDate.getDate();
    inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
    inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
    if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
      this._notifyChange(inst);
    }
    this._adjustInstDate(inst);
    if (inst.input) {
      inst.input.val(clear ? "" : this._formatDate(inst));
    }
  },

  /* Retrieve the date(s) directly. */
  _getDate: function(inst) {
    var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
      this._daylightSavingAdjust(new Date(
      inst.currentYear, inst.currentMonth, inst.currentDay)));
      return startDate;
  },

  /* Attach the onxxx handlers.  These are declared statically so
   * they work with static code transformers like Caja.
   */
  _attachHandlers: function(inst) {
    var stepMonths = this._get(inst, "stepMonths"),
      id = "#" + inst.id.replace( /\\\\/g, "\\" );
    inst.dpDiv.find("[data-handler]").map(function () {
      var handler = {
        prev: function () {
          $.datepicker._adjustDate(id, -stepMonths, "M");
        },
        next: function () {
          $.datepicker._adjustDate(id, +stepMonths, "M");
        },
        hide: function () {
          $.datepicker._hideDatepicker();
        },
        today: function () {
          $.datepicker._gotoToday(id);
        },
        selectDay: function () {
          $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
          return false;
        },
        selectMonth: function () {
          $.datepicker._selectMonthYear(id, this, "M");
          return false;
        },
        selectYear: function () {
          $.datepicker._selectMonthYear(id, this, "Y");
          return false;
        }
      };
      $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
    });
  },

  /* Generate the HTML for the current state of the date picker. */
  _generateHTML: function(inst) {
    var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
      controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
      monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
      selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
      cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
      printDate, dRow, tbody, daySettings, otherMonth, unselectable,
      tempDate = new Date(),
      today = this._daylightSavingAdjust(
        new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
      isRTL = this._get(inst, "isRTL"),
      showButtonPanel = this._get(inst, "showButtonPanel"),
      hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
      navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
      numMonths = this._getNumberOfMonths(inst),
      showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
      stepMonths = this._get(inst, "stepMonths"),
      isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
      currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
        new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
      minDate = this._getMinMaxDate(inst, "min"),
      maxDate = this._getMinMaxDate(inst, "max"),
      drawMonth = inst.drawMonth - showCurrentAtPos,
      drawYear = inst.drawYear;

    if (drawMonth < 0) {
      drawMonth += 12;
      drawYear--;
    }
    if (maxDate) {
      maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
        maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
      maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
      while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
        drawMonth--;
        if (drawMonth < 0) {
          drawMonth = 11;
          drawYear--;
        }
      }
    }
    inst.drawMonth = drawMonth;
    inst.drawYear = drawYear;

    prevText = this._get(inst, "prevText");
    prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
      this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
      this._getFormatConfig(inst)));

    prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
      "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
      " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
      (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

    nextText = this._get(inst, "nextText");
    nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
      this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
      this._getFormatConfig(inst)));

    next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
      "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
      " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
      (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

    currentText = this._get(inst, "currentText");
    gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
    currentText = (!navigationAsDateFormat ? currentText :
      this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

    controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
      this._get(inst, "closeText") + "</button>" : "");

    buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
      (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
      ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

    firstDay = parseInt(this._get(inst, "firstDay"),10);
    firstDay = (isNaN(firstDay) ? 0 : firstDay);

    showWeek = this._get(inst, "showWeek");
    dayNames = this._get(inst, "dayNames");
    dayNamesMin = this._get(inst, "dayNamesMin");
    monthNames = this._get(inst, "monthNames");
    monthNamesShort = this._get(inst, "monthNamesShort");
    beforeShowDay = this._get(inst, "beforeShowDay");
    showOtherMonths = this._get(inst, "showOtherMonths");
    selectOtherMonths = this._get(inst, "selectOtherMonths");
    defaultDate = this._getDefaultDate(inst);
    html = "";
    dow;
    for (row = 0; row < numMonths[0]; row++) {
      group = "";
      this.maxRows = 4;
      for (col = 0; col < numMonths[1]; col++) {
        selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
        cornerClass = " ui-corner-all";
        calender = "";
        if (isMultiMonth) {
          calender += "<div class='ui-datepicker-group";
          if (numMonths[1] > 1) {
            switch (col) {
              case 0: calender += " ui-datepicker-group-first";
                cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
              case numMonths[1]-1: calender += " ui-datepicker-group-last";
                cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
              default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
            }
          }
          calender += "'>";
        }
        calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
          (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
          (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
          this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
          row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
          "</div><table class='ui-datepicker-calendar'><thead>" +
          "<tr>";
        thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
        for (dow = 0; dow < 7; dow++) { // days of the week
          day = (dow + firstDay) % 7;
          thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
            "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
        }
        calender += thead + "</tr></thead><tbody>";
        daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
        if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
          inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
        }
        leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
        curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
        numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
        this.maxRows = numRows;
        printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
        for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
          calender += "<tr>";
          tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
            this._get(inst, "calculateWeek")(printDate) + "</td>");
          for (dow = 0; dow < 7; dow++) { // create date picker days
            daySettings = (beforeShowDay ?
              beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
            otherMonth = (printDate.getMonth() !== drawMonth);
            unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
              (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
            tbody += "<td class='" +
              ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
              (otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
              ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
              (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
              // or defaultDate is current printedDate and defaultDate is selectedDate
              " " + this._dayOverClass : "") + // highlight selected day
              (unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
              (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
              (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
              (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
              ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
              (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
              (otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
              (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
              (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
              (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
              (otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
              "' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
            printDate.setDate(printDate.getDate() + 1);
            printDate = this._daylightSavingAdjust(printDate);
          }
          calender += tbody + "</tr>";
        }
        drawMonth++;
        if (drawMonth > 11) {
          drawMonth = 0;
          drawYear++;
        }
        calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
              ((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
        group += calender;
      }
      html += group;
    }
    html += buttonPanel;
    inst._keyEvent = false;
    return html;
  },

  /* Generate the month and year header. */
  _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
      secondary, monthNames, monthNamesShort) {

    var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
      changeMonth = this._get(inst, "changeMonth"),
      changeYear = this._get(inst, "changeYear"),
      showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
      html = "<div class='ui-datepicker-title'>",
      monthHtml = "";

    // month selection
    if (secondary || !changeMonth) {
      monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
    } else {
      inMinYear = (minDate && minDate.getFullYear() === drawYear);
      inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
      monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
      for ( month = 0; month < 12; month++) {
        if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
          monthHtml += "<option value='" + month + "'" +
            (month === drawMonth ? " selected='selected'" : "") +
            ">" + monthNamesShort[month] + "</option>";
        }
      }
      monthHtml += "</select>";
    }

    if (!showMonthAfterYear) {
      html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
    }

    // year selection
    if ( !inst.yearshtml ) {
      inst.yearshtml = "";
      if (secondary || !changeYear) {
        html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
      } else {
        // determine range of years to display
        years = this._get(inst, "yearRange").split(":");
        thisYear = new Date().getFullYear();
        determineYear = function(value) {
          var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
            (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
            parseInt(value, 10)));
          return (isNaN(year) ? thisYear : year);
        };
        year = determineYear(years[0]);
        endYear = Math.max(year, determineYear(years[1] || ""));
        year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
        endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
        inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
        for (; year <= endYear; year++) {
          inst.yearshtml += "<option value='" + year + "'" +
            (year === drawYear ? " selected='selected'" : "") +
            ">" + year + "</option>";
        }
        inst.yearshtml += "</select>";

        html += inst.yearshtml;
        inst.yearshtml = null;
      }
    }

    html += this._get(inst, "yearSuffix");
    if (showMonthAfterYear) {
      html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
    }
    html += "</div>"; // Close datepicker_header
    return html;
  },

  /* Adjust one of the date sub-fields. */
  _adjustInstDate: function(inst, offset, period) {
    var year = inst.drawYear + (period === "Y" ? offset : 0),
      month = inst.drawMonth + (period === "M" ? offset : 0),
      day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
      date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

    inst.selectedDay = date.getDate();
    inst.drawMonth = inst.selectedMonth = date.getMonth();
    inst.drawYear = inst.selectedYear = date.getFullYear();
    if (period === "M" || period === "Y") {
      this._notifyChange(inst);
    }
  },

  /* Ensure a date is within any min/max bounds. */
  _restrictMinMax: function(inst, date) {
    var minDate = this._getMinMaxDate(inst, "min"),
      maxDate = this._getMinMaxDate(inst, "max"),
      newDate = (minDate && date < minDate ? minDate : date);
    return (maxDate && newDate > maxDate ? maxDate : newDate);
  },

  /* Notify change of month/year. */
  _notifyChange: function(inst) {
    var onChange = this._get(inst, "onChangeMonthYear");
    if (onChange) {
      onChange.apply((inst.input ? inst.input[0] : null),
        [inst.selectedYear, inst.selectedMonth + 1, inst]);
    }
  },

  /* Determine the number of months to show. */
  _getNumberOfMonths: function(inst) {
    var numMonths = this._get(inst, "numberOfMonths");
    return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
  },

  /* Determine the current maximum date - ensure no time components are set. */
  _getMinMaxDate: function(inst, minMax) {
    return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
  },

  /* Find the number of days in a given month. */
  _getDaysInMonth: function(year, month) {
    return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
  },

  /* Find the day of the week of the first of a month. */
  _getFirstDayOfMonth: function(year, month) {
    return new Date(year, month, 1).getDay();
  },

  /* Determines if we should allow a "next/prev" month display change. */
  _canAdjustMonth: function(inst, offset, curYear, curMonth) {
    var numMonths = this._getNumberOfMonths(inst),
      date = this._daylightSavingAdjust(new Date(curYear,
      curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

    if (offset < 0) {
      date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
    }
    return this._isInRange(inst, date);
  },

  /* Is the given date in the accepted range? */
  _isInRange: function(inst, date) {
    var yearSplit, currentYear,
      minDate = this._getMinMaxDate(inst, "min"),
      maxDate = this._getMinMaxDate(inst, "max"),
      minYear = null,
      maxYear = null,
      years = this._get(inst, "yearRange");
      if (years){
        yearSplit = years.split(":");
        currentYear = new Date().getFullYear();
        minYear = parseInt(yearSplit[0], 10);
        maxYear = parseInt(yearSplit[1], 10);
        if ( yearSplit[0].match(/[+\-].*/) ) {
          minYear += currentYear;
        }
        if ( yearSplit[1].match(/[+\-].*/) ) {
          maxYear += currentYear;
        }
      }

    return ((!minDate || date.getTime() >= minDate.getTime()) &&
      (!maxDate || date.getTime() <= maxDate.getTime()) &&
      (!minYear || date.getFullYear() >= minYear) &&
      (!maxYear || date.getFullYear() <= maxYear));
  },

  /* Provide the configuration settings for formatting/parsing. */
  _getFormatConfig: function(inst) {
    var shortYearCutoff = this._get(inst, "shortYearCutoff");
    shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
      new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
    return {shortYearCutoff: shortYearCutoff,
      dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
      monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
  },

  /* Format the given date for display. */
  _formatDate: function(inst, day, month, year) {
    if (!day) {
      inst.currentDay = inst.selectedDay;
      inst.currentMonth = inst.selectedMonth;
      inst.currentYear = inst.selectedYear;
    }
    var date = (day ? (typeof day === "object" ? day :
      this._daylightSavingAdjust(new Date(year, month, day))) :
      this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
    return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
  }
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function bindHover(dpDiv) {
  var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
  return dpDiv.delegate(selector, "mouseout", function() {
      $(this).removeClass("ui-state-hover");
      if (this.className.indexOf("ui-datepicker-prev") !== -1) {
        $(this).removeClass("ui-datepicker-prev-hover");
      }
      if (this.className.indexOf("ui-datepicker-next") !== -1) {
        $(this).removeClass("ui-datepicker-next-hover");
      }
    })
    .delegate(selector, "mouseover", function(){
      if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
        $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
        $(this).addClass("ui-state-hover");
        if (this.className.indexOf("ui-datepicker-prev") !== -1) {
          $(this).addClass("ui-datepicker-prev-hover");
        }
        if (this.className.indexOf("ui-datepicker-next") !== -1) {
          $(this).addClass("ui-datepicker-next-hover");
        }
      }
    });
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
  $.extend(target, props);
  for (var name in props) {
    if (props[name] == null) {
      target[name] = props[name];
    }
  }
  return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
          Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

  /* Verify an empty collection wasn't passed - Fixes #6976 */
  if ( !this.length ) {
    return this;
  }

  /* Initialise the date picker. */
  if (!$.datepicker.initialized) {
    $(document).mousedown($.datepicker._checkExternalClick);
    $.datepicker.initialized = true;
  }

  /* Append datepicker main container to body if not exist. */
  if ($("#"+$.datepicker._mainDivId).length === 0) {
    $("body").append($.datepicker.dpDiv);
  }

  var otherArgs = Array.prototype.slice.call(arguments, 1);
  if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
    return $.datepicker["_" + options + "Datepicker"].
      apply($.datepicker, [this[0]].concat(otherArgs));
  }
  if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
    return $.datepicker["_" + options + "Datepicker"].
      apply($.datepicker, [this[0]].concat(otherArgs));
  }
  return this.each(function() {
    typeof options === "string" ?
      $.datepicker["_" + options + "Datepicker"].
        apply($.datepicker, [this].concat(otherArgs)) :
      $.datepicker._attachDatepicker(this, options);
  });
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.10.4";

})(jQuery);
(function( $, undefined ) {

var sizeRelatedOptions = {
    buttons: true,
    height: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    width: true
  },
  resizableRelatedOptions = {
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true
  };

$.widget( "ui.dialog", {
  version: "1.10.4",
  options: {
    appendTo: "body",
    autoOpen: true,
    buttons: [],
    closeOnEscape: true,
    closeText: "close",
    dialogClass: "",
    draggable: true,
    hide: null,
    height: "auto",
    maxHeight: null,
    maxWidth: null,
    minHeight: 150,
    minWidth: 150,
    modal: false,
    position: {
      my: "center",
      at: "center",
      of: window,
      collision: "fit",
      // Ensure the titlebar is always visible
      using: function( pos ) {
        var topOffset = $( this ).css( pos ).offset().top;
        if ( topOffset < 0 ) {
          $( this ).css( "top", pos.top - topOffset );
        }
      }
    },
    resizable: true,
    show: null,
    title: null,
    width: 300,

    // callbacks
    beforeClose: null,
    close: null,
    drag: null,
    dragStart: null,
    dragStop: null,
    focus: null,
    open: null,
    resize: null,
    resizeStart: null,
    resizeStop: null
  },

  _create: function() {
    this.originalCss = {
      display: this.element[0].style.display,
      width: this.element[0].style.width,
      minHeight: this.element[0].style.minHeight,
      maxHeight: this.element[0].style.maxHeight,
      height: this.element[0].style.height
    };
    this.originalPosition = {
      parent: this.element.parent(),
      index: this.element.parent().children().index( this.element )
    };
    this.originalTitle = this.element.attr("title");
    this.options.title = this.options.title || this.originalTitle;

    this._createWrapper();

    this.element
      .show()
      .removeAttr("title")
      .addClass("ui-dialog-content ui-widget-content")
      .appendTo( this.uiDialog );

    this._createTitlebar();
    this._createButtonPane();

    if ( this.options.draggable && $.fn.draggable ) {
      this._makeDraggable();
    }
    if ( this.options.resizable && $.fn.resizable ) {
      this._makeResizable();
    }

    this._isOpen = false;
  },

  _init: function() {
    if ( this.options.autoOpen ) {
      this.open();
    }
  },

  _appendTo: function() {
    var element = this.options.appendTo;
    if ( element && (element.jquery || element.nodeType) ) {
      return $( element );
    }
    return this.document.find( element || "body" ).eq( 0 );
  },

  _destroy: function() {
    var next,
      originalPosition = this.originalPosition;

    this._destroyOverlay();

    this.element
      .removeUniqueId()
      .removeClass("ui-dialog-content ui-widget-content")
      .css( this.originalCss )
      // Without detaching first, the following becomes really slow
      .detach();

    this.uiDialog.stop( true, true ).remove();

    if ( this.originalTitle ) {
      this.element.attr( "title", this.originalTitle );
    }

    next = originalPosition.parent.children().eq( originalPosition.index );
    // Don't try to place the dialog next to itself (#8613)
    if ( next.length && next[0] !== this.element[0] ) {
      next.before( this.element );
    } else {
      originalPosition.parent.append( this.element );
    }
  },

  widget: function() {
    return this.uiDialog;
  },

  disable: $.noop,
  enable: $.noop,

  close: function( event ) {
    var activeElement,
      that = this;

    if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
      return;
    }

    this._isOpen = false;
    this._destroyOverlay();

    if ( !this.opener.filter(":focusable").focus().length ) {

      // support: IE9
      // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
      try {
        activeElement = this.document[ 0 ].activeElement;

        // Support: IE9, IE10
        // If the <body> is blurred, IE will switch windows, see #4520
        if ( activeElement && activeElement.nodeName.toLowerCase() !== "body" ) {

          // Hiding a focused element doesn't trigger blur in WebKit
          // so in case we have nothing to focus on, explicitly blur the active element
          // https://bugs.webkit.org/show_bug.cgi?id=47182
          $( activeElement ).blur();
        }
      } catch ( error ) {}
    }

    this._hide( this.uiDialog, this.options.hide, function() {
      that._trigger( "close", event );
    });
  },

  isOpen: function() {
    return this._isOpen;
  },

  moveToTop: function() {
    this._moveToTop();
  },

  _moveToTop: function( event, silent ) {
    var moved = !!this.uiDialog.nextAll(":visible").insertBefore( this.uiDialog ).length;
    if ( moved && !silent ) {
      this._trigger( "focus", event );
    }
    return moved;
  },

  open: function() {
    var that = this;
    if ( this._isOpen ) {
      if ( this._moveToTop() ) {
        this._focusTabbable();
      }
      return;
    }

    this._isOpen = true;
    this.opener = $( this.document[0].activeElement );

    this._size();
    this._position();
    this._createOverlay();
    this._moveToTop( null, true );
    this._show( this.uiDialog, this.options.show, function() {
      that._focusTabbable();
      that._trigger("focus");
    });

    this._trigger("open");
  },

  _focusTabbable: function() {
    // Set focus to the first match:
    // 1. First element inside the dialog matching [autofocus]
    // 2. Tabbable element inside the content element
    // 3. Tabbable element inside the buttonpane
    // 4. The close button
    // 5. The dialog itself
    var hasFocus = this.element.find("[autofocus]");
    if ( !hasFocus.length ) {
      hasFocus = this.element.find(":tabbable");
    }
    if ( !hasFocus.length ) {
      hasFocus = this.uiDialogButtonPane.find(":tabbable");
    }
    if ( !hasFocus.length ) {
      hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
    }
    if ( !hasFocus.length ) {
      hasFocus = this.uiDialog;
    }
    hasFocus.eq( 0 ).focus();
  },

  _keepFocus: function( event ) {
    function checkFocus() {
      var activeElement = this.document[0].activeElement,
        isActive = this.uiDialog[0] === activeElement ||
          $.contains( this.uiDialog[0], activeElement );
      if ( !isActive ) {
        this._focusTabbable();
      }
    }
    event.preventDefault();
    checkFocus.call( this );
    // support: IE
    // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
    // so we check again later
    this._delay( checkFocus );
  },

  _createWrapper: function() {
    this.uiDialog = $("<div>")
      .addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
        this.options.dialogClass )
      .hide()
      .attr({
        // Setting tabIndex makes the div focusable
        tabIndex: -1,
        role: "dialog"
      })
      .appendTo( this._appendTo() );

    this._on( this.uiDialog, {
      keydown: function( event ) {
        if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
            event.keyCode === $.ui.keyCode.ESCAPE ) {
          event.preventDefault();
          this.close( event );
          return;
        }

        // prevent tabbing out of dialogs
        if ( event.keyCode !== $.ui.keyCode.TAB ) {
          return;
        }
        var tabbables = this.uiDialog.find(":tabbable"),
          first = tabbables.filter(":first"),
          last  = tabbables.filter(":last");

        if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {
          first.focus( 1 );
          event.preventDefault();
        } else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {
          last.focus( 1 );
          event.preventDefault();
        }
      },
      mousedown: function( event ) {
        if ( this._moveToTop( event ) ) {
          this._focusTabbable();
        }
      }
    });

    // We assume that any existing aria-describedby attribute means
    // that the dialog content is marked up properly
    // otherwise we brute force the content as the description
    if ( !this.element.find("[aria-describedby]").length ) {
      this.uiDialog.attr({
        "aria-describedby": this.element.uniqueId().attr("id")
      });
    }
  },

  _createTitlebar: function() {
    var uiDialogTitle;

    this.uiDialogTitlebar = $("<div>")
      .addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix")
      .prependTo( this.uiDialog );
    this._on( this.uiDialogTitlebar, {
      mousedown: function( event ) {
        // Don't prevent click on close button (#8838)
        // Focusing a dialog that is partially scrolled out of view
        // causes the browser to scroll it into view, preventing the click event
        if ( !$( event.target ).closest(".ui-dialog-titlebar-close") ) {
          // Dialog isn't getting focus when dragging (#8063)
          this.uiDialog.focus();
        }
      }
    });

    // support: IE
    // Use type="button" to prevent enter keypresses in textboxes from closing the
    // dialog in IE (#9312)
    this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
      .button({
        label: this.options.closeText,
        icons: {
          primary: "ui-icon-closethick"
        },
        text: false
      })
      .addClass("ui-dialog-titlebar-close")
      .appendTo( this.uiDialogTitlebar );
    this._on( this.uiDialogTitlebarClose, {
      click: function( event ) {
        event.preventDefault();
        this.close( event );
      }
    });

    uiDialogTitle = $("<span>")
      .uniqueId()
      .addClass("ui-dialog-title")
      .prependTo( this.uiDialogTitlebar );
    this._title( uiDialogTitle );

    this.uiDialog.attr({
      "aria-labelledby": uiDialogTitle.attr("id")
    });
  },

  _title: function( title ) {
    if ( !this.options.title ) {
      title.html("&#160;");
    }
    title.text( this.options.title );
  },

  _createButtonPane: function() {
    this.uiDialogButtonPane = $("<div>")
      .addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");

    this.uiButtonSet = $("<div>")
      .addClass("ui-dialog-buttonset")
      .appendTo( this.uiDialogButtonPane );

    this._createButtons();
  },

  _createButtons: function() {
    var that = this,
      buttons = this.options.buttons;

    // if we already have a button pane, remove it
    this.uiDialogButtonPane.remove();
    this.uiButtonSet.empty();

    if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {
      this.uiDialog.removeClass("ui-dialog-buttons");
      return;
    }

    $.each( buttons, function( name, props ) {
      var click, buttonOptions;
      props = $.isFunction( props ) ?
        { click: props, text: name } :
        props;
      // Default to a non-submitting button
      props = $.extend( { type: "button" }, props );
      // Change the context for the click callback to be the main element
      click = props.click;
      props.click = function() {
        click.apply( that.element[0], arguments );
      };
      buttonOptions = {
        icons: props.icons,
        text: props.showText
      };
      delete props.icons;
      delete props.showText;
      $( "<button></button>", props )
        .button( buttonOptions )
        .appendTo( that.uiButtonSet );
    });
    this.uiDialog.addClass("ui-dialog-buttons");
    this.uiDialogButtonPane.appendTo( this.uiDialog );
  },

  _makeDraggable: function() {
    var that = this,
      options = this.options;

    function filteredUi( ui ) {
      return {
        position: ui.position,
        offset: ui.offset
      };
    }

    this.uiDialog.draggable({
      cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
      handle: ".ui-dialog-titlebar",
      containment: "document",
      start: function( event, ui ) {
        $( this ).addClass("ui-dialog-dragging");
        that._blockFrames();
        that._trigger( "dragStart", event, filteredUi( ui ) );
      },
      drag: function( event, ui ) {
        that._trigger( "drag", event, filteredUi( ui ) );
      },
      stop: function( event, ui ) {
        options.position = [
          ui.position.left - that.document.scrollLeft(),
          ui.position.top - that.document.scrollTop()
        ];
        $( this ).removeClass("ui-dialog-dragging");
        that._unblockFrames();
        that._trigger( "dragStop", event, filteredUi( ui ) );
      }
    });
  },

  _makeResizable: function() {
    var that = this,
      options = this.options,
      handles = options.resizable,
      // .ui-resizable has position: relative defined in the stylesheet
      // but dialogs have to use absolute or fixed positioning
      position = this.uiDialog.css("position"),
      resizeHandles = typeof handles === "string" ?
        handles :
        "n,e,s,w,se,sw,ne,nw";

    function filteredUi( ui ) {
      return {
        originalPosition: ui.originalPosition,
        originalSize: ui.originalSize,
        position: ui.position,
        size: ui.size
      };
    }

    this.uiDialog.resizable({
      cancel: ".ui-dialog-content",
      containment: "document",
      alsoResize: this.element,
      maxWidth: options.maxWidth,
      maxHeight: options.maxHeight,
      minWidth: options.minWidth,
      minHeight: this._minHeight(),
      handles: resizeHandles,
      start: function( event, ui ) {
        $( this ).addClass("ui-dialog-resizing");
        that._blockFrames();
        that._trigger( "resizeStart", event, filteredUi( ui ) );
      },
      resize: function( event, ui ) {
        that._trigger( "resize", event, filteredUi( ui ) );
      },
      stop: function( event, ui ) {
        options.height = $( this ).height();
        options.width = $( this ).width();
        $( this ).removeClass("ui-dialog-resizing");
        that._unblockFrames();
        that._trigger( "resizeStop", event, filteredUi( ui ) );
      }
    })
    .css( "position", position );
  },

  _minHeight: function() {
    var options = this.options;

    return options.height === "auto" ?
      options.minHeight :
      Math.min( options.minHeight, options.height );
  },

  _position: function() {
    // Need to show the dialog to get the actual offset in the position plugin
    var isVisible = this.uiDialog.is(":visible");
    if ( !isVisible ) {
      this.uiDialog.show();
    }
    this.uiDialog.position( this.options.position );
    if ( !isVisible ) {
      this.uiDialog.hide();
    }
  },

  _setOptions: function( options ) {
    var that = this,
      resize = false,
      resizableOptions = {};

    $.each( options, function( key, value ) {
      that._setOption( key, value );

      if ( key in sizeRelatedOptions ) {
        resize = true;
      }
      if ( key in resizableRelatedOptions ) {
        resizableOptions[ key ] = value;
      }
    });

    if ( resize ) {
      this._size();
      this._position();
    }
    if ( this.uiDialog.is(":data(ui-resizable)") ) {
      this.uiDialog.resizable( "option", resizableOptions );
    }
  },

  _setOption: function( key, value ) {
    var isDraggable, isResizable,
      uiDialog = this.uiDialog;

    if ( key === "dialogClass" ) {
      uiDialog
        .removeClass( this.options.dialogClass )
        .addClass( value );
    }

    if ( key === "disabled" ) {
      return;
    }

    this._super( key, value );

    if ( key === "appendTo" ) {
      this.uiDialog.appendTo( this._appendTo() );
    }

    if ( key === "buttons" ) {
      this._createButtons();
    }

    if ( key === "closeText" ) {
      this.uiDialogTitlebarClose.button({
        // Ensure that we always pass a string
        label: "" + value
      });
    }

    if ( key === "draggable" ) {
      isDraggable = uiDialog.is(":data(ui-draggable)");
      if ( isDraggable && !value ) {
        uiDialog.draggable("destroy");
      }

      if ( !isDraggable && value ) {
        this._makeDraggable();
      }
    }

    if ( key === "position" ) {
      this._position();
    }

    if ( key === "resizable" ) {
      // currently resizable, becoming non-resizable
      isResizable = uiDialog.is(":data(ui-resizable)");
      if ( isResizable && !value ) {
        uiDialog.resizable("destroy");
      }

      // currently resizable, changing handles
      if ( isResizable && typeof value === "string" ) {
        uiDialog.resizable( "option", "handles", value );
      }

      // currently non-resizable, becoming resizable
      if ( !isResizable && value !== false ) {
        this._makeResizable();
      }
    }

    if ( key === "title" ) {
      this._title( this.uiDialogTitlebar.find(".ui-dialog-title") );
    }
  },

  _size: function() {
    // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
    // divs will both have width and height set, so we need to reset them
    var nonContentHeight, minContentHeight, maxContentHeight,
      options = this.options;

    // Reset content sizing
    this.element.show().css({
      width: "auto",
      minHeight: 0,
      maxHeight: "none",
      height: 0
    });

    if ( options.minWidth > options.width ) {
      options.width = options.minWidth;
    }

    // reset wrapper sizing
    // determine the height of all the non-content elements
    nonContentHeight = this.uiDialog.css({
        height: "auto",
        width: options.width
      })
      .outerHeight();
    minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
    maxContentHeight = typeof options.maxHeight === "number" ?
      Math.max( 0, options.maxHeight - nonContentHeight ) :
      "none";

    if ( options.height === "auto" ) {
      this.element.css({
        minHeight: minContentHeight,
        maxHeight: maxContentHeight,
        height: "auto"
      });
    } else {
      this.element.height( Math.max( 0, options.height - nonContentHeight ) );
    }

    if (this.uiDialog.is(":data(ui-resizable)") ) {
      this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
    }
  },

  _blockFrames: function() {
    this.iframeBlocks = this.document.find( "iframe" ).map(function() {
      var iframe = $( this );

      return $( "<div>" )
        .css({
          position: "absolute",
          width: iframe.outerWidth(),
          height: iframe.outerHeight()
        })
        .appendTo( iframe.parent() )
        .offset( iframe.offset() )[0];
    });
  },

  _unblockFrames: function() {
    if ( this.iframeBlocks ) {
      this.iframeBlocks.remove();
      delete this.iframeBlocks;
    }
  },

  _allowInteraction: function( event ) {
    if ( $( event.target ).closest(".ui-dialog").length ) {
      return true;
    }

    // TODO: Remove hack when datepicker implements
    // the .ui-front logic (#8989)
    return !!$( event.target ).closest(".ui-datepicker").length;
  },

  _createOverlay: function() {
    if ( !this.options.modal ) {
      return;
    }

    var that = this,
      widgetFullName = this.widgetFullName;
    if ( !$.ui.dialog.overlayInstances ) {
      // Prevent use of anchors and inputs.
      // We use a delay in case the overlay is created from an
      // event that we're going to be cancelling. (#2804)
      this._delay(function() {
        // Handle .dialog().dialog("close") (#4065)
        if ( $.ui.dialog.overlayInstances ) {
          this.document.bind( "focusin.dialog", function( event ) {
            if ( !that._allowInteraction( event ) ) {
              event.preventDefault();
              $(".ui-dialog:visible:last .ui-dialog-content")
                .data( widgetFullName )._focusTabbable();
            }
          });
        }
      });
    }

    this.overlay = $("<div>")
      .addClass("ui-widget-overlay ui-front")
      .appendTo( this._appendTo() );
    this._on( this.overlay, {
      mousedown: "_keepFocus"
    });
    $.ui.dialog.overlayInstances++;
  },

  _destroyOverlay: function() {
    if ( !this.options.modal ) {
      return;
    }

    if ( this.overlay ) {
      $.ui.dialog.overlayInstances--;

      if ( !$.ui.dialog.overlayInstances ) {
        this.document.unbind( "focusin.dialog" );
      }
      this.overlay.remove();
      this.overlay = null;
    }
  }
});

$.ui.dialog.overlayInstances = 0;

// DEPRECATED
if ( $.uiBackCompat !== false ) {
  // position option with array notation
  // just override with old implementation
  $.widget( "ui.dialog", $.ui.dialog, {
    _position: function() {
      var position = this.options.position,
        myAt = [],
        offset = [ 0, 0 ],
        isVisible;

      if ( position ) {
        if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
          myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
          if ( myAt.length === 1 ) {
            myAt[1] = myAt[0];
          }

          $.each( [ "left", "top" ], function( i, offsetPosition ) {
            if ( +myAt[ i ] === myAt[ i ] ) {
              offset[ i ] = myAt[ i ];
              myAt[ i ] = offsetPosition;
            }
          });

          position = {
            my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
              myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
            at: myAt.join(" ")
          };
        }

        position = $.extend( {}, $.ui.dialog.prototype.options.position, position );
      } else {
        position = $.ui.dialog.prototype.options.position;
      }

      // need to show the dialog to get the actual offset in the position plugin
      isVisible = this.uiDialog.is(":visible");
      if ( !isVisible ) {
        this.uiDialog.show();
      }
      this.uiDialog.position( position );
      if ( !isVisible ) {
        this.uiDialog.hide();
      }
    }
  });
}

}( jQuery ) );
(function( $, undefined ) {

$.widget("ui.draggable", $.ui.mouse, {
  version: "1.10.4",
  widgetEventPrefix: "drag",
  options: {
    addClasses: true,
    appendTo: "parent",
    axis: false,
    connectToSortable: false,
    containment: false,
    cursor: "auto",
    cursorAt: false,
    grid: false,
    handle: false,
    helper: "original",
    iframeFix: false,
    opacity: false,
    refreshPositions: false,
    revert: false,
    revertDuration: 500,
    scope: "default",
    scroll: true,
    scrollSensitivity: 20,
    scrollSpeed: 20,
    snap: false,
    snapMode: "both",
    snapTolerance: 20,
    stack: false,
    zIndex: false,

    // callbacks
    drag: null,
    start: null,
    stop: null
  },
  _create: function() {

    if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
      this.element[0].style.position = "relative";
    }
    if (this.options.addClasses){
      this.element.addClass("ui-draggable");
    }
    if (this.options.disabled){
      this.element.addClass("ui-draggable-disabled");
    }

    this._mouseInit();

  },

  _destroy: function() {
    this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
    this._mouseDestroy();
  },

  _mouseCapture: function(event) {

    var o = this.options;

    // among others, prevent a drag on a resizable-handle
    if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
      return false;
    }

    //Quit if we're not on a valid handle
    this.handle = this._getHandle(event);
    if (!this.handle) {
      return false;
    }

    $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
      $("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
      .css({
        width: this.offsetWidth+"px", height: this.offsetHeight+"px",
        position: "absolute", opacity: "0.001", zIndex: 1000
      })
      .css($(this).offset())
      .appendTo("body");
    });

    return true;

  },

  _mouseStart: function(event) {

    var o = this.options;

    //Create and append the visible helper
    this.helper = this._createHelper(event);

    this.helper.addClass("ui-draggable-dragging");

    //Cache the helper size
    this._cacheHelperProportions();

    //If ddmanager is used for droppables, set the global draggable
    if($.ui.ddmanager) {
      $.ui.ddmanager.current = this;
    }

    /*
     * - Position generation -
     * This block generates everything position related - it's the core of draggables.
     */

    //Cache the margins of the original element
    this._cacheMargins();

    //Store the helper's css position
    this.cssPosition = this.helper.css( "position" );
    this.scrollParent = this.helper.scrollParent();
    this.offsetParent = this.helper.offsetParent();
    this.offsetParentCssPosition = this.offsetParent.css( "position" );

    //The element's absolute position on the page minus margins
    this.offset = this.positionAbs = this.element.offset();
    this.offset = {
      top: this.offset.top - this.margins.top,
      left: this.offset.left - this.margins.left
    };

    //Reset scroll cache
    this.offset.scroll = false;

    $.extend(this.offset, {
      click: { //Where the click happened, relative to the element
        left: event.pageX - this.offset.left,
        top: event.pageY - this.offset.top
      },
      parent: this._getParentOffset(),
      relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
    });

    //Generate the original position
    this.originalPosition = this.position = this._generatePosition(event);
    this.originalPageX = event.pageX;
    this.originalPageY = event.pageY;

    //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
    (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

    //Set a containment if given in the options
    this._setContainment();

    //Trigger event + callbacks
    if(this._trigger("start", event) === false) {
      this._clear();
      return false;
    }

    //Recache the helper size
    this._cacheHelperProportions();

    //Prepare the droppable offsets
    if ($.ui.ddmanager && !o.dropBehaviour) {
      $.ui.ddmanager.prepareOffsets(this, event);
    }


    this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

    //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
    if ( $.ui.ddmanager ) {
      $.ui.ddmanager.dragStart(this, event);
    }

    return true;
  },

  _mouseDrag: function(event, noPropagation) {
    // reset any necessary cached properties (see #5009)
    if ( this.offsetParentCssPosition === "fixed" ) {
      this.offset.parent = this._getParentOffset();
    }

    //Compute the helpers position
    this.position = this._generatePosition(event);
    this.positionAbs = this._convertPositionTo("absolute");

    //Call plugins and callbacks and use the resulting position if something is returned
    if (!noPropagation) {
      var ui = this._uiHash();
      if(this._trigger("drag", event, ui) === false) {
        this._mouseUp({});
        return false;
      }
      this.position = ui.position;
    }

    if(!this.options.axis || this.options.axis !== "y") {
      this.helper[0].style.left = this.position.left+"px";
    }
    if(!this.options.axis || this.options.axis !== "x") {
      this.helper[0].style.top = this.position.top+"px";
    }
    if($.ui.ddmanager) {
      $.ui.ddmanager.drag(this, event);
    }

    return false;
  },

  _mouseStop: function(event) {

    //If we are using droppables, inform the manager about the drop
    var that = this,
      dropped = false;
    if ($.ui.ddmanager && !this.options.dropBehaviour) {
      dropped = $.ui.ddmanager.drop(this, event);
    }

    //if a drop comes from outside (a sortable)
    if(this.dropped) {
      dropped = this.dropped;
      this.dropped = false;
    }

    //if the original element is no longer in the DOM don't bother to continue (see #8269)
    if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
      return false;
    }

    if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
      $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
        if(that._trigger("stop", event) !== false) {
          that._clear();
        }
      });
    } else {
      if(this._trigger("stop", event) !== false) {
        this._clear();
      }
    }

    return false;
  },

  _mouseUp: function(event) {
    //Remove frame helpers
    $("div.ui-draggable-iframeFix").each(function() {
      this.parentNode.removeChild(this);
    });

    //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
    if( $.ui.ddmanager ) {
      $.ui.ddmanager.dragStop(this, event);
    }

    return $.ui.mouse.prototype._mouseUp.call(this, event);
  },

  cancel: function() {

    if(this.helper.is(".ui-draggable-dragging")) {
      this._mouseUp({});
    } else {
      this._clear();
    }

    return this;

  },

  _getHandle: function(event) {
    return this.options.handle ?
      !!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
      true;
  },

  _createHelper: function(event) {

    var o = this.options,
      helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

    if(!helper.parents("body").length) {
      helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
    }

    if(helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
      helper.css("position", "absolute");
    }

    return helper;

  },

  _adjustOffsetFromHelper: function(obj) {
    if (typeof obj === "string") {
      obj = obj.split(" ");
    }
    if ($.isArray(obj)) {
      obj = {left: +obj[0], top: +obj[1] || 0};
    }
    if ("left" in obj) {
      this.offset.click.left = obj.left + this.margins.left;
    }
    if ("right" in obj) {
      this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
    }
    if ("top" in obj) {
      this.offset.click.top = obj.top + this.margins.top;
    }
    if ("bottom" in obj) {
      this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
    }
  },

  _getParentOffset: function() {

    //Get the offsetParent and cache its position
    var po = this.offsetParent.offset();

    // This is a special case where we need to modify a offset calculated on start, since the following happened:
    // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
    // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
    //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
    if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
      po.left += this.scrollParent.scrollLeft();
      po.top += this.scrollParent.scrollTop();
    }

    //This needs to be actually done for all browsers, since pageX/pageY includes this information
    //Ugly IE fix
    if((this.offsetParent[0] === document.body) ||
      (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
      po = { top: 0, left: 0 };
    }

    return {
      top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
      left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
    };

  },

  _getRelativeOffset: function() {

    if(this.cssPosition === "relative") {
      var p = this.element.position();
      return {
        top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
        left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
      };
    } else {
      return { top: 0, left: 0 };
    }

  },

  _cacheMargins: function() {
    this.margins = {
      left: (parseInt(this.element.css("marginLeft"),10) || 0),
      top: (parseInt(this.element.css("marginTop"),10) || 0),
      right: (parseInt(this.element.css("marginRight"),10) || 0),
      bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
    };
  },

  _cacheHelperProportions: function() {
    this.helperProportions = {
      width: this.helper.outerWidth(),
      height: this.helper.outerHeight()
    };
  },

  _setContainment: function() {

    var over, c, ce,
      o = this.options;

    if ( !o.containment ) {
      this.containment = null;
      return;
    }

    if ( o.containment === "window" ) {
      this.containment = [
        $( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
        $( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
        $( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
        $( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
      ];
      return;
    }

    if ( o.containment === "document") {
      this.containment = [
        0,
        0,
        $( document ).width() - this.helperProportions.width - this.margins.left,
        ( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
      ];
      return;
    }

    if ( o.containment.constructor === Array ) {
      this.containment = o.containment;
      return;
    }

    if ( o.containment === "parent" ) {
      o.containment = this.helper[ 0 ].parentNode;
    }

    c = $( o.containment );
    ce = c[ 0 ];

    if( !ce ) {
      return;
    }

    over = c.css( "overflow" ) !== "hidden";

    this.containment = [
      ( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
      ( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ) ,
      ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) - ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) - this.helperProportions.width - this.margins.left - this.margins.right,
      ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) - ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) - this.helperProportions.height - this.margins.top  - this.margins.bottom
    ];
    this.relative_container = c;
  },

  _convertPositionTo: function(d, pos) {

    if(!pos) {
      pos = this.position;
    }

    var mod = d === "absolute" ? 1 : -1,
      scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent;

    //Cache the scroll
    if (!this.offset.scroll) {
      this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
    }

    return {
      top: (
        pos.top +                               // The absolute mouse position
        this.offset.relative.top * mod +                    // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.top * mod -                    // The offsetParent's offset without borders (offset + border)
        ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top ) * mod )
      ),
      left: (
        pos.left +                                // The absolute mouse position
        this.offset.relative.left * mod +                   // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.left * mod -                   // The offsetParent's offset without borders (offset + border)
        ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left ) * mod )
      )
    };

  },

  _generatePosition: function(event) {

    var containment, co, top, left,
      o = this.options,
      scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent,
      pageX = event.pageX,
      pageY = event.pageY;

    //Cache the scroll
    if (!this.offset.scroll) {
      this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
    }

    /*
     * - Position constraining -
     * Constrain the position to a mix of grid, containment.
     */

    // If we are not dragging yet, we won't check for options
    if ( this.originalPosition ) {
      if ( this.containment ) {
        if ( this.relative_container ){
          co = this.relative_container.offset();
          containment = [
            this.containment[ 0 ] + co.left,
            this.containment[ 1 ] + co.top,
            this.containment[ 2 ] + co.left,
            this.containment[ 3 ] + co.top
          ];
        }
        else {
          containment = this.containment;
        }

        if(event.pageX - this.offset.click.left < containment[0]) {
          pageX = containment[0] + this.offset.click.left;
        }
        if(event.pageY - this.offset.click.top < containment[1]) {
          pageY = containment[1] + this.offset.click.top;
        }
        if(event.pageX - this.offset.click.left > containment[2]) {
          pageX = containment[2] + this.offset.click.left;
        }
        if(event.pageY - this.offset.click.top > containment[3]) {
          pageY = containment[3] + this.offset.click.top;
        }
      }

      if(o.grid) {
        //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
        top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
        pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

        left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
        pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
      }

    }

    return {
      top: (
        pageY -                                 // The absolute mouse position
        this.offset.click.top -                       // Click offset (relative to the element)
        this.offset.relative.top -                        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.top +                        // The offsetParent's offset without borders (offset + border)
        ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top )
      ),
      left: (
        pageX -                                 // The absolute mouse position
        this.offset.click.left -                        // Click offset (relative to the element)
        this.offset.relative.left -                       // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.left +                       // The offsetParent's offset without borders (offset + border)
        ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left )
      )
    };

  },

  _clear: function() {
    this.helper.removeClass("ui-draggable-dragging");
    if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
      this.helper.remove();
    }
    this.helper = null;
    this.cancelHelperRemoval = false;
  },

  // From now on bulk stuff - mainly helpers

  _trigger: function(type, event, ui) {
    ui = ui || this._uiHash();
    $.ui.plugin.call(this, type, [event, ui]);
    //The absolute position has to be recalculated after plugins
    if(type === "drag") {
      this.positionAbs = this._convertPositionTo("absolute");
    }
    return $.Widget.prototype._trigger.call(this, type, event, ui);
  },

  plugins: {},

  _uiHash: function() {
    return {
      helper: this.helper,
      position: this.position,
      originalPosition: this.originalPosition,
      offset: this.positionAbs
    };
  }

});

$.ui.plugin.add("draggable", "connectToSortable", {
  start: function(event, ui) {

    var inst = $(this).data("ui-draggable"), o = inst.options,
      uiSortable = $.extend({}, ui, { item: inst.element });
    inst.sortables = [];
    $(o.connectToSortable).each(function() {
      var sortable = $.data(this, "ui-sortable");
      if (sortable && !sortable.options.disabled) {
        inst.sortables.push({
          instance: sortable,
          shouldRevert: sortable.options.revert
        });
        sortable.refreshPositions();  // Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
        sortable._trigger("activate", event, uiSortable);
      }
    });

  },
  stop: function(event, ui) {

    //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
    var inst = $(this).data("ui-draggable"),
      uiSortable = $.extend({}, ui, { item: inst.element });

    $.each(inst.sortables, function() {
      if(this.instance.isOver) {

        this.instance.isOver = 0;

        inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
        this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

        //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
        if(this.shouldRevert) {
          this.instance.options.revert = this.shouldRevert;
        }

        //Trigger the stop of the sortable
        this.instance._mouseStop(event);

        this.instance.options.helper = this.instance.options._helper;

        //If the helper has been the original item, restore properties in the sortable
        if(inst.options.helper === "original") {
          this.instance.currentItem.css({ top: "auto", left: "auto" });
        }

      } else {
        this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
        this.instance._trigger("deactivate", event, uiSortable);
      }

    });

  },
  drag: function(event, ui) {

    var inst = $(this).data("ui-draggable"), that = this;

    $.each(inst.sortables, function() {

      var innermostIntersecting = false,
        thisSortable = this;

      //Copy over some variables to allow calling the sortable's native _intersectsWith
      this.instance.positionAbs = inst.positionAbs;
      this.instance.helperProportions = inst.helperProportions;
      this.instance.offset.click = inst.offset.click;

      if(this.instance._intersectsWith(this.instance.containerCache)) {
        innermostIntersecting = true;
        $.each(inst.sortables, function () {
          this.instance.positionAbs = inst.positionAbs;
          this.instance.helperProportions = inst.helperProportions;
          this.instance.offset.click = inst.offset.click;
          if (this !== thisSortable &&
            this.instance._intersectsWith(this.instance.containerCache) &&
            $.contains(thisSortable.instance.element[0], this.instance.element[0])
          ) {
            innermostIntersecting = false;
          }
          return innermostIntersecting;
        });
      }


      if(innermostIntersecting) {
        //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
        if(!this.instance.isOver) {

          this.instance.isOver = 1;
          //Now we fake the start of dragging for the sortable instance,
          //by cloning the list group item, appending it to the sortable and using it as inst.currentItem
          //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
          this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
          this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
          this.instance.options.helper = function() { return ui.helper[0]; };

          event.target = this.instance.currentItem[0];
          this.instance._mouseCapture(event, true);
          this.instance._mouseStart(event, true, true);

          //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
          this.instance.offset.click.top = inst.offset.click.top;
          this.instance.offset.click.left = inst.offset.click.left;
          this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
          this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

          inst._trigger("toSortable", event);
          inst.dropped = this.instance.element; //draggable revert needs that
          //hack so receive/update callbacks work (mostly)
          inst.currentItem = inst.element;
          this.instance.fromOutside = inst;

        }

        //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
        if(this.instance.currentItem) {
          this.instance._mouseDrag(event);
        }

      } else {

        //If it doesn't intersect with the sortable, and it intersected before,
        //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
        if(this.instance.isOver) {

          this.instance.isOver = 0;
          this.instance.cancelHelperRemoval = true;

          //Prevent reverting on this forced stop
          this.instance.options.revert = false;

          // The out event needs to be triggered independently
          this.instance._trigger("out", event, this.instance._uiHash(this.instance));

          this.instance._mouseStop(event, true);
          this.instance.options.helper = this.instance.options._helper;

          //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
          this.instance.currentItem.remove();
          if(this.instance.placeholder) {
            this.instance.placeholder.remove();
          }

          inst._trigger("fromSortable", event);
          inst.dropped = false; //draggable revert needs that
        }

      }

    });

  }
});

$.ui.plugin.add("draggable", "cursor", {
  start: function() {
    var t = $("body"), o = $(this).data("ui-draggable").options;
    if (t.css("cursor")) {
      o._cursor = t.css("cursor");
    }
    t.css("cursor", o.cursor);
  },
  stop: function() {
    var o = $(this).data("ui-draggable").options;
    if (o._cursor) {
      $("body").css("cursor", o._cursor);
    }
  }
});

$.ui.plugin.add("draggable", "opacity", {
  start: function(event, ui) {
    var t = $(ui.helper), o = $(this).data("ui-draggable").options;
    if(t.css("opacity")) {
      o._opacity = t.css("opacity");
    }
    t.css("opacity", o.opacity);
  },
  stop: function(event, ui) {
    var o = $(this).data("ui-draggable").options;
    if(o._opacity) {
      $(ui.helper).css("opacity", o._opacity);
    }
  }
});

$.ui.plugin.add("draggable", "scroll", {
  start: function() {
    var i = $(this).data("ui-draggable");
    if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
      i.overflowOffset = i.scrollParent.offset();
    }
  },
  drag: function( event ) {

    var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;

    if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {

      if(!o.axis || o.axis !== "x") {
        if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
          i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
        } else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
          i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
        }
      }

      if(!o.axis || o.axis !== "y") {
        if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
          i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
        } else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
          i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
        }
      }

    } else {

      if(!o.axis || o.axis !== "x") {
        if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
          scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
        } else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
          scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
        }
      }

      if(!o.axis || o.axis !== "y") {
        if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
          scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
        } else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
          scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
        }
      }

    }

    if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
      $.ui.ddmanager.prepareOffsets(i, event);
    }

  }
});

$.ui.plugin.add("draggable", "snap", {
  start: function() {

    var i = $(this).data("ui-draggable"),
      o = i.options;

    i.snapElements = [];

    $(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
      var $t = $(this),
        $o = $t.offset();
      if(this !== i.element[0]) {
        i.snapElements.push({
          item: this,
          width: $t.outerWidth(), height: $t.outerHeight(),
          top: $o.top, left: $o.left
        });
      }
    });

  },
  drag: function(event, ui) {

    var ts, bs, ls, rs, l, r, t, b, i, first,
      inst = $(this).data("ui-draggable"),
      o = inst.options,
      d = o.snapTolerance,
      x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
      y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

    for (i = inst.snapElements.length - 1; i >= 0; i--){

      l = inst.snapElements[i].left;
      r = l + inst.snapElements[i].width;
      t = inst.snapElements[i].top;
      b = t + inst.snapElements[i].height;

      if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
        if(inst.snapElements[i].snapping) {
          (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
        }
        inst.snapElements[i].snapping = false;
        continue;
      }

      if(o.snapMode !== "inner") {
        ts = Math.abs(t - y2) <= d;
        bs = Math.abs(b - y1) <= d;
        ls = Math.abs(l - x2) <= d;
        rs = Math.abs(r - x1) <= d;
        if(ts) {
          ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
        }
        if(bs) {
          ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
        }
        if(ls) {
          ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
        }
        if(rs) {
          ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
        }
      }

      first = (ts || bs || ls || rs);

      if(o.snapMode !== "outer") {
        ts = Math.abs(t - y1) <= d;
        bs = Math.abs(b - y2) <= d;
        ls = Math.abs(l - x1) <= d;
        rs = Math.abs(r - x2) <= d;
        if(ts) {
          ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
        }
        if(bs) {
          ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
        }
        if(ls) {
          ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
        }
        if(rs) {
          ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
        }
      }

      if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
        (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
      }
      inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

    }

  }
});

$.ui.plugin.add("draggable", "stack", {
  start: function() {
    var min,
      o = this.data("ui-draggable").options,
      group = $.makeArray($(o.stack)).sort(function(a,b) {
        return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
      });

    if (!group.length) { return; }

    min = parseInt($(group[0]).css("zIndex"), 10) || 0;
    $(group).each(function(i) {
      $(this).css("zIndex", min + i);
    });
    this.css("zIndex", (min + group.length));
  }
});

$.ui.plugin.add("draggable", "zIndex", {
  start: function(event, ui) {
    var t = $(ui.helper), o = $(this).data("ui-draggable").options;
    if(t.css("zIndex")) {
      o._zIndex = t.css("zIndex");
    }
    t.css("zIndex", o.zIndex);
  },
  stop: function(event, ui) {
    var o = $(this).data("ui-draggable").options;
    if(o._zIndex) {
      $(ui.helper).css("zIndex", o._zIndex);
    }
  }
});

})(jQuery);
(function( $, undefined ) {

function isOverAxis( x, reference, size ) {
  return ( x > reference ) && ( x < ( reference + size ) );
}

$.widget("ui.droppable", {
  version: "1.10.4",
  widgetEventPrefix: "drop",
  options: {
    accept: "*",
    activeClass: false,
    addClasses: true,
    greedy: false,
    hoverClass: false,
    scope: "default",
    tolerance: "intersect",

    // callbacks
    activate: null,
    deactivate: null,
    drop: null,
    out: null,
    over: null
  },
  _create: function() {

    var proportions,
      o = this.options,
      accept = o.accept;

    this.isover = false;
    this.isout = true;

    this.accept = $.isFunction(accept) ? accept : function(d) {
      return d.is(accept);
    };

    this.proportions = function( /* valueToWrite */ ) {
      if ( arguments.length ) {
        // Store the droppable's proportions
        proportions = arguments[ 0 ];
      } else {
        // Retrieve or derive the droppable's proportions
        return proportions ?
          proportions :
          proportions = {
            width: this.element[ 0 ].offsetWidth,
            height: this.element[ 0 ].offsetHeight
          };
      }
    };

    // Add the reference and positions to the manager
    $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
    $.ui.ddmanager.droppables[o.scope].push(this);

    (o.addClasses && this.element.addClass("ui-droppable"));

  },

  _destroy: function() {
    var i = 0,
      drop = $.ui.ddmanager.droppables[this.options.scope];

    for ( ; i < drop.length; i++ ) {
      if ( drop[i] === this ) {
        drop.splice(i, 1);
      }
    }

    this.element.removeClass("ui-droppable ui-droppable-disabled");
  },

  _setOption: function(key, value) {

    if(key === "accept") {
      this.accept = $.isFunction(value) ? value : function(d) {
        return d.is(value);
      };
    }
    $.Widget.prototype._setOption.apply(this, arguments);
  },

  _activate: function(event) {
    var draggable = $.ui.ddmanager.current;
    if(this.options.activeClass) {
      this.element.addClass(this.options.activeClass);
    }
    if(draggable){
      this._trigger("activate", event, this.ui(draggable));
    }
  },

  _deactivate: function(event) {
    var draggable = $.ui.ddmanager.current;
    if(this.options.activeClass) {
      this.element.removeClass(this.options.activeClass);
    }
    if(draggable){
      this._trigger("deactivate", event, this.ui(draggable));
    }
  },

  _over: function(event) {

    var draggable = $.ui.ddmanager.current;

    // Bail if draggable and droppable are same element
    if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
      return;
    }

    if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
      if(this.options.hoverClass) {
        this.element.addClass(this.options.hoverClass);
      }
      this._trigger("over", event, this.ui(draggable));
    }

  },

  _out: function(event) {

    var draggable = $.ui.ddmanager.current;

    // Bail if draggable and droppable are same element
    if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
      return;
    }

    if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
      if(this.options.hoverClass) {
        this.element.removeClass(this.options.hoverClass);
      }
      this._trigger("out", event, this.ui(draggable));
    }

  },

  _drop: function(event,custom) {

    var draggable = custom || $.ui.ddmanager.current,
      childrenIntersection = false;

    // Bail if draggable and droppable are same element
    if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
      return false;
    }

    this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
      var inst = $.data(this, "ui-droppable");
      if(
        inst.options.greedy &&
        !inst.options.disabled &&
        inst.options.scope === draggable.options.scope &&
        inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
        $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
      ) { childrenIntersection = true; return false; }
    });
    if(childrenIntersection) {
      return false;
    }

    if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
      if(this.options.activeClass) {
        this.element.removeClass(this.options.activeClass);
      }
      if(this.options.hoverClass) {
        this.element.removeClass(this.options.hoverClass);
      }
      this._trigger("drop", event, this.ui(draggable));
      return this.element;
    }

    return false;

  },

  ui: function(c) {
    return {
      draggable: (c.currentItem || c.element),
      helper: c.helper,
      position: c.position,
      offset: c.positionAbs
    };
  }

});

$.ui.intersect = function(draggable, droppable, toleranceMode) {

  if (!droppable.offset) {
    return false;
  }

  var draggableLeft, draggableTop,
    x1 = (draggable.positionAbs || draggable.position.absolute).left,
    y1 = (draggable.positionAbs || draggable.position.absolute).top,
    x2 = x1 + draggable.helperProportions.width,
    y2 = y1 + draggable.helperProportions.height,
    l = droppable.offset.left,
    t = droppable.offset.top,
    r = l + droppable.proportions().width,
    b = t + droppable.proportions().height;

  switch (toleranceMode) {
    case "fit":
      return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
    case "intersect":
      return (l < x1 + (draggable.helperProportions.width / 2) && // Right Half
        x2 - (draggable.helperProportions.width / 2) < r && // Left Half
        t < y1 + (draggable.helperProportions.height / 2) && // Bottom Half
        y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
    case "pointer":
      draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left);
      draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top);
      return isOverAxis( draggableTop, t, droppable.proportions().height ) && isOverAxis( draggableLeft, l, droppable.proportions().width );
    case "touch":
      return (
        (y1 >= t && y1 <= b) || // Top edge touching
        (y2 >= t && y2 <= b) || // Bottom edge touching
        (y1 < t && y2 > b)    // Surrounded vertically
      ) && (
        (x1 >= l && x1 <= r) || // Left edge touching
        (x2 >= l && x2 <= r) || // Right edge touching
        (x1 < l && x2 > r)    // Surrounded horizontally
      );
    default:
      return false;
    }

};

/*
  This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
  current: null,
  droppables: { "default": [] },
  prepareOffsets: function(t, event) {

    var i, j,
      m = $.ui.ddmanager.droppables[t.options.scope] || [],
      type = event ? event.type : null, // workaround for #2317
      list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();

    droppablesLoop: for (i = 0; i < m.length; i++) {

      //No disabled and non-accepted
      if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
        continue;
      }

      // Filter out elements in the current dragged item
      for (j=0; j < list.length; j++) {
        if(list[j] === m[i].element[0]) {
          m[i].proportions().height = 0;
          continue droppablesLoop;
        }
      }

      m[i].visible = m[i].element.css("display") !== "none";
      if(!m[i].visible) {
        continue;
      }

      //Activate the droppable if used directly from draggables
      if(type === "mousedown") {
        m[i]._activate.call(m[i], event);
      }

      m[ i ].offset = m[ i ].element.offset();
      m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });

    }

  },
  drop: function(draggable, event) {

    var dropped = false;
    // Create a copy of the droppables in case the list changes during the drop (#9116)
    $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {

      if(!this.options) {
        return;
      }
      if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {
        dropped = this._drop.call(this, event) || dropped;
      }

      if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
        this.isout = true;
        this.isover = false;
        this._deactivate.call(this, event);
      }

    });
    return dropped;

  },
  dragStart: function( draggable, event ) {
    //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
    draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
      if( !draggable.options.refreshPositions ) {
        $.ui.ddmanager.prepareOffsets( draggable, event );
      }
    });
  },
  drag: function(draggable, event) {

    //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
    if(draggable.options.refreshPositions) {
      $.ui.ddmanager.prepareOffsets(draggable, event);
    }

    //Run through all droppables and check their positions based on specific tolerance options
    $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

      if(this.options.disabled || this.greedyChild || !this.visible) {
        return;
      }

      var parentInstance, scope, parent,
        intersects = $.ui.intersect(draggable, this, this.options.tolerance),
        c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
      if(!c) {
        return;
      }

      if (this.options.greedy) {
        // find droppable parents with same scope
        scope = this.options.scope;
        parent = this.element.parents(":data(ui-droppable)").filter(function () {
          return $.data(this, "ui-droppable").options.scope === scope;
        });

        if (parent.length) {
          parentInstance = $.data(parent[0], "ui-droppable");
          parentInstance.greedyChild = (c === "isover");
        }
      }

      // we just moved into a greedy child
      if (parentInstance && c === "isover") {
        parentInstance.isover = false;
        parentInstance.isout = true;
        parentInstance._out.call(parentInstance, event);
      }

      this[c] = true;
      this[c === "isout" ? "isover" : "isout"] = false;
      this[c === "isover" ? "_over" : "_out"].call(this, event);

      // we just moved out of a greedy child
      if (parentInstance && c === "isout") {
        parentInstance.isout = false;
        parentInstance.isover = true;
        parentInstance._over.call(parentInstance, event);
      }
    });

  },
  dragStop: function( draggable, event ) {
    draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
    //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
    if( !draggable.options.refreshPositions ) {
      $.ui.ddmanager.prepareOffsets( draggable, event );
    }
  }
};

})(jQuery);
(function($, undefined) {

var dataSpace = "ui-effects-";

$.effects = {
  effect: {}
};

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
(function( jQuery, undefined ) {

  var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

  // plusequals test for += 100 -= 100
  rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
  // a set of RE's that can match strings and generate color tuples.
  stringParsers = [{
      re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function( execResult ) {
        return [
          execResult[ 1 ],
          execResult[ 2 ],
          execResult[ 3 ],
          execResult[ 4 ]
        ];
      }
    }, {
      re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function( execResult ) {
        return [
          execResult[ 1 ] * 2.55,
          execResult[ 2 ] * 2.55,
          execResult[ 3 ] * 2.55,
          execResult[ 4 ]
        ];
      }
    }, {
      // this regex ignores A-F because it's compared against an already lowercased string
      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
      parse: function( execResult ) {
        return [
          parseInt( execResult[ 1 ], 16 ),
          parseInt( execResult[ 2 ], 16 ),
          parseInt( execResult[ 3 ], 16 )
        ];
      }
    }, {
      // this regex ignores A-F because it's compared against an already lowercased string
      re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
      parse: function( execResult ) {
        return [
          parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
          parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
          parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
        ];
      }
    }, {
      re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      space: "hsla",
      parse: function( execResult ) {
        return [
          execResult[ 1 ],
          execResult[ 2 ] / 100,
          execResult[ 3 ] / 100,
          execResult[ 4 ]
        ];
      }
    }],

  // jQuery.Color( )
  color = jQuery.Color = function( color, green, blue, alpha ) {
    return new jQuery.Color.fn.parse( color, green, blue, alpha );
  },
  spaces = {
    rgba: {
      props: {
        red: {
          idx: 0,
          type: "byte"
        },
        green: {
          idx: 1,
          type: "byte"
        },
        blue: {
          idx: 2,
          type: "byte"
        }
      }
    },

    hsla: {
      props: {
        hue: {
          idx: 0,
          type: "degrees"
        },
        saturation: {
          idx: 1,
          type: "percent"
        },
        lightness: {
          idx: 2,
          type: "percent"
        }
      }
    }
  },
  propTypes = {
    "byte": {
      floor: true,
      max: 255
    },
    "percent": {
      max: 1
    },
    "degrees": {
      mod: 360,
      floor: true
    }
  },
  support = color.support = {},

  // element for support tests
  supportElem = jQuery( "<p>" )[ 0 ],

  // colors = jQuery.Color.names
  colors,

  // local aliases of functions called often
  each = jQuery.each;

// determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
  space.cache = "_" + spaceName;
  space.props.alpha = {
    idx: 3,
    type: "percent",
    def: 1
  };
});

function clamp( value, prop, allowEmpty ) {
  var type = propTypes[ prop.type ] || {};

  if ( value == null ) {
    return (allowEmpty || !prop.def) ? null : prop.def;
  }

  // ~~ is an short way of doing floor for positive numbers
  value = type.floor ? ~~value : parseFloat( value );

  // IE will pass in empty strings as value for alpha,
  // which will hit this case
  if ( isNaN( value ) ) {
    return prop.def;
  }

  if ( type.mod ) {
    // we add mod before modding to make sure that negatives values
    // get converted properly: -10 -> 350
    return (value + type.mod) % type.mod;
  }

  // for now all property types without mod have min and max
  return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
  var inst = color(),
    rgba = inst._rgba = [];

  string = string.toLowerCase();

  each( stringParsers, function( i, parser ) {
    var parsed,
      match = parser.re.exec( string ),
      values = match && parser.parse( match ),
      spaceName = parser.space || "rgba";

    if ( values ) {
      parsed = inst[ spaceName ]( values );

      // if this was an rgba parse the assignment might happen twice
      // oh well....
      inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
      rgba = inst._rgba = parsed._rgba;

      // exit each( stringParsers ) here because we matched
      return false;
    }
  });

  // Found a stringParser that handled it
  if ( rgba.length ) {

    // if this came from a parsed string, force "transparent" when alpha is 0
    // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
    if ( rgba.join() === "0,0,0,0" ) {
      jQuery.extend( rgba, colors.transparent );
    }
    return inst;
  }

  // named colors
  return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
  parse: function( red, green, blue, alpha ) {
    if ( red === undefined ) {
      this._rgba = [ null, null, null, null ];
      return this;
    }
    if ( red.jquery || red.nodeType ) {
      red = jQuery( red ).css( green );
      green = undefined;
    }

    var inst = this,
      type = jQuery.type( red ),
      rgba = this._rgba = [];

    // more than 1 argument specified - assume ( red, green, blue, alpha )
    if ( green !== undefined ) {
      red = [ red, green, blue, alpha ];
      type = "array";
    }

    if ( type === "string" ) {
      return this.parse( stringParse( red ) || colors._default );
    }

    if ( type === "array" ) {
      each( spaces.rgba.props, function( key, prop ) {
        rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
      });
      return this;
    }

    if ( type === "object" ) {
      if ( red instanceof color ) {
        each( spaces, function( spaceName, space ) {
          if ( red[ space.cache ] ) {
            inst[ space.cache ] = red[ space.cache ].slice();
          }
        });
      } else {
        each( spaces, function( spaceName, space ) {
          var cache = space.cache;
          each( space.props, function( key, prop ) {

            // if the cache doesn't exist, and we know how to convert
            if ( !inst[ cache ] && space.to ) {

              // if the value was null, we don't need to copy it
              // if the key was alpha, we don't need to copy it either
              if ( key === "alpha" || red[ key ] == null ) {
                return;
              }
              inst[ cache ] = space.to( inst._rgba );
            }

            // this is the only case where we allow nulls for ALL properties.
            // call clamp with alwaysAllowEmpty
            inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
          });

          // everything defined but alpha?
          if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
            // use the default of 1
            inst[ cache ][ 3 ] = 1;
            if ( space.from ) {
              inst._rgba = space.from( inst[ cache ] );
            }
          }
        });
      }
      return this;
    }
  },
  is: function( compare ) {
    var is = color( compare ),
      same = true,
      inst = this;

    each( spaces, function( _, space ) {
      var localCache,
        isCache = is[ space.cache ];
      if (isCache) {
        localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
        each( space.props, function( _, prop ) {
          if ( isCache[ prop.idx ] != null ) {
            same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
            return same;
          }
        });
      }
      return same;
    });
    return same;
  },
  _space: function() {
    var used = [],
      inst = this;
    each( spaces, function( spaceName, space ) {
      if ( inst[ space.cache ] ) {
        used.push( spaceName );
      }
    });
    return used.pop();
  },
  transition: function( other, distance ) {
    var end = color( other ),
      spaceName = end._space(),
      space = spaces[ spaceName ],
      startColor = this.alpha() === 0 ? color( "transparent" ) : this,
      start = startColor[ space.cache ] || space.to( startColor._rgba ),
      result = start.slice();

    end = end[ space.cache ];
    each( space.props, function( key, prop ) {
      var index = prop.idx,
        startValue = start[ index ],
        endValue = end[ index ],
        type = propTypes[ prop.type ] || {};

      // if null, don't override start value
      if ( endValue === null ) {
        return;
      }
      // if null - use end
      if ( startValue === null ) {
        result[ index ] = endValue;
      } else {
        if ( type.mod ) {
          if ( endValue - startValue > type.mod / 2 ) {
            startValue += type.mod;
          } else if ( startValue - endValue > type.mod / 2 ) {
            startValue -= type.mod;
          }
        }
        result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
      }
    });
    return this[ spaceName ]( result );
  },
  blend: function( opaque ) {
    // if we are already opaque - return ourself
    if ( this._rgba[ 3 ] === 1 ) {
      return this;
    }

    var rgb = this._rgba.slice(),
      a = rgb.pop(),
      blend = color( opaque )._rgba;

    return color( jQuery.map( rgb, function( v, i ) {
      return ( 1 - a ) * blend[ i ] + a * v;
    }));
  },
  toRgbaString: function() {
    var prefix = "rgba(",
      rgba = jQuery.map( this._rgba, function( v, i ) {
        return v == null ? ( i > 2 ? 1 : 0 ) : v;
      });

    if ( rgba[ 3 ] === 1 ) {
      rgba.pop();
      prefix = "rgb(";
    }

    return prefix + rgba.join() + ")";
  },
  toHslaString: function() {
    var prefix = "hsla(",
      hsla = jQuery.map( this.hsla(), function( v, i ) {
        if ( v == null ) {
          v = i > 2 ? 1 : 0;
        }

        // catch 1 and 2
        if ( i && i < 3 ) {
          v = Math.round( v * 100 ) + "%";
        }
        return v;
      });

    if ( hsla[ 3 ] === 1 ) {
      hsla.pop();
      prefix = "hsl(";
    }
    return prefix + hsla.join() + ")";
  },
  toHexString: function( includeAlpha ) {
    var rgba = this._rgba.slice(),
      alpha = rgba.pop();

    if ( includeAlpha ) {
      rgba.push( ~~( alpha * 255 ) );
    }

    return "#" + jQuery.map( rgba, function( v ) {

      // default to 0 when nulls exist
      v = ( v || 0 ).toString( 16 );
      return v.length === 1 ? "0" + v : v;
    }).join("");
  },
  toString: function() {
    return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
  }
});
color.fn.parse.prototype = color.fn;

// hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
  h = ( h + 1 ) % 1;
  if ( h * 6 < 1 ) {
    return p + (q - p) * h * 6;
  }
  if ( h * 2 < 1) {
    return q;
  }
  if ( h * 3 < 2 ) {
    return p + (q - p) * ((2/3) - h) * 6;
  }
  return p;
}

spaces.hsla.to = function ( rgba ) {
  if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
    return [ null, null, null, rgba[ 3 ] ];
  }
  var r = rgba[ 0 ] / 255,
    g = rgba[ 1 ] / 255,
    b = rgba[ 2 ] / 255,
    a = rgba[ 3 ],
    max = Math.max( r, g, b ),
    min = Math.min( r, g, b ),
    diff = max - min,
    add = max + min,
    l = add * 0.5,
    h, s;

  if ( min === max ) {
    h = 0;
  } else if ( r === max ) {
    h = ( 60 * ( g - b ) / diff ) + 360;
  } else if ( g === max ) {
    h = ( 60 * ( b - r ) / diff ) + 120;
  } else {
    h = ( 60 * ( r - g ) / diff ) + 240;
  }

  // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
  // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
  if ( diff === 0 ) {
    s = 0;
  } else if ( l <= 0.5 ) {
    s = diff / add;
  } else {
    s = diff / ( 2 - add );
  }
  return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function ( hsla ) {
  if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
    return [ null, null, null, hsla[ 3 ] ];
  }
  var h = hsla[ 0 ] / 360,
    s = hsla[ 1 ],
    l = hsla[ 2 ],
    a = hsla[ 3 ],
    q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
    p = 2 * l - q;

  return [
    Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
    Math.round( hue2rgb( p, q, h ) * 255 ),
    Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
    a
  ];
};


each( spaces, function( spaceName, space ) {
  var props = space.props,
    cache = space.cache,
    to = space.to,
    from = space.from;

  // makes rgba() and hsla()
  color.fn[ spaceName ] = function( value ) {

    // generate a cache for this space if it doesn't exist
    if ( to && !this[ cache ] ) {
      this[ cache ] = to( this._rgba );
    }
    if ( value === undefined ) {
      return this[ cache ].slice();
    }

    var ret,
      type = jQuery.type( value ),
      arr = ( type === "array" || type === "object" ) ? value : arguments,
      local = this[ cache ].slice();

    each( props, function( key, prop ) {
      var val = arr[ type === "object" ? key : prop.idx ];
      if ( val == null ) {
        val = local[ prop.idx ];
      }
      local[ prop.idx ] = clamp( val, prop );
    });

    if ( from ) {
      ret = color( from( local ) );
      ret[ cache ] = local;
      return ret;
    } else {
      return color( local );
    }
  };

  // makes red() green() blue() alpha() hue() saturation() lightness()
  each( props, function( key, prop ) {
    // alpha is included in more than one space
    if ( color.fn[ key ] ) {
      return;
    }
    color.fn[ key ] = function( value ) {
      var vtype = jQuery.type( value ),
        fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
        local = this[ fn ](),
        cur = local[ prop.idx ],
        match;

      if ( vtype === "undefined" ) {
        return cur;
      }

      if ( vtype === "function" ) {
        value = value.call( this, cur );
        vtype = jQuery.type( value );
      }
      if ( value == null && prop.empty ) {
        return this;
      }
      if ( vtype === "string" ) {
        match = rplusequals.exec( value );
        if ( match ) {
          value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
        }
      }
      local[ prop.idx ] = value;
      return this[ fn ]( local );
    };
  });
});

// add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
  var hooks = hook.split( " " );
  each( hooks, function( i, hook ) {
    jQuery.cssHooks[ hook ] = {
      set: function( elem, value ) {
        var parsed, curElem,
          backgroundColor = "";

        if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
          value = color( parsed || value );
          if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
            curElem = hook === "backgroundColor" ? elem.parentNode : elem;
            while (
              (backgroundColor === "" || backgroundColor === "transparent") &&
              curElem && curElem.style
            ) {
              try {
                backgroundColor = jQuery.css( curElem, "backgroundColor" );
                curElem = curElem.parentNode;
              } catch ( e ) {
              }
            }

            value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
              backgroundColor :
              "_default" );
          }

          value = value.toRgbaString();
        }
        try {
          elem.style[ hook ] = value;
        } catch( e ) {
          // wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
        }
      }
    };
    jQuery.fx.step[ hook ] = function( fx ) {
      if ( !fx.colorInit ) {
        fx.start = color( fx.elem, hook );
        fx.end = color( fx.end );
        fx.colorInit = true;
      }
      jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
    };
  });

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
  expand: function( value ) {
    var expanded = {};

    each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
      expanded[ "border" + part + "Color" ] = value;
    });
    return expanded;
  }
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {
  // 4.1. Basic color keywords
  aqua: "#00ffff",
  black: "#000000",
  blue: "#0000ff",
  fuchsia: "#ff00ff",
  gray: "#808080",
  green: "#008000",
  lime: "#00ff00",
  maroon: "#800000",
  navy: "#000080",
  olive: "#808000",
  purple: "#800080",
  red: "#ff0000",
  silver: "#c0c0c0",
  teal: "#008080",
  white: "#ffffff",
  yellow: "#ffff00",

  // 4.2.3. "transparent" color keyword
  transparent: [ null, null, null, 0 ],

  _default: "#ffffff"
};

})( jQuery );


/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
(function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
  shorthandStyles = {
    border: 1,
    borderBottom: 1,
    borderColor: 1,
    borderLeft: 1,
    borderRight: 1,
    borderTop: 1,
    borderWidth: 1,
    margin: 1,
    padding: 1
  };

$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
  $.fx.step[ prop ] = function( fx ) {
    if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
      jQuery.style( fx.elem, prop, fx.end );
      fx.setAttr = true;
    }
  };
});

function getElementStyles( elem ) {
  var key, len,
    style = elem.ownerDocument.defaultView ?
      elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
      elem.currentStyle,
    styles = {};

  if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
    len = style.length;
    while ( len-- ) {
      key = style[ len ];
      if ( typeof style[ key ] === "string" ) {
        styles[ $.camelCase( key ) ] = style[ key ];
      }
    }
  // support: Opera, IE <9
  } else {
    for ( key in style ) {
      if ( typeof style[ key ] === "string" ) {
        styles[ key ] = style[ key ];
      }
    }
  }

  return styles;
}


function styleDifference( oldStyle, newStyle ) {
  var diff = {},
    name, value;

  for ( name in newStyle ) {
    value = newStyle[ name ];
    if ( oldStyle[ name ] !== value ) {
      if ( !shorthandStyles[ name ] ) {
        if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
          diff[ name ] = value;
        }
      }
    }
  }

  return diff;
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
  $.fn.addBack = function( selector ) {
    return this.add( selector == null ?
      this.prevObject : this.prevObject.filter( selector )
    );
  };
}

$.effects.animateClass = function( value, duration, easing, callback ) {
  var o = $.speed( duration, easing, callback );

  return this.queue( function() {
    var animated = $( this ),
      baseClass = animated.attr( "class" ) || "",
      applyClassChange,
      allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

    // map the animated objects to store the original styles.
    allAnimations = allAnimations.map(function() {
      var el = $( this );
      return {
        el: el,
        start: getElementStyles( this )
      };
    });

    // apply class change
    applyClassChange = function() {
      $.each( classAnimationActions, function(i, action) {
        if ( value[ action ] ) {
          animated[ action + "Class" ]( value[ action ] );
        }
      });
    };
    applyClassChange();

    // map all animated objects again - calculate new styles and diff
    allAnimations = allAnimations.map(function() {
      this.end = getElementStyles( this.el[ 0 ] );
      this.diff = styleDifference( this.start, this.end );
      return this;
    });

    // apply original class
    animated.attr( "class", baseClass );

    // map all animated objects again - this time collecting a promise
    allAnimations = allAnimations.map(function() {
      var styleInfo = this,
        dfd = $.Deferred(),
        opts = $.extend({}, o, {
          queue: false,
          complete: function() {
            dfd.resolve( styleInfo );
          }
        });

      this.el.animate( this.diff, opts );
      return dfd.promise();
    });

    // once all animations have completed:
    $.when.apply( $, allAnimations.get() ).done(function() {

      // set the final class
      applyClassChange();

      // for each animated element,
      // clear all css properties that were animated
      $.each( arguments, function() {
        var el = this.el;
        $.each( this.diff, function(key) {
          el.css( key, "" );
        });
      });

      // this is guarnteed to be there if you use jQuery.speed()
      // it also handles dequeuing the next anim...
      o.complete.call( animated[ 0 ] );
    });
  });
};

$.fn.extend({
  addClass: (function( orig ) {
    return function( classNames, speed, easing, callback ) {
      return speed ?
        $.effects.animateClass.call( this,
          { add: classNames }, speed, easing, callback ) :
        orig.apply( this, arguments );
    };
  })( $.fn.addClass ),

  removeClass: (function( orig ) {
    return function( classNames, speed, easing, callback ) {
      return arguments.length > 1 ?
        $.effects.animateClass.call( this,
          { remove: classNames }, speed, easing, callback ) :
        orig.apply( this, arguments );
    };
  })( $.fn.removeClass ),

  toggleClass: (function( orig ) {
    return function( classNames, force, speed, easing, callback ) {
      if ( typeof force === "boolean" || force === undefined ) {
        if ( !speed ) {
          // without speed parameter
          return orig.apply( this, arguments );
        } else {
          return $.effects.animateClass.call( this,
            (force ? { add: classNames } : { remove: classNames }),
            speed, easing, callback );
        }
      } else {
        // without force parameter
        return $.effects.animateClass.call( this,
          { toggle: classNames }, force, speed, easing );
      }
    };
  })( $.fn.toggleClass ),

  switchClass: function( remove, add, speed, easing, callback) {
    return $.effects.animateClass.call( this, {
      add: add,
      remove: remove
    }, speed, easing, callback );
  }
});

})();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

(function() {

$.extend( $.effects, {
  version: "1.10.4",

  // Saves a set of properties in a data storage
  save: function( element, set ) {
    for( var i=0; i < set.length; i++ ) {
      if ( set[ i ] !== null ) {
        element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
      }
    }
  },

  // Restores a set of previously saved properties from a data storage
  restore: function( element, set ) {
    var val, i;
    for( i=0; i < set.length; i++ ) {
      if ( set[ i ] !== null ) {
        val = element.data( dataSpace + set[ i ] );
        // support: jQuery 1.6.2
        // http://bugs.jquery.com/ticket/9917
        // jQuery 1.6.2 incorrectly returns undefined for any falsy value.
        // We can't differentiate between "" and 0 here, so we just assume
        // empty string since it's likely to be a more common value...
        if ( val === undefined ) {
          val = "";
        }
        element.css( set[ i ], val );
      }
    }
  },

  setMode: function( el, mode ) {
    if (mode === "toggle") {
      mode = el.is( ":hidden" ) ? "show" : "hide";
    }
    return mode;
  },

  // Translates a [top,left] array into a baseline value
  // this should be a little more flexible in the future to handle a string & hash
  getBaseline: function( origin, original ) {
    var y, x;
    switch ( origin[ 0 ] ) {
      case "top": y = 0; break;
      case "middle": y = 0.5; break;
      case "bottom": y = 1; break;
      default: y = origin[ 0 ] / original.height;
    }
    switch ( origin[ 1 ] ) {
      case "left": x = 0; break;
      case "center": x = 0.5; break;
      case "right": x = 1; break;
      default: x = origin[ 1 ] / original.width;
    }
    return {
      x: x,
      y: y
    };
  },

  // Wraps the element around a wrapper that copies position properties
  createWrapper: function( element ) {

    // if the element is already wrapped, return it
    if ( element.parent().is( ".ui-effects-wrapper" )) {
      return element.parent();
    }

    // wrap the element
    var props = {
        width: element.outerWidth(true),
        height: element.outerHeight(true),
        "float": element.css( "float" )
      },
      wrapper = $( "<div></div>" )
        .addClass( "ui-effects-wrapper" )
        .css({
          fontSize: "100%",
          background: "transparent",
          border: "none",
          margin: 0,
          padding: 0
        }),
      // Store the size in case width/height are defined in % - Fixes #5245
      size = {
        width: element.width(),
        height: element.height()
      },
      active = document.activeElement;

    // support: Firefox
    // Firefox incorrectly exposes anonymous content
    // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
    try {
      active.id;
    } catch( e ) {
      active = document.body;
    }

    element.wrap( wrapper );

    // Fixes #7595 - Elements lose focus when wrapped.
    if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
      $( active ).focus();
    }

    wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

    // transfer positioning properties to the wrapper
    if ( element.css( "position" ) === "static" ) {
      wrapper.css({ position: "relative" });
      element.css({ position: "relative" });
    } else {
      $.extend( props, {
        position: element.css( "position" ),
        zIndex: element.css( "z-index" )
      });
      $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
        props[ pos ] = element.css( pos );
        if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
          props[ pos ] = "auto";
        }
      });
      element.css({
        position: "relative",
        top: 0,
        left: 0,
        right: "auto",
        bottom: "auto"
      });
    }
    element.css(size);

    return wrapper.css( props ).show();
  },

  removeWrapper: function( element ) {
    var active = document.activeElement;

    if ( element.parent().is( ".ui-effects-wrapper" ) ) {
      element.parent().replaceWith( element );

      // Fixes #7595 - Elements lose focus when wrapped.
      if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
        $( active ).focus();
      }
    }


    return element;
  },

  setTransition: function( element, list, factor, value ) {
    value = value || {};
    $.each( list, function( i, x ) {
      var unit = element.cssUnit( x );
      if ( unit[ 0 ] > 0 ) {
        value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
      }
    });
    return value;
  }
});

// return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

  // allow passing all options as the first parameter
  if ( $.isPlainObject( effect ) ) {
    options = effect;
    effect = effect.effect;
  }

  // convert to an object
  effect = { effect: effect };

  // catch (effect, null, ...)
  if ( options == null ) {
    options = {};
  }

  // catch (effect, callback)
  if ( $.isFunction( options ) ) {
    callback = options;
    speed = null;
    options = {};
  }

  // catch (effect, speed, ?)
  if ( typeof options === "number" || $.fx.speeds[ options ] ) {
    callback = speed;
    speed = options;
    options = {};
  }

  // catch (effect, options, callback)
  if ( $.isFunction( speed ) ) {
    callback = speed;
    speed = null;
  }

  // add options to effect
  if ( options ) {
    $.extend( effect, options );
  }

  speed = speed || options.duration;
  effect.duration = $.fx.off ? 0 :
    typeof speed === "number" ? speed :
    speed in $.fx.speeds ? $.fx.speeds[ speed ] :
    $.fx.speeds._default;

  effect.complete = callback || options.complete;

  return effect;
}

function standardAnimationOption( option ) {
  // Valid standard speeds (nothing, number, named speed)
  if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
    return true;
  }

  // Invalid strings - treat as "normal" speed
  if ( typeof option === "string" && !$.effects.effect[ option ] ) {
    return true;
  }

  // Complete callback
  if ( $.isFunction( option ) ) {
    return true;
  }

  // Options hash (but not naming an effect)
  if ( typeof option === "object" && !option.effect ) {
    return true;
  }

  // Didn't match any standard API
  return false;
}

$.fn.extend({
  effect: function( /* effect, options, speed, callback */ ) {
    var args = _normalizeArguments.apply( this, arguments ),
      mode = args.mode,
      queue = args.queue,
      effectMethod = $.effects.effect[ args.effect ];

    if ( $.fx.off || !effectMethod ) {
      // delegate to the original method (e.g., .show()) if possible
      if ( mode ) {
        return this[ mode ]( args.duration, args.complete );
      } else {
        return this.each( function() {
          if ( args.complete ) {
            args.complete.call( this );
          }
        });
      }
    }

    function run( next ) {
      var elem = $( this ),
        complete = args.complete,
        mode = args.mode;

      function done() {
        if ( $.isFunction( complete ) ) {
          complete.call( elem[0] );
        }
        if ( $.isFunction( next ) ) {
          next();
        }
      }

      // If the element already has the correct final state, delegate to
      // the core methods so the internal tracking of "olddisplay" works.
      if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
        elem[ mode ]();
        done();
      } else {
        effectMethod.call( elem[0], args, done );
      }
    }

    return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
  },

  show: (function( orig ) {
    return function( option ) {
      if ( standardAnimationOption( option ) ) {
        return orig.apply( this, arguments );
      } else {
        var args = _normalizeArguments.apply( this, arguments );
        args.mode = "show";
        return this.effect.call( this, args );
      }
    };
  })( $.fn.show ),

  hide: (function( orig ) {
    return function( option ) {
      if ( standardAnimationOption( option ) ) {
        return orig.apply( this, arguments );
      } else {
        var args = _normalizeArguments.apply( this, arguments );
        args.mode = "hide";
        return this.effect.call( this, args );
      }
    };
  })( $.fn.hide ),

  toggle: (function( orig ) {
    return function( option ) {
      if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
        return orig.apply( this, arguments );
      } else {
        var args = _normalizeArguments.apply( this, arguments );
        args.mode = "toggle";
        return this.effect.call( this, args );
      }
    };
  })( $.fn.toggle ),

  // helper functions
  cssUnit: function(key) {
    var style = this.css( key ),
      val = [];

    $.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
      if ( style.indexOf( unit ) > 0 ) {
        val = [ parseFloat( style ), unit ];
      }
    });
    return val;
  }
});

})();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

(function() {

// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
  baseEasings[ name ] = function( p ) {
    return Math.pow( p, i + 2 );
  };
});

$.extend( baseEasings, {
  Sine: function ( p ) {
    return 1 - Math.cos( p * Math.PI / 2 );
  },
  Circ: function ( p ) {
    return 1 - Math.sqrt( 1 - p * p );
  },
  Elastic: function( p ) {
    return p === 0 || p === 1 ? p :
      -Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
  },
  Back: function( p ) {
    return p * p * ( 3 * p - 2 );
  },
  Bounce: function ( p ) {
    var pow2,
      bounce = 4;

    while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
    return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
  }
});

$.each( baseEasings, function( name, easeIn ) {
  $.easing[ "easeIn" + name ] = easeIn;
  $.easing[ "easeOut" + name ] = function( p ) {
    return 1 - easeIn( 1 - p );
  };
  $.easing[ "easeInOut" + name ] = function( p ) {
    return p < 0.5 ?
      easeIn( p * 2 ) / 2 :
      1 - easeIn( p * -2 + 2 ) / 2;
  };
});

})();

})(jQuery);
(function( $, undefined ) {

var rvertical = /up|down|vertical/,
  rpositivemotion = /up|left|vertical|horizontal/;

$.effects.effect.blind = function( o, done ) {
  // Create element
  var el = $( this ),
    props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
    mode = $.effects.setMode( el, o.mode || "hide" ),
    direction = o.direction || "up",
    vertical = rvertical.test( direction ),
    ref = vertical ? "height" : "width",
    ref2 = vertical ? "top" : "left",
    motion = rpositivemotion.test( direction ),
    animation = {},
    show = mode === "show",
    wrapper, distance, margin;

  // if already wrapped, the wrapper's properties are my property. #6245
  if ( el.parent().is( ".ui-effects-wrapper" ) ) {
    $.effects.save( el.parent(), props );
  } else {
    $.effects.save( el, props );
  }
  el.show();
  wrapper = $.effects.createWrapper( el ).css({
    overflow: "hidden"
  });

  distance = wrapper[ ref ]();
  margin = parseFloat( wrapper.css( ref2 ) ) || 0;

  animation[ ref ] = show ? distance : 0;
  if ( !motion ) {
    el
      .css( vertical ? "bottom" : "right", 0 )
      .css( vertical ? "top" : "left", "auto" )
      .css({ position: "absolute" });

    animation[ ref2 ] = show ? margin : distance + margin;
  }

  // start at 0 if we are showing
  if ( show ) {
    wrapper.css( ref, 0 );
    if ( ! motion ) {
      wrapper.css( ref2, margin + distance );
    }
  }

  // Animate
  wrapper.animate( animation, {
    duration: o.duration,
    easing: o.easing,
    queue: false,
    complete: function() {
      if ( mode === "hide" ) {
        el.hide();
      }
      $.effects.restore( el, props );
      $.effects.removeWrapper( el );
      done();
    }
  });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.bounce = function( o, done ) {
  var el = $( this ),
    props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

    // defaults:
    mode = $.effects.setMode( el, o.mode || "effect" ),
    hide = mode === "hide",
    show = mode === "show",
    direction = o.direction || "up",
    distance = o.distance,
    times = o.times || 5,

    // number of internal animations
    anims = times * 2 + ( show || hide ? 1 : 0 ),
    speed = o.duration / anims,
    easing = o.easing,

    // utility:
    ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
    motion = ( direction === "up" || direction === "left" ),
    i,
    upAnim,
    downAnim,

    // we will need to re-assemble the queue to stack our animations in place
    queue = el.queue(),
    queuelen = queue.length;

  // Avoid touching opacity to prevent clearType and PNG issues in IE
  if ( show || hide ) {
    props.push( "opacity" );
  }

  $.effects.save( el, props );
  el.show();
  $.effects.createWrapper( el ); // Create Wrapper

  // default distance for the BIGGEST bounce is the outer Distance / 3
  if ( !distance ) {
    distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
  }

  if ( show ) {
    downAnim = { opacity: 1 };
    downAnim[ ref ] = 0;

    // if we are showing, force opacity 0 and set the initial position
    // then do the "first" animation
    el.css( "opacity", 0 )
      .css( ref, motion ? -distance * 2 : distance * 2 )
      .animate( downAnim, speed, easing );
  }

  // start at the smallest distance if we are hiding
  if ( hide ) {
    distance = distance / Math.pow( 2, times - 1 );
  }

  downAnim = {};
  downAnim[ ref ] = 0;
  // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
  for ( i = 0; i < times; i++ ) {
    upAnim = {};
    upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

    el.animate( upAnim, speed, easing )
      .animate( downAnim, speed, easing );

    distance = hide ? distance * 2 : distance / 2;
  }

  // Last Bounce when Hiding
  if ( hide ) {
    upAnim = { opacity: 0 };
    upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

    el.animate( upAnim, speed, easing );
  }

  el.queue(function() {
    if ( hide ) {
      el.hide();
    }
    $.effects.restore( el, props );
    $.effects.removeWrapper( el );
    done();
  });

  // inject all the animations we just queued to be first in line (after "inprogress")
  if ( queuelen > 1) {
    queue.splice.apply( queue,
      [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
  }
  el.dequeue();

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.clip = function( o, done ) {
  // Create element
  var el = $( this ),
    props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
    mode = $.effects.setMode( el, o.mode || "hide" ),
    show = mode === "show",
    direction = o.direction || "vertical",
    vert = direction === "vertical",
    size = vert ? "height" : "width",
    position = vert ? "top" : "left",
    animation = {},
    wrapper, animate, distance;

  // Save & Show
  $.effects.save( el, props );
  el.show();

  // Create Wrapper
  wrapper = $.effects.createWrapper( el ).css({
    overflow: "hidden"
  });
  animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
  distance = animate[ size ]();

  // Shift
  if ( show ) {
    animate.css( size, 0 );
    animate.css( position, distance / 2 );
  }

  // Create Animation Object:
  animation[ size ] = show ? distance : 0;
  animation[ position ] = show ? 0 : distance / 2;

  // Animate
  animate.animate( animation, {
    queue: false,
    duration: o.duration,
    easing: o.easing,
    complete: function() {
      if ( !show ) {
        el.hide();
      }
      $.effects.restore( el, props );
      $.effects.removeWrapper( el );
      done();
    }
  });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.drop = function( o, done ) {

  var el = $( this ),
    props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
    mode = $.effects.setMode( el, o.mode || "hide" ),
    show = mode === "show",
    direction = o.direction || "left",
    ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
    motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
    animation = {
      opacity: show ? 1 : 0
    },
    distance;

  // Adjust
  $.effects.save( el, props );
  el.show();
  $.effects.createWrapper( el );

  distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;

  if ( show ) {
    el
      .css( "opacity", 0 )
      .css( ref, motion === "pos" ? -distance : distance );
  }

  // Animation
  animation[ ref ] = ( show ?
    ( motion === "pos" ? "+=" : "-=" ) :
    ( motion === "pos" ? "-=" : "+=" ) ) +
    distance;

  // Animate
  el.animate( animation, {
    queue: false,
    duration: o.duration,
    easing: o.easing,
    complete: function() {
      if ( mode === "hide" ) {
        el.hide();
      }
      $.effects.restore( el, props );
      $.effects.removeWrapper( el );
      done();
    }
  });
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.explode = function( o, done ) {

  var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
    cells = rows,
    el = $( this ),
    mode = $.effects.setMode( el, o.mode || "hide" ),
    show = mode === "show",

    // show and then visibility:hidden the element before calculating offset
    offset = el.show().css( "visibility", "hidden" ).offset(),

    // width and height of a piece
    width = Math.ceil( el.outerWidth() / cells ),
    height = Math.ceil( el.outerHeight() / rows ),
    pieces = [],

    // loop
    i, j, left, top, mx, my;

  // children animate complete:
  function childComplete() {
    pieces.push( this );
    if ( pieces.length === rows * cells ) {
      animComplete();
    }
  }

  // clone the element for each row and cell.
  for( i = 0; i < rows ; i++ ) { // ===>
    top = offset.top + i * height;
    my = i - ( rows - 1 ) / 2 ;

    for( j = 0; j < cells ; j++ ) { // |||
      left = offset.left + j * width;
      mx = j - ( cells - 1 ) / 2 ;

      // Create a clone of the now hidden main element that will be absolute positioned
      // within a wrapper div off the -left and -top equal to size of our pieces
      el
        .clone()
        .appendTo( "body" )
        .wrap( "<div></div>" )
        .css({
          position: "absolute",
          visibility: "visible",
          left: -j * width,
          top: -i * height
        })

      // select the wrapper - make it overflow: hidden and absolute positioned based on
      // where the original was located +left and +top equal to the size of pieces
        .parent()
        .addClass( "ui-effects-explode" )
        .css({
          position: "absolute",
          overflow: "hidden",
          width: width,
          height: height,
          left: left + ( show ? mx * width : 0 ),
          top: top + ( show ? my * height : 0 ),
          opacity: show ? 0 : 1
        }).animate({
          left: left + ( show ? 0 : mx * width ),
          top: top + ( show ? 0 : my * height ),
          opacity: show ? 1 : 0
        }, o.duration || 500, o.easing, childComplete );
    }
  }

  function animComplete() {
    el.css({
      visibility: "visible"
    });
    $( pieces ).remove();
    if ( !show ) {
      el.hide();
    }
    done();
  }
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.fade = function( o, done ) {
  var el = $( this ),
    mode = $.effects.setMode( el, o.mode || "toggle" );

  el.animate({
    opacity: mode
  }, {
    queue: false,
    duration: o.duration,
    easing: o.easing,
    complete: done
  });
};

})( jQuery );
(function( $, undefined ) {

$.effects.effect.fold = function( o, done ) {

  // Create element
  var el = $( this ),
    props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
    mode = $.effects.setMode( el, o.mode || "hide" ),
    show = mode === "show",
    hide = mode === "hide",
    size = o.size || 15,
    percent = /([0-9]+)%/.exec( size ),
    horizFirst = !!o.horizFirst,
    widthFirst = show !== horizFirst,
    ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
    duration = o.duration / 2,
    wrapper, distance,
    animation1 = {},
    animation2 = {};

  $.effects.save( el, props );
  el.show();

  // Create Wrapper
  wrapper = $.effects.createWrapper( el ).css({
    overflow: "hidden"
  });
  distance = widthFirst ?
    [ wrapper.width(), wrapper.height() ] :
    [ wrapper.height(), wrapper.width() ];

  if ( percent ) {
    size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
  }
  if ( show ) {
    wrapper.css( horizFirst ? {
      height: 0,
      width: size
    } : {
      height: size,
      width: 0
    });
  }

  // Animation
  animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
  animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

  // Animate
  wrapper
    .animate( animation1, duration, o.easing )
    .animate( animation2, duration, o.easing, function() {
      if ( hide ) {
        el.hide();
      }
      $.effects.restore( el, props );
      $.effects.removeWrapper( el );
      done();
    });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.highlight = function( o, done ) {
  var elem = $( this ),
    props = [ "backgroundImage", "backgroundColor", "opacity" ],
    mode = $.effects.setMode( elem, o.mode || "show" ),
    animation = {
      backgroundColor: elem.css( "backgroundColor" )
    };

  if (mode === "hide") {
    animation.opacity = 0;
  }

  $.effects.save( elem, props );

  elem
    .show()
    .css({
      backgroundImage: "none",
      backgroundColor: o.color || "#ffff99"
    })
    .animate( animation, {
      queue: false,
      duration: o.duration,
      easing: o.easing,
      complete: function() {
        if ( mode === "hide" ) {
          elem.hide();
        }
        $.effects.restore( elem, props );
        done();
      }
    });
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.pulsate = function( o, done ) {
  var elem = $( this ),
    mode = $.effects.setMode( elem, o.mode || "show" ),
    show = mode === "show",
    hide = mode === "hide",
    showhide = ( show || mode === "hide" ),

    // showing or hiding leaves of the "last" animation
    anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
    duration = o.duration / anims,
    animateTo = 0,
    queue = elem.queue(),
    queuelen = queue.length,
    i;

  if ( show || !elem.is(":visible")) {
    elem.css( "opacity", 0 ).show();
    animateTo = 1;
  }

  // anims - 1 opacity "toggles"
  for ( i = 1; i < anims; i++ ) {
    elem.animate({
      opacity: animateTo
    }, duration, o.easing );
    animateTo = 1 - animateTo;
  }

  elem.animate({
    opacity: animateTo
  }, duration, o.easing);

  elem.queue(function() {
    if ( hide ) {
      elem.hide();
    }
    done();
  });

  // We just queued up "anims" animations, we need to put them next in the queue
  if ( queuelen > 1 ) {
    queue.splice.apply( queue,
      [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
  }
  elem.dequeue();
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.puff = function( o, done ) {
  var elem = $( this ),
    mode = $.effects.setMode( elem, o.mode || "hide" ),
    hide = mode === "hide",
    percent = parseInt( o.percent, 10 ) || 150,
    factor = percent / 100,
    original = {
      height: elem.height(),
      width: elem.width(),
      outerHeight: elem.outerHeight(),
      outerWidth: elem.outerWidth()
    };

  $.extend( o, {
    effect: "scale",
    queue: false,
    fade: true,
    mode: mode,
    complete: done,
    percent: hide ? percent : 100,
    from: hide ?
      original :
      {
        height: original.height * factor,
        width: original.width * factor,
        outerHeight: original.outerHeight * factor,
        outerWidth: original.outerWidth * factor
      }
  });

  elem.effect( o );
};

$.effects.effect.scale = function( o, done ) {

  // Create element
  var el = $( this ),
    options = $.extend( true, {}, o ),
    mode = $.effects.setMode( el, o.mode || "effect" ),
    percent = parseInt( o.percent, 10 ) ||
      ( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
    direction = o.direction || "both",
    origin = o.origin,
    original = {
      height: el.height(),
      width: el.width(),
      outerHeight: el.outerHeight(),
      outerWidth: el.outerWidth()
    },
    factor = {
      y: direction !== "horizontal" ? (percent / 100) : 1,
      x: direction !== "vertical" ? (percent / 100) : 1
    };

  // We are going to pass this effect to the size effect:
  options.effect = "size";
  options.queue = false;
  options.complete = done;

  // Set default origin and restore for show/hide
  if ( mode !== "effect" ) {
    options.origin = origin || ["middle","center"];
    options.restore = true;
  }

  options.from = o.from || ( mode === "show" ? {
    height: 0,
    width: 0,
    outerHeight: 0,
    outerWidth: 0
  } : original );
  options.to = {
    height: original.height * factor.y,
    width: original.width * factor.x,
    outerHeight: original.outerHeight * factor.y,
    outerWidth: original.outerWidth * factor.x
  };

  // Fade option to support puff
  if ( options.fade ) {
    if ( mode === "show" ) {
      options.from.opacity = 0;
      options.to.opacity = 1;
    }
    if ( mode === "hide" ) {
      options.from.opacity = 1;
      options.to.opacity = 0;
    }
  }

  // Animate
  el.effect( options );

};

$.effects.effect.size = function( o, done ) {

  // Create element
  var original, baseline, factor,
    el = $( this ),
    props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

    // Always restore
    props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

    // Copy for children
    props2 = [ "width", "height", "overflow" ],
    cProps = [ "fontSize" ],
    vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
    hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

    // Set options
    mode = $.effects.setMode( el, o.mode || "effect" ),
    restore = o.restore || mode !== "effect",
    scale = o.scale || "both",
    origin = o.origin || [ "middle", "center" ],
    position = el.css( "position" ),
    props = restore ? props0 : props1,
    zero = {
      height: 0,
      width: 0,
      outerHeight: 0,
      outerWidth: 0
    };

  if ( mode === "show" ) {
    el.show();
  }
  original = {
    height: el.height(),
    width: el.width(),
    outerHeight: el.outerHeight(),
    outerWidth: el.outerWidth()
  };

  if ( o.mode === "toggle" && mode === "show" ) {
    el.from = o.to || zero;
    el.to = o.from || original;
  } else {
    el.from = o.from || ( mode === "show" ? zero : original );
    el.to = o.to || ( mode === "hide" ? zero : original );
  }

  // Set scaling factor
  factor = {
    from: {
      y: el.from.height / original.height,
      x: el.from.width / original.width
    },
    to: {
      y: el.to.height / original.height,
      x: el.to.width / original.width
    }
  };

  // Scale the css box
  if ( scale === "box" || scale === "both" ) {

    // Vertical props scaling
    if ( factor.from.y !== factor.to.y ) {
      props = props.concat( vProps );
      el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
      el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
    }

    // Horizontal props scaling
    if ( factor.from.x !== factor.to.x ) {
      props = props.concat( hProps );
      el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
      el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
    }
  }

  // Scale the content
  if ( scale === "content" || scale === "both" ) {

    // Vertical props scaling
    if ( factor.from.y !== factor.to.y ) {
      props = props.concat( cProps ).concat( props2 );
      el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
      el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
    }
  }

  $.effects.save( el, props );
  el.show();
  $.effects.createWrapper( el );
  el.css( "overflow", "hidden" ).css( el.from );

  // Adjust
  if (origin) { // Calculate baseline shifts
    baseline = $.effects.getBaseline( origin, original );
    el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
    el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
    el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
    el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
  }
  el.css( el.from ); // set top & left

  // Animate
  if ( scale === "content" || scale === "both" ) { // Scale the children

    // Add margins/font-size
    vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
    hProps = hProps.concat([ "marginLeft", "marginRight" ]);
    props2 = props0.concat(vProps).concat(hProps);

    el.find( "*[width]" ).each( function(){
      var child = $( this ),
        c_original = {
          height: child.height(),
          width: child.width(),
          outerHeight: child.outerHeight(),
          outerWidth: child.outerWidth()
        };
      if (restore) {
        $.effects.save(child, props2);
      }

      child.from = {
        height: c_original.height * factor.from.y,
        width: c_original.width * factor.from.x,
        outerHeight: c_original.outerHeight * factor.from.y,
        outerWidth: c_original.outerWidth * factor.from.x
      };
      child.to = {
        height: c_original.height * factor.to.y,
        width: c_original.width * factor.to.x,
        outerHeight: c_original.height * factor.to.y,
        outerWidth: c_original.width * factor.to.x
      };

      // Vertical props scaling
      if ( factor.from.y !== factor.to.y ) {
        child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
        child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
      }

      // Horizontal props scaling
      if ( factor.from.x !== factor.to.x ) {
        child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
        child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
      }

      // Animate children
      child.css( child.from );
      child.animate( child.to, o.duration, o.easing, function() {

        // Restore children
        if ( restore ) {
          $.effects.restore( child, props2 );
        }
      });
    });
  }

  // Animate
  el.animate( el.to, {
    queue: false,
    duration: o.duration,
    easing: o.easing,
    complete: function() {
      if ( el.to.opacity === 0 ) {
        el.css( "opacity", el.from.opacity );
      }
      if( mode === "hide" ) {
        el.hide();
      }
      $.effects.restore( el, props );
      if ( !restore ) {

        // we need to calculate our new positioning based on the scaling
        if ( position === "static" ) {
          el.css({
            position: "relative",
            top: el.to.top,
            left: el.to.left
          });
        } else {
          $.each([ "top", "left" ], function( idx, pos ) {
            el.css( pos, function( _, str ) {
              var val = parseInt( str, 10 ),
                toRef = idx ? el.to.left : el.to.top;

              // if original was "auto", recalculate the new value from wrapper
              if ( str === "auto" ) {
                return toRef + "px";
              }

              return val + toRef + "px";
            });
          });
        }
      }

      $.effects.removeWrapper( el );
      done();
    }
  });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.shake = function( o, done ) {

  var el = $( this ),
    props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
    mode = $.effects.setMode( el, o.mode || "effect" ),
    direction = o.direction || "left",
    distance = o.distance || 20,
    times = o.times || 3,
    anims = times * 2 + 1,
    speed = Math.round(o.duration/anims),
    ref = (direction === "up" || direction === "down") ? "top" : "left",
    positiveMotion = (direction === "up" || direction === "left"),
    animation = {},
    animation1 = {},
    animation2 = {},
    i,

    // we will need to re-assemble the queue to stack our animations in place
    queue = el.queue(),
    queuelen = queue.length;

  $.effects.save( el, props );
  el.show();
  $.effects.createWrapper( el );

  // Animation
  animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
  animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
  animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

  // Animate
  el.animate( animation, speed, o.easing );

  // Shakes
  for ( i = 1; i < times; i++ ) {
    el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
  }
  el
    .animate( animation1, speed, o.easing )
    .animate( animation, speed / 2, o.easing )
    .queue(function() {
      if ( mode === "hide" ) {
        el.hide();
      }
      $.effects.restore( el, props );
      $.effects.removeWrapper( el );
      done();
    });

  // inject all the animations we just queued to be first in line (after "inprogress")
  if ( queuelen > 1) {
    queue.splice.apply( queue,
      [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
  }
  el.dequeue();

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.slide = function( o, done ) {

  // Create element
  var el = $( this ),
    props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
    mode = $.effects.setMode( el, o.mode || "show" ),
    show = mode === "show",
    direction = o.direction || "left",
    ref = (direction === "up" || direction === "down") ? "top" : "left",
    positiveMotion = (direction === "up" || direction === "left"),
    distance,
    animation = {};

  // Adjust
  $.effects.save( el, props );
  el.show();
  distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

  $.effects.createWrapper( el ).css({
    overflow: "hidden"
  });

  if ( show ) {
    el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
  }

  // Animation
  animation[ ref ] = ( show ?
    ( positiveMotion ? "+=" : "-=") :
    ( positiveMotion ? "-=" : "+=")) +
    distance;

  // Animate
  el.animate( animation, {
    queue: false,
    duration: o.duration,
    easing: o.easing,
    complete: function() {
      if ( mode === "hide" ) {
        el.hide();
      }
      $.effects.restore( el, props );
      $.effects.removeWrapper( el );
      done();
    }
  });
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.transfer = function( o, done ) {
  var elem = $( this ),
    target = $( o.to ),
    targetFixed = target.css( "position" ) === "fixed",
    body = $("body"),
    fixTop = targetFixed ? body.scrollTop() : 0,
    fixLeft = targetFixed ? body.scrollLeft() : 0,
    endPosition = target.offset(),
    animation = {
      top: endPosition.top - fixTop ,
      left: endPosition.left - fixLeft ,
      height: target.innerHeight(),
      width: target.innerWidth()
    },
    startPosition = elem.offset(),
    transfer = $( "<div class='ui-effects-transfer'></div>" )
      .appendTo( document.body )
      .addClass( o.className )
      .css({
        top: startPosition.top - fixTop ,
        left: startPosition.left - fixLeft ,
        height: elem.innerHeight(),
        width: elem.innerWidth(),
        position: targetFixed ? "fixed" : "absolute"
      })
      .animate( animation, o.duration, o.easing, function() {
        transfer.remove();
        done();
      });
};

})(jQuery);
(function( $, undefined ) {

$.widget( "ui.menu", {
  version: "1.10.4",
  defaultElement: "<ul>",
  delay: 300,
  options: {
    icons: {
      submenu: "ui-icon-carat-1-e"
    },
    menus: "ul",
    position: {
      my: "left top",
      at: "right top"
    },
    role: "menu",

    // callbacks
    blur: null,
    focus: null,
    select: null
  },

  _create: function() {
    this.activeMenu = this.element;
    // flag used to prevent firing of the click handler
    // as the event bubbles up through nested menus
    this.mouseHandled = false;
    this.element
      .uniqueId()
      .addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
      .toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
      .attr({
        role: this.options.role,
        tabIndex: 0
      })
      // need to catch all clicks on disabled menu
      // not possible through _on
      .bind( "click" + this.eventNamespace, $.proxy(function( event ) {
        if ( this.options.disabled ) {
          event.preventDefault();
        }
      }, this ));

    if ( this.options.disabled ) {
      this.element
        .addClass( "ui-state-disabled" )
        .attr( "aria-disabled", "true" );
    }

    this._on({
      // Prevent focus from sticking to links inside menu after clicking
      // them (focus should always stay on UL during navigation).
      "mousedown .ui-menu-item > a": function( event ) {
        event.preventDefault();
      },
      "click .ui-state-disabled > a": function( event ) {
        event.preventDefault();
      },
      "click .ui-menu-item:has(a)": function( event ) {
        var target = $( event.target ).closest( ".ui-menu-item" );
        if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
          this.select( event );

          // Only set the mouseHandled flag if the event will bubble, see #9469.
          if ( !event.isPropagationStopped() ) {
            this.mouseHandled = true;
          }

          // Open submenu on click
          if ( target.has( ".ui-menu" ).length ) {
            this.expand( event );
          } else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".ui-menu" ).length ) {

            // Redirect focus to the menu
            this.element.trigger( "focus", [ true ] );

            // If the active item is on the top level, let it stay active.
            // Otherwise, blur the active item since it is no longer visible.
            if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
              clearTimeout( this.timer );
            }
          }
        }
      },
      "mouseenter .ui-menu-item": function( event ) {
        var target = $( event.currentTarget );
        // Remove ui-state-active class from siblings of the newly focused menu item
        // to avoid a jump caused by adjacent elements both having a class with a border
        target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );
        this.focus( event, target );
      },
      mouseleave: "collapseAll",
      "mouseleave .ui-menu": "collapseAll",
      focus: function( event, keepActiveItem ) {
        // If there's already an active item, keep it active
        // If not, activate the first item
        var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );

        if ( !keepActiveItem ) {
          this.focus( event, item );
        }
      },
      blur: function( event ) {
        this._delay(function() {
          if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
            this.collapseAll( event );
          }
        });
      },
      keydown: "_keydown"
    });

    this.refresh();

    // Clicks outside of a menu collapse any open menus
    this._on( this.document, {
      click: function( event ) {
        if ( !$( event.target ).closest( ".ui-menu" ).length ) {
          this.collapseAll( event );
        }

        // Reset the mouseHandled flag
        this.mouseHandled = false;
      }
    });
  },

  _destroy: function() {
    // Destroy (sub)menus
    this.element
      .removeAttr( "aria-activedescendant" )
      .find( ".ui-menu" ).addBack()
        .removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )
        .removeAttr( "role" )
        .removeAttr( "tabIndex" )
        .removeAttr( "aria-labelledby" )
        .removeAttr( "aria-expanded" )
        .removeAttr( "aria-hidden" )
        .removeAttr( "aria-disabled" )
        .removeUniqueId()
        .show();

    // Destroy menu items
    this.element.find( ".ui-menu-item" )
      .removeClass( "ui-menu-item" )
      .removeAttr( "role" )
      .removeAttr( "aria-disabled" )
      .children( "a" )
        .removeUniqueId()
        .removeClass( "ui-corner-all ui-state-hover" )
        .removeAttr( "tabIndex" )
        .removeAttr( "role" )
        .removeAttr( "aria-haspopup" )
        .children().each( function() {
          var elem = $( this );
          if ( elem.data( "ui-menu-submenu-carat" ) ) {
            elem.remove();
          }
        });

    // Destroy menu dividers
    this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
  },

  _keydown: function( event ) {
    var match, prev, character, skip, regex,
      preventDefault = true;

    function escape( value ) {
      return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
    }

    switch ( event.keyCode ) {
    case $.ui.keyCode.PAGE_UP:
      this.previousPage( event );
      break;
    case $.ui.keyCode.PAGE_DOWN:
      this.nextPage( event );
      break;
    case $.ui.keyCode.HOME:
      this._move( "first", "first", event );
      break;
    case $.ui.keyCode.END:
      this._move( "last", "last", event );
      break;
    case $.ui.keyCode.UP:
      this.previous( event );
      break;
    case $.ui.keyCode.DOWN:
      this.next( event );
      break;
    case $.ui.keyCode.LEFT:
      this.collapse( event );
      break;
    case $.ui.keyCode.RIGHT:
      if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
        this.expand( event );
      }
      break;
    case $.ui.keyCode.ENTER:
    case $.ui.keyCode.SPACE:
      this._activate( event );
      break;
    case $.ui.keyCode.ESCAPE:
      this.collapse( event );
      break;
    default:
      preventDefault = false;
      prev = this.previousFilter || "";
      character = String.fromCharCode( event.keyCode );
      skip = false;

      clearTimeout( this.filterTimer );

      if ( character === prev ) {
        skip = true;
      } else {
        character = prev + character;
      }

      regex = new RegExp( "^" + escape( character ), "i" );
      match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
        return regex.test( $( this ).children( "a" ).text() );
      });
      match = skip && match.index( this.active.next() ) !== -1 ?
        this.active.nextAll( ".ui-menu-item" ) :
        match;

      // If no matches on the current filter, reset to the last character pressed
      // to move down the menu to the first item that starts with that character
      if ( !match.length ) {
        character = String.fromCharCode( event.keyCode );
        regex = new RegExp( "^" + escape( character ), "i" );
        match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
          return regex.test( $( this ).children( "a" ).text() );
        });
      }

      if ( match.length ) {
        this.focus( event, match );
        if ( match.length > 1 ) {
          this.previousFilter = character;
          this.filterTimer = this._delay(function() {
            delete this.previousFilter;
          }, 1000 );
        } else {
          delete this.previousFilter;
        }
      } else {
        delete this.previousFilter;
      }
    }

    if ( preventDefault ) {
      event.preventDefault();
    }
  },

  _activate: function( event ) {
    if ( !this.active.is( ".ui-state-disabled" ) ) {
      if ( this.active.children( "a[aria-haspopup='true']" ).length ) {
        this.expand( event );
      } else {
        this.select( event );
      }
    }
  },

  refresh: function() {
    var menus,
      icon = this.options.icons.submenu,
      submenus = this.element.find( this.options.menus );

    this.element.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length );

    // Initialize nested menus
    submenus.filter( ":not(.ui-menu)" )
      .addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
      .hide()
      .attr({
        role: this.options.role,
        "aria-hidden": "true",
        "aria-expanded": "false"
      })
      .each(function() {
        var menu = $( this ),
          item = menu.prev( "a" ),
          submenuCarat = $( "<span>" )
            .addClass( "ui-menu-icon ui-icon " + icon )
            .data( "ui-menu-submenu-carat", true );

        item
          .attr( "aria-haspopup", "true" )
          .prepend( submenuCarat );
        menu.attr( "aria-labelledby", item.attr( "id" ) );
      });

    menus = submenus.add( this.element );

    // Don't refresh list items that are already adapted
    menus.children( ":not(.ui-menu-item):has(a)" )
      .addClass( "ui-menu-item" )
      .attr( "role", "presentation" )
      .children( "a" )
        .uniqueId()
        .addClass( "ui-corner-all" )
        .attr({
          tabIndex: -1,
          role: this._itemRole()
        });

    // Initialize unlinked menu-items containing spaces and/or dashes only as dividers
    menus.children( ":not(.ui-menu-item)" ).each(function() {
      var item = $( this );
      // hyphen, em dash, en dash
      if ( !/[^\-\u2014\u2013\s]/.test( item.text() ) ) {
        item.addClass( "ui-widget-content ui-menu-divider" );
      }
    });

    // Add aria-disabled attribute to any disabled menu item
    menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

    // If the active item has been removed, blur the menu
    if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
      this.blur();
    }
  },

  _itemRole: function() {
    return {
      menu: "menuitem",
      listbox: "option"
    }[ this.options.role ];
  },

  _setOption: function( key, value ) {
    if ( key === "icons" ) {
      this.element.find( ".ui-menu-icon" )
        .removeClass( this.options.icons.submenu )
        .addClass( value.submenu );
    }
    this._super( key, value );
  },

  focus: function( event, item ) {
    var nested, focused;
    this.blur( event, event && event.type === "focus" );

    this._scrollIntoView( item );

    this.active = item.first();
    focused = this.active.children( "a" ).addClass( "ui-state-focus" );
    // Only update aria-activedescendant if there's a role
    // otherwise we assume focus is managed elsewhere
    if ( this.options.role ) {
      this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
    }

    // Highlight active parent menu item, if any
    this.active
      .parent()
      .closest( ".ui-menu-item" )
      .children( "a:first" )
      .addClass( "ui-state-active" );

    if ( event && event.type === "keydown" ) {
      this._close();
    } else {
      this.timer = this._delay(function() {
        this._close();
      }, this.delay );
    }

    nested = item.children( ".ui-menu" );
    if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
      this._startOpening(nested);
    }
    this.activeMenu = item.parent();

    this._trigger( "focus", event, { item: item } );
  },

  _scrollIntoView: function( item ) {
    var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
    if ( this._hasScroll() ) {
      borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
      paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
      offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
      scroll = this.activeMenu.scrollTop();
      elementHeight = this.activeMenu.height();
      itemHeight = item.height();

      if ( offset < 0 ) {
        this.activeMenu.scrollTop( scroll + offset );
      } else if ( offset + itemHeight > elementHeight ) {
        this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
      }
    }
  },

  blur: function( event, fromFocus ) {
    if ( !fromFocus ) {
      clearTimeout( this.timer );
    }

    if ( !this.active ) {
      return;
    }

    this.active.children( "a" ).removeClass( "ui-state-focus" );
    this.active = null;

    this._trigger( "blur", event, { item: this.active } );
  },

  _startOpening: function( submenu ) {
    clearTimeout( this.timer );

    // Don't open if already open fixes a Firefox bug that caused a .5 pixel
    // shift in the submenu position when mousing over the carat icon
    if ( submenu.attr( "aria-hidden" ) !== "true" ) {
      return;
    }

    this.timer = this._delay(function() {
      this._close();
      this._open( submenu );
    }, this.delay );
  },

  _open: function( submenu ) {
    var position = $.extend({
      of: this.active
    }, this.options.position );

    clearTimeout( this.timer );
    this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
      .hide()
      .attr( "aria-hidden", "true" );

    submenu
      .show()
      .removeAttr( "aria-hidden" )
      .attr( "aria-expanded", "true" )
      .position( position );
  },

  collapseAll: function( event, all ) {
    clearTimeout( this.timer );
    this.timer = this._delay(function() {
      // If we were passed an event, look for the submenu that contains the event
      var currentMenu = all ? this.element :
        $( event && event.target ).closest( this.element.find( ".ui-menu" ) );

      // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
      if ( !currentMenu.length ) {
        currentMenu = this.element;
      }

      this._close( currentMenu );

      this.blur( event );
      this.activeMenu = currentMenu;
    }, this.delay );
  },

  // With no arguments, closes the currently active menu - if nothing is active
  // it closes all menus.  If passed an argument, it will search for menus BELOW
  _close: function( startMenu ) {
    if ( !startMenu ) {
      startMenu = this.active ? this.active.parent() : this.element;
    }

    startMenu
      .find( ".ui-menu" )
        .hide()
        .attr( "aria-hidden", "true" )
        .attr( "aria-expanded", "false" )
      .end()
      .find( "a.ui-state-active" )
        .removeClass( "ui-state-active" );
  },

  collapse: function( event ) {
    var newItem = this.active &&
      this.active.parent().closest( ".ui-menu-item", this.element );
    if ( newItem && newItem.length ) {
      this._close();
      this.focus( event, newItem );
    }
  },

  expand: function( event ) {
    var newItem = this.active &&
      this.active
        .children( ".ui-menu " )
        .children( ".ui-menu-item" )
        .first();

    if ( newItem && newItem.length ) {
      this._open( newItem.parent() );

      // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
      this._delay(function() {
        this.focus( event, newItem );
      });
    }
  },

  next: function( event ) {
    this._move( "next", "first", event );
  },

  previous: function( event ) {
    this._move( "prev", "last", event );
  },

  isFirstItem: function() {
    return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
  },

  isLastItem: function() {
    return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
  },

  _move: function( direction, filter, event ) {
    var next;
    if ( this.active ) {
      if ( direction === "first" || direction === "last" ) {
        next = this.active
          [ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
          .eq( -1 );
      } else {
        next = this.active
          [ direction + "All" ]( ".ui-menu-item" )
          .eq( 0 );
      }
    }
    if ( !next || !next.length || !this.active ) {
      next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();
    }

    this.focus( event, next );
  },

  nextPage: function( event ) {
    var item, base, height;

    if ( !this.active ) {
      this.next( event );
      return;
    }
    if ( this.isLastItem() ) {
      return;
    }
    if ( this._hasScroll() ) {
      base = this.active.offset().top;
      height = this.element.height();
      this.active.nextAll( ".ui-menu-item" ).each(function() {
        item = $( this );
        return item.offset().top - base - height < 0;
      });

      this.focus( event, item );
    } else {
      this.focus( event, this.activeMenu.children( ".ui-menu-item" )
        [ !this.active ? "first" : "last" ]() );
    }
  },

  previousPage: function( event ) {
    var item, base, height;
    if ( !this.active ) {
      this.next( event );
      return;
    }
    if ( this.isFirstItem() ) {
      return;
    }
    if ( this._hasScroll() ) {
      base = this.active.offset().top;
      height = this.element.height();
      this.active.prevAll( ".ui-menu-item" ).each(function() {
        item = $( this );
        return item.offset().top - base + height > 0;
      });

      this.focus( event, item );
    } else {
      this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );
    }
  },

  _hasScroll: function() {
    return this.element.outerHeight() < this.element.prop( "scrollHeight" );
  },

  select: function( event ) {
    // TODO: It should never be possible to not have an active item at this
    // point, but the tests don't trigger mouseenter before click.
    this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
    var ui = { item: this.active };
    if ( !this.active.has( ".ui-menu" ).length ) {
      this.collapseAll( event, true );
    }
    this._trigger( "select", event, ui );
  }
});

}( jQuery ));
(function( $, undefined ) {

$.widget( "ui.progressbar", {
  version: "1.10.4",
  options: {
    max: 100,
    value: 0,

    change: null,
    complete: null
  },

  min: 0,

  _create: function() {
    // Constrain initial value
    this.oldValue = this.options.value = this._constrainedValue();

    this.element
      .addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
      .attr({
        // Only set static values, aria-valuenow and aria-valuemax are
        // set inside _refreshValue()
        role: "progressbar",
        "aria-valuemin": this.min
      });

    this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
      .appendTo( this.element );

    this._refreshValue();
  },

  _destroy: function() {
    this.element
      .removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
      .removeAttr( "role" )
      .removeAttr( "aria-valuemin" )
      .removeAttr( "aria-valuemax" )
      .removeAttr( "aria-valuenow" );

    this.valueDiv.remove();
  },

  value: function( newValue ) {
    if ( newValue === undefined ) {
      return this.options.value;
    }

    this.options.value = this._constrainedValue( newValue );
    this._refreshValue();
  },

  _constrainedValue: function( newValue ) {
    if ( newValue === undefined ) {
      newValue = this.options.value;
    }

    this.indeterminate = newValue === false;

    // sanitize value
    if ( typeof newValue !== "number" ) {
      newValue = 0;
    }

    return this.indeterminate ? false :
      Math.min( this.options.max, Math.max( this.min, newValue ) );
  },

  _setOptions: function( options ) {
    // Ensure "value" option is set after other values (like max)
    var value = options.value;
    delete options.value;

    this._super( options );

    this.options.value = this._constrainedValue( value );
    this._refreshValue();
  },

  _setOption: function( key, value ) {
    if ( key === "max" ) {
      // Don't allow a max less than min
      value = Math.max( this.min, value );
    }

    this._super( key, value );
  },

  _percentage: function() {
    return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
  },

  _refreshValue: function() {
    var value = this.options.value,
      percentage = this._percentage();

    this.valueDiv
      .toggle( this.indeterminate || value > this.min )
      .toggleClass( "ui-corner-right", value === this.options.max )
      .width( percentage.toFixed(0) + "%" );

    this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );

    if ( this.indeterminate ) {
      this.element.removeAttr( "aria-valuenow" );
      if ( !this.overlayDiv ) {
        this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
      }
    } else {
      this.element.attr({
        "aria-valuemax": this.options.max,
        "aria-valuenow": value
      });
      if ( this.overlayDiv ) {
        this.overlayDiv.remove();
        this.overlayDiv = null;
      }
    }

    if ( this.oldValue !== value ) {
      this.oldValue = value;
      this._trigger( "change" );
    }
    if ( value === this.options.max ) {
      this._trigger( "complete" );
    }
  }
});

})( jQuery );
(function( $, undefined ) {

function num(v) {
  return parseInt(v, 10) || 0;
}

function isNumber(value) {
  return !isNaN(parseInt(value, 10));
}

$.widget("ui.resizable", $.ui.mouse, {
  version: "1.10.4",
  widgetEventPrefix: "resize",
  options: {
    alsoResize: false,
    animate: false,
    animateDuration: "slow",
    animateEasing: "swing",
    aspectRatio: false,
    autoHide: false,
    containment: false,
    ghost: false,
    grid: false,
    handles: "e,s,se",
    helper: false,
    maxHeight: null,
    maxWidth: null,
    minHeight: 10,
    minWidth: 10,
    // See #7960
    zIndex: 90,

    // callbacks
    resize: null,
    start: null,
    stop: null
  },
  _create: function() {

    var n, i, handle, axis, hname,
      that = this,
      o = this.options;
    this.element.addClass("ui-resizable");

    $.extend(this, {
      _aspectRatio: !!(o.aspectRatio),
      aspectRatio: o.aspectRatio,
      originalElement: this.element,
      _proportionallyResizeElements: [],
      _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
    });

    //Wrap the element if it cannot hold child nodes
    if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

      //Create a wrapper element and set the wrapper to the new current internal element
      this.element.wrap(
        $("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
          position: this.element.css("position"),
          width: this.element.outerWidth(),
          height: this.element.outerHeight(),
          top: this.element.css("top"),
          left: this.element.css("left")
        })
      );

      //Overwrite the original this.element
      this.element = this.element.parent().data(
        "ui-resizable", this.element.data("ui-resizable")
      );

      this.elementIsWrapper = true;

      //Move margins to the wrapper
      this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
      this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

      //Prevent Safari textarea resize
      this.originalResizeStyle = this.originalElement.css("resize");
      this.originalElement.css("resize", "none");

      //Push the actual element to our proportionallyResize internal array
      this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

      // avoid IE jump (hard set the margin)
      this.originalElement.css({ margin: this.originalElement.css("margin") });

      // fix handlers offset
      this._proportionallyResize();

    }

    this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" });
    if(this.handles.constructor === String) {

      if ( this.handles === "all") {
        this.handles = "n,e,s,w,se,sw,ne,nw";
      }

      n = this.handles.split(",");
      this.handles = {};

      for(i = 0; i < n.length; i++) {

        handle = $.trim(n[i]);
        hname = "ui-resizable-"+handle;
        axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

        // Apply zIndex to all handles - see #7960
        axis.css({ zIndex: o.zIndex });

        //TODO : What's going on here?
        if ("se" === handle) {
          axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
        }

        //Insert into internal handles object and append to element
        this.handles[handle] = ".ui-resizable-"+handle;
        this.element.append(axis);
      }

    }

    this._renderAxis = function(target) {

      var i, axis, padPos, padWrapper;

      target = target || this.element;

      for(i in this.handles) {

        if(this.handles[i].constructor === String) {
          this.handles[i] = $(this.handles[i], this.element).show();
        }

        //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
        if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

          axis = $(this.handles[i], this.element);

          //Checking the correct pad and border
          padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

          //The padding type i have to apply...
          padPos = [ "padding",
            /ne|nw|n/.test(i) ? "Top" :
            /se|sw|s/.test(i) ? "Bottom" :
            /^e$/.test(i) ? "Right" : "Left" ].join("");

          target.css(padPos, padWrapper);

          this._proportionallyResize();

        }

        //TODO: What's that good for? There's not anything to be executed left
        if(!$(this.handles[i]).length) {
          continue;
        }
      }
    };

    //TODO: make renderAxis a prototype function
    this._renderAxis(this.element);

    this._handles = $(".ui-resizable-handle", this.element)
      .disableSelection();

    //Matching axis name
    this._handles.mouseover(function() {
      if (!that.resizing) {
        if (this.className) {
          axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
        }
        //Axis, default = se
        that.axis = axis && axis[1] ? axis[1] : "se";
      }
    });

    //If we want to auto hide the elements
    if (o.autoHide) {
      this._handles.hide();
      $(this.element)
        .addClass("ui-resizable-autohide")
        .mouseenter(function() {
          if (o.disabled) {
            return;
          }
          $(this).removeClass("ui-resizable-autohide");
          that._handles.show();
        })
        .mouseleave(function(){
          if (o.disabled) {
            return;
          }
          if (!that.resizing) {
            $(this).addClass("ui-resizable-autohide");
            that._handles.hide();
          }
        });
    }

    //Initialize the mouse interaction
    this._mouseInit();

  },

  _destroy: function() {

    this._mouseDestroy();

    var wrapper,
      _destroy = function(exp) {
        $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
          .removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
      };

    //TODO: Unwrap at same DOM position
    if (this.elementIsWrapper) {
      _destroy(this.element);
      wrapper = this.element;
      this.originalElement.css({
        position: wrapper.css("position"),
        width: wrapper.outerWidth(),
        height: wrapper.outerHeight(),
        top: wrapper.css("top"),
        left: wrapper.css("left")
      }).insertAfter( wrapper );
      wrapper.remove();
    }

    this.originalElement.css("resize", this.originalResizeStyle);
    _destroy(this.originalElement);

    return this;
  },

  _mouseCapture: function(event) {
    var i, handle,
      capture = false;

    for (i in this.handles) {
      handle = $(this.handles[i])[0];
      if (handle === event.target || $.contains(handle, event.target)) {
        capture = true;
      }
    }

    return !this.options.disabled && capture;
  },

  _mouseStart: function(event) {

    var curleft, curtop, cursor,
      o = this.options,
      iniPos = this.element.position(),
      el = this.element;

    this.resizing = true;

    // bugfix for http://dev.jquery.com/ticket/1749
    if ( (/absolute/).test( el.css("position") ) ) {
      el.css({ position: "absolute", top: el.css("top"), left: el.css("left") });
    } else if (el.is(".ui-draggable")) {
      el.css({ position: "absolute", top: iniPos.top, left: iniPos.left });
    }

    this._renderProxy();

    curleft = num(this.helper.css("left"));
    curtop = num(this.helper.css("top"));

    if (o.containment) {
      curleft += $(o.containment).scrollLeft() || 0;
      curtop += $(o.containment).scrollTop() || 0;
    }

    //Store needed variables
    this.offset = this.helper.offset();
    this.position = { left: curleft, top: curtop };
    this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: el.width(), height: el.height() };
    this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
    this.originalPosition = { left: curleft, top: curtop };
    this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
    this.originalMousePosition = { left: event.pageX, top: event.pageY };

    //Aspect Ratio
    this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

    cursor = $(".ui-resizable-" + this.axis).css("cursor");
    $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

    el.addClass("ui-resizable-resizing");
    this._propagate("start", event);
    return true;
  },

  _mouseDrag: function(event) {

    //Increase performance, avoid regex
    var data,
      el = this.helper, props = {},
      smp = this.originalMousePosition,
      a = this.axis,
      prevTop = this.position.top,
      prevLeft = this.position.left,
      prevWidth = this.size.width,
      prevHeight = this.size.height,
      dx = (event.pageX-smp.left)||0,
      dy = (event.pageY-smp.top)||0,
      trigger = this._change[a];

    if (!trigger) {
      return false;
    }

    // Calculate the attrs that will be change
    data = trigger.apply(this, [event, dx, dy]);

    // Put this in the mouseDrag handler since the user can start pressing shift while resizing
    this._updateVirtualBoundaries(event.shiftKey);
    if (this._aspectRatio || event.shiftKey) {
      data = this._updateRatio(data, event);
    }

    data = this._respectSize(data, event);

    this._updateCache(data);

    // plugins callbacks need to be called first
    this._propagate("resize", event);

    if (this.position.top !== prevTop) {
      props.top = this.position.top + "px";
    }
    if (this.position.left !== prevLeft) {
      props.left = this.position.left + "px";
    }
    if (this.size.width !== prevWidth) {
      props.width = this.size.width + "px";
    }
    if (this.size.height !== prevHeight) {
      props.height = this.size.height + "px";
    }
    el.css(props);

    if (!this._helper && this._proportionallyResizeElements.length) {
      this._proportionallyResize();
    }

    // Call the user callback if the element was resized
    if ( ! $.isEmptyObject(props) ) {
      this._trigger("resize", event, this.ui());
    }

    return false;
  },

  _mouseStop: function(event) {

    this.resizing = false;
    var pr, ista, soffseth, soffsetw, s, left, top,
      o = this.options, that = this;

    if(this._helper) {

      pr = this._proportionallyResizeElements;
      ista = pr.length && (/textarea/i).test(pr[0].nodeName);
      soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
      soffsetw = ista ? 0 : that.sizeDiff.width;

      s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
      left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
      top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

      if (!o.animate) {
        this.element.css($.extend(s, { top: top, left: left }));
      }

      that.helper.height(that.size.height);
      that.helper.width(that.size.width);

      if (this._helper && !o.animate) {
        this._proportionallyResize();
      }
    }

    $("body").css("cursor", "auto");

    this.element.removeClass("ui-resizable-resizing");

    this._propagate("stop", event);

    if (this._helper) {
      this.helper.remove();
    }

    return false;

  },

  _updateVirtualBoundaries: function(forceAspectRatio) {
    var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
      o = this.options;

    b = {
      minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
      maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
      minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
      maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
    };

    if(this._aspectRatio || forceAspectRatio) {
      // We want to create an enclosing box whose aspect ration is the requested one
      // First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
      pMinWidth = b.minHeight * this.aspectRatio;
      pMinHeight = b.minWidth / this.aspectRatio;
      pMaxWidth = b.maxHeight * this.aspectRatio;
      pMaxHeight = b.maxWidth / this.aspectRatio;

      if(pMinWidth > b.minWidth) {
        b.minWidth = pMinWidth;
      }
      if(pMinHeight > b.minHeight) {
        b.minHeight = pMinHeight;
      }
      if(pMaxWidth < b.maxWidth) {
        b.maxWidth = pMaxWidth;
      }
      if(pMaxHeight < b.maxHeight) {
        b.maxHeight = pMaxHeight;
      }
    }
    this._vBoundaries = b;
  },

  _updateCache: function(data) {
    this.offset = this.helper.offset();
    if (isNumber(data.left)) {
      this.position.left = data.left;
    }
    if (isNumber(data.top)) {
      this.position.top = data.top;
    }
    if (isNumber(data.height)) {
      this.size.height = data.height;
    }
    if (isNumber(data.width)) {
      this.size.width = data.width;
    }
  },

  _updateRatio: function( data ) {

    var cpos = this.position,
      csize = this.size,
      a = this.axis;

    if (isNumber(data.height)) {
      data.width = (data.height * this.aspectRatio);
    } else if (isNumber(data.width)) {
      data.height = (data.width / this.aspectRatio);
    }

    if (a === "sw") {
      data.left = cpos.left + (csize.width - data.width);
      data.top = null;
    }
    if (a === "nw") {
      data.top = cpos.top + (csize.height - data.height);
      data.left = cpos.left + (csize.width - data.width);
    }

    return data;
  },

  _respectSize: function( data ) {

    var o = this._vBoundaries,
      a = this.axis,
      ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
      isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
      dw = this.originalPosition.left + this.originalSize.width,
      dh = this.position.top + this.size.height,
      cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
    if (isminw) {
      data.width = o.minWidth;
    }
    if (isminh) {
      data.height = o.minHeight;
    }
    if (ismaxw) {
      data.width = o.maxWidth;
    }
    if (ismaxh) {
      data.height = o.maxHeight;
    }

    if (isminw && cw) {
      data.left = dw - o.minWidth;
    }
    if (ismaxw && cw) {
      data.left = dw - o.maxWidth;
    }
    if (isminh && ch) {
      data.top = dh - o.minHeight;
    }
    if (ismaxh && ch) {
      data.top = dh - o.maxHeight;
    }

    // fixing jump error on top/left - bug #2330
    if (!data.width && !data.height && !data.left && data.top) {
      data.top = null;
    } else if (!data.width && !data.height && !data.top && data.left) {
      data.left = null;
    }

    return data;
  },

  _proportionallyResize: function() {

    if (!this._proportionallyResizeElements.length) {
      return;
    }

    var i, j, borders, paddings, prel,
      element = this.helper || this.element;

    for ( i=0; i < this._proportionallyResizeElements.length; i++) {

      prel = this._proportionallyResizeElements[i];

      if (!this.borderDif) {
        this.borderDif = [];
        borders = [prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth")];
        paddings = [prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft")];

        for ( j = 0; j < borders.length; j++ ) {
          this.borderDif[ j ] = ( parseInt( borders[ j ], 10 ) || 0 ) + ( parseInt( paddings[ j ], 10 ) || 0 );
        }
      }

      prel.css({
        height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
        width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
      });

    }

  },

  _renderProxy: function() {

    var el = this.element, o = this.options;
    this.elementOffset = el.offset();

    if(this._helper) {

      this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

      this.helper.addClass(this._helper).css({
        width: this.element.outerWidth() - 1,
        height: this.element.outerHeight() - 1,
        position: "absolute",
        left: this.elementOffset.left +"px",
        top: this.elementOffset.top +"px",
        zIndex: ++o.zIndex //TODO: Don't modify option
      });

      this.helper
        .appendTo("body")
        .disableSelection();

    } else {
      this.helper = this.element;
    }

  },

  _change: {
    e: function(event, dx) {
      return { width: this.originalSize.width + dx };
    },
    w: function(event, dx) {
      var cs = this.originalSize, sp = this.originalPosition;
      return { left: sp.left + dx, width: cs.width - dx };
    },
    n: function(event, dx, dy) {
      var cs = this.originalSize, sp = this.originalPosition;
      return { top: sp.top + dy, height: cs.height - dy };
    },
    s: function(event, dx, dy) {
      return { height: this.originalSize.height + dy };
    },
    se: function(event, dx, dy) {
      return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
    },
    sw: function(event, dx, dy) {
      return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
    },
    ne: function(event, dx, dy) {
      return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
    },
    nw: function(event, dx, dy) {
      return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
    }
  },

  _propagate: function(n, event) {
    $.ui.plugin.call(this, n, [event, this.ui()]);
    (n !== "resize" && this._trigger(n, event, this.ui()));
  },

  plugins: {},

  ui: function() {
    return {
      originalElement: this.originalElement,
      element: this.element,
      helper: this.helper,
      position: this.position,
      size: this.size,
      originalSize: this.originalSize,
      originalPosition: this.originalPosition
    };
  }

});

/*
 * Resizable Extensions
 */

$.ui.plugin.add("resizable", "animate", {

  stop: function( event ) {
    var that = $(this).data("ui-resizable"),
      o = that.options,
      pr = that._proportionallyResizeElements,
      ista = pr.length && (/textarea/i).test(pr[0].nodeName),
      soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
      soffsetw = ista ? 0 : that.sizeDiff.width,
      style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
      left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
      top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

    that.element.animate(
      $.extend(style, top && left ? { top: top, left: left } : {}), {
        duration: o.animateDuration,
        easing: o.animateEasing,
        step: function() {

          var data = {
            width: parseInt(that.element.css("width"), 10),
            height: parseInt(that.element.css("height"), 10),
            top: parseInt(that.element.css("top"), 10),
            left: parseInt(that.element.css("left"), 10)
          };

          if (pr && pr.length) {
            $(pr[0]).css({ width: data.width, height: data.height });
          }

          // propagating resize, and updating values for each animation step
          that._updateCache(data);
          that._propagate("resize", event);

        }
      }
    );
  }

});

$.ui.plugin.add("resizable", "containment", {

  start: function() {
    var element, p, co, ch, cw, width, height,
      that = $(this).data("ui-resizable"),
      o = that.options,
      el = that.element,
      oc = o.containment,
      ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

    if (!ce) {
      return;
    }

    that.containerElement = $(ce);

    if (/document/.test(oc) || oc === document) {
      that.containerOffset = { left: 0, top: 0 };
      that.containerPosition = { left: 0, top: 0 };

      that.parentData = {
        element: $(document), left: 0, top: 0,
        width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
      };
    }

    // i'm a node, so compute top, left, right, bottom
    else {
      element = $(ce);
      p = [];
      $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

      that.containerOffset = element.offset();
      that.containerPosition = element.position();
      that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

      co = that.containerOffset;
      ch = that.containerSize.height;
      cw = that.containerSize.width;
      width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw );
      height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

      that.parentData = {
        element: ce, left: co.left, top: co.top, width: width, height: height
      };
    }
  },

  resize: function( event ) {
    var woset, hoset, isParent, isOffsetRelative,
      that = $(this).data("ui-resizable"),
      o = that.options,
      co = that.containerOffset, cp = that.position,
      pRatio = that._aspectRatio || event.shiftKey,
      cop = { top:0, left:0 }, ce = that.containerElement;

    if (ce[0] !== document && (/static/).test(ce.css("position"))) {
      cop = co;
    }

    if (cp.left < (that._helper ? co.left : 0)) {
      that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
      if (pRatio) {
        that.size.height = that.size.width / that.aspectRatio;
      }
      that.position.left = o.helper ? co.left : 0;
    }

    if (cp.top < (that._helper ? co.top : 0)) {
      that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
      if (pRatio) {
        that.size.width = that.size.height * that.aspectRatio;
      }
      that.position.top = that._helper ? co.top : 0;
    }

    that.offset.left = that.parentData.left+that.position.left;
    that.offset.top = that.parentData.top+that.position.top;

    woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width );
    hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

    isParent = that.containerElement.get(0) === that.element.parent().get(0);
    isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

    if ( isParent && isOffsetRelative ) {
      woset -= Math.abs( that.parentData.left );
    }

    if (woset + that.size.width >= that.parentData.width) {
      that.size.width = that.parentData.width - woset;
      if (pRatio) {
        that.size.height = that.size.width / that.aspectRatio;
      }
    }

    if (hoset + that.size.height >= that.parentData.height) {
      that.size.height = that.parentData.height - hoset;
      if (pRatio) {
        that.size.width = that.size.height * that.aspectRatio;
      }
    }
  },

  stop: function(){
    var that = $(this).data("ui-resizable"),
      o = that.options,
      co = that.containerOffset,
      cop = that.containerPosition,
      ce = that.containerElement,
      helper = $(that.helper),
      ho = helper.offset(),
      w = helper.outerWidth() - that.sizeDiff.width,
      h = helper.outerHeight() - that.sizeDiff.height;

    if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
      $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
    }

    if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
      $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
    }

  }
});

$.ui.plugin.add("resizable", "alsoResize", {

  start: function () {
    var that = $(this).data("ui-resizable"),
      o = that.options,
      _store = function (exp) {
        $(exp).each(function() {
          var el = $(this);
          el.data("ui-resizable-alsoresize", {
            width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
            left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
          });
        });
      };

    if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
      if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
      else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
    }else{
      _store(o.alsoResize);
    }
  },

  resize: function (event, ui) {
    var that = $(this).data("ui-resizable"),
      o = that.options,
      os = that.originalSize,
      op = that.originalPosition,
      delta = {
        height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
        top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
      },

      _alsoResize = function (exp, c) {
        $(exp).each(function() {
          var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
            css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

          $.each(css, function (i, prop) {
            var sum = (start[prop]||0) + (delta[prop]||0);
            if (sum && sum >= 0) {
              style[prop] = sum || null;
            }
          });

          el.css(style);
        });
      };

    if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
      $.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
    }else{
      _alsoResize(o.alsoResize);
    }
  },

  stop: function () {
    $(this).removeData("resizable-alsoresize");
  }
});

$.ui.plugin.add("resizable", "ghost", {

  start: function() {

    var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;

    that.ghost = that.originalElement.clone();
    that.ghost
      .css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
      .addClass("ui-resizable-ghost")
      .addClass(typeof o.ghost === "string" ? o.ghost : "");

    that.ghost.appendTo(that.helper);

  },

  resize: function(){
    var that = $(this).data("ui-resizable");
    if (that.ghost) {
      that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
    }
  },

  stop: function() {
    var that = $(this).data("ui-resizable");
    if (that.ghost && that.helper) {
      that.helper.get(0).removeChild(that.ghost.get(0));
    }
  }

});

$.ui.plugin.add("resizable", "grid", {

  resize: function() {
    var that = $(this).data("ui-resizable"),
      o = that.options,
      cs = that.size,
      os = that.originalSize,
      op = that.originalPosition,
      a = that.axis,
      grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
      gridX = (grid[0]||1),
      gridY = (grid[1]||1),
      ox = Math.round((cs.width - os.width) / gridX) * gridX,
      oy = Math.round((cs.height - os.height) / gridY) * gridY,
      newWidth = os.width + ox,
      newHeight = os.height + oy,
      isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
      isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
      isMinWidth = o.minWidth && (o.minWidth > newWidth),
      isMinHeight = o.minHeight && (o.minHeight > newHeight);

    o.grid = grid;

    if (isMinWidth) {
      newWidth = newWidth + gridX;
    }
    if (isMinHeight) {
      newHeight = newHeight + gridY;
    }
    if (isMaxWidth) {
      newWidth = newWidth - gridX;
    }
    if (isMaxHeight) {
      newHeight = newHeight - gridY;
    }

    if (/^(se|s|e)$/.test(a)) {
      that.size.width = newWidth;
      that.size.height = newHeight;
    } else if (/^(ne)$/.test(a)) {
      that.size.width = newWidth;
      that.size.height = newHeight;
      that.position.top = op.top - oy;
    } else if (/^(sw)$/.test(a)) {
      that.size.width = newWidth;
      that.size.height = newHeight;
      that.position.left = op.left - ox;
    } else {
      if ( newHeight - gridY > 0 ) {
        that.size.height = newHeight;
        that.position.top = op.top - oy;
      } else {
        that.size.height = gridY;
        that.position.top = op.top + os.height - gridY;
      }
      if ( newWidth - gridX > 0 ) {
        that.size.width = newWidth;
        that.position.left = op.left - ox;
      } else {
        that.size.width = gridX;
        that.position.left = op.left + os.width - gridX;
      }
    }
  }

});

})(jQuery);
(function( $, undefined ) {

$.widget("ui.selectable", $.ui.mouse, {
  version: "1.10.4",
  options: {
    appendTo: "body",
    autoRefresh: true,
    distance: 0,
    filter: "*",
    tolerance: "touch",

    // callbacks
    selected: null,
    selecting: null,
    start: null,
    stop: null,
    unselected: null,
    unselecting: null
  },
  _create: function() {
    var selectees,
      that = this;

    this.element.addClass("ui-selectable");

    this.dragged = false;

    // cache selectee children based on filter
    this.refresh = function() {
      selectees = $(that.options.filter, that.element[0]);
      selectees.addClass("ui-selectee");
      selectees.each(function() {
        var $this = $(this),
          pos = $this.offset();
        $.data(this, "selectable-item", {
          element: this,
          $element: $this,
          left: pos.left,
          top: pos.top,
          right: pos.left + $this.outerWidth(),
          bottom: pos.top + $this.outerHeight(),
          startselected: false,
          selected: $this.hasClass("ui-selected"),
          selecting: $this.hasClass("ui-selecting"),
          unselecting: $this.hasClass("ui-unselecting")
        });
      });
    };
    this.refresh();

    this.selectees = selectees.addClass("ui-selectee");

    this._mouseInit();

    this.helper = $("<div class='ui-selectable-helper'></div>");
  },

  _destroy: function() {
    this.selectees
      .removeClass("ui-selectee")
      .removeData("selectable-item");
    this.element
      .removeClass("ui-selectable ui-selectable-disabled");
    this._mouseDestroy();
  },

  _mouseStart: function(event) {
    var that = this,
      options = this.options;

    this.opos = [event.pageX, event.pageY];

    if (this.options.disabled) {
      return;
    }

    this.selectees = $(options.filter, this.element[0]);

    this._trigger("start", event);

    $(options.appendTo).append(this.helper);
    // position helper (lasso)
    this.helper.css({
      "left": event.pageX,
      "top": event.pageY,
      "width": 0,
      "height": 0
    });

    if (options.autoRefresh) {
      this.refresh();
    }

    this.selectees.filter(".ui-selected").each(function() {
      var selectee = $.data(this, "selectable-item");
      selectee.startselected = true;
      if (!event.metaKey && !event.ctrlKey) {
        selectee.$element.removeClass("ui-selected");
        selectee.selected = false;
        selectee.$element.addClass("ui-unselecting");
        selectee.unselecting = true;
        // selectable UNSELECTING callback
        that._trigger("unselecting", event, {
          unselecting: selectee.element
        });
      }
    });

    $(event.target).parents().addBack().each(function() {
      var doSelect,
        selectee = $.data(this, "selectable-item");
      if (selectee) {
        doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
        selectee.$element
          .removeClass(doSelect ? "ui-unselecting" : "ui-selected")
          .addClass(doSelect ? "ui-selecting" : "ui-unselecting");
        selectee.unselecting = !doSelect;
        selectee.selecting = doSelect;
        selectee.selected = doSelect;
        // selectable (UN)SELECTING callback
        if (doSelect) {
          that._trigger("selecting", event, {
            selecting: selectee.element
          });
        } else {
          that._trigger("unselecting", event, {
            unselecting: selectee.element
          });
        }
        return false;
      }
    });

  },

  _mouseDrag: function(event) {

    this.dragged = true;

    if (this.options.disabled) {
      return;
    }

    var tmp,
      that = this,
      options = this.options,
      x1 = this.opos[0],
      y1 = this.opos[1],
      x2 = event.pageX,
      y2 = event.pageY;

    if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
    if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
    this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

    this.selectees.each(function() {
      var selectee = $.data(this, "selectable-item"),
        hit = false;

      //prevent helper from being selected if appendTo: selectable
      if (!selectee || selectee.element === that.element[0]) {
        return;
      }

      if (options.tolerance === "touch") {
        hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
      } else if (options.tolerance === "fit") {
        hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
      }

      if (hit) {
        // SELECT
        if (selectee.selected) {
          selectee.$element.removeClass("ui-selected");
          selectee.selected = false;
        }
        if (selectee.unselecting) {
          selectee.$element.removeClass("ui-unselecting");
          selectee.unselecting = false;
        }
        if (!selectee.selecting) {
          selectee.$element.addClass("ui-selecting");
          selectee.selecting = true;
          // selectable SELECTING callback
          that._trigger("selecting", event, {
            selecting: selectee.element
          });
        }
      } else {
        // UNSELECT
        if (selectee.selecting) {
          if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
            selectee.$element.removeClass("ui-selecting");
            selectee.selecting = false;
            selectee.$element.addClass("ui-selected");
            selectee.selected = true;
          } else {
            selectee.$element.removeClass("ui-selecting");
            selectee.selecting = false;
            if (selectee.startselected) {
              selectee.$element.addClass("ui-unselecting");
              selectee.unselecting = true;
            }
            // selectable UNSELECTING callback
            that._trigger("unselecting", event, {
              unselecting: selectee.element
            });
          }
        }
        if (selectee.selected) {
          if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
            selectee.$element.removeClass("ui-selected");
            selectee.selected = false;

            selectee.$element.addClass("ui-unselecting");
            selectee.unselecting = true;
            // selectable UNSELECTING callback
            that._trigger("unselecting", event, {
              unselecting: selectee.element
            });
          }
        }
      }
    });

    return false;
  },

  _mouseStop: function(event) {
    var that = this;

    this.dragged = false;

    $(".ui-unselecting", this.element[0]).each(function() {
      var selectee = $.data(this, "selectable-item");
      selectee.$element.removeClass("ui-unselecting");
      selectee.unselecting = false;
      selectee.startselected = false;
      that._trigger("unselected", event, {
        unselected: selectee.element
      });
    });
    $(".ui-selecting", this.element[0]).each(function() {
      var selectee = $.data(this, "selectable-item");
      selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
      selectee.selecting = false;
      selectee.selected = true;
      selectee.startselected = true;
      that._trigger("selected", event, {
        selected: selectee.element
      });
    });
    this._trigger("stop", event);

    this.helper.remove();

    return false;
  }

});

})(jQuery);
(function( $, undefined ) {

// number of pages in a slider
// (how many times can you page up/down to go through the whole range)
var numPages = 5;

$.widget( "ui.slider", $.ui.mouse, {
  version: "1.10.4",
  widgetEventPrefix: "slide",

  options: {
    animate: false,
    distance: 0,
    max: 100,
    min: 0,
    orientation: "horizontal",
    range: false,
    step: 1,
    value: 0,
    values: null,

    // callbacks
    change: null,
    slide: null,
    start: null,
    stop: null
  },

  _create: function() {
    this._keySliding = false;
    this._mouseSliding = false;
    this._animateOff = true;
    this._handleIndex = null;
    this._detectOrientation();
    this._mouseInit();

    this.element
      .addClass( "ui-slider" +
        " ui-slider-" + this.orientation +
        " ui-widget" +
        " ui-widget-content" +
        " ui-corner-all");

    this._refresh();
    this._setOption( "disabled", this.options.disabled );

    this._animateOff = false;
  },

  _refresh: function() {
    this._createRange();
    this._createHandles();
    this._setupEvents();
    this._refreshValue();
  },

  _createHandles: function() {
    var i, handleCount,
      options = this.options,
      existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
      handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
      handles = [];

    handleCount = ( options.values && options.values.length ) || 1;

    if ( existingHandles.length > handleCount ) {
      existingHandles.slice( handleCount ).remove();
      existingHandles = existingHandles.slice( 0, handleCount );
    }

    for ( i = existingHandles.length; i < handleCount; i++ ) {
      handles.push( handle );
    }

    this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

    this.handle = this.handles.eq( 0 );

    this.handles.each(function( i ) {
      $( this ).data( "ui-slider-handle-index", i );
    });
  },

  _createRange: function() {
    var options = this.options,
      classes = "";

    if ( options.range ) {
      if ( options.range === true ) {
        if ( !options.values ) {
          options.values = [ this._valueMin(), this._valueMin() ];
        } else if ( options.values.length && options.values.length !== 2 ) {
          options.values = [ options.values[0], options.values[0] ];
        } else if ( $.isArray( options.values ) ) {
          options.values = options.values.slice(0);
        }
      }

      if ( !this.range || !this.range.length ) {
        this.range = $( "<div></div>" )
          .appendTo( this.element );

        classes = "ui-slider-range" +
        // note: this isn't the most fittingly semantic framework class for this element,
        // but worked best visually with a variety of themes
        " ui-widget-header ui-corner-all";
      } else {
        this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
          // Handle range switching from true to min/max
          .css({
            "left": "",
            "bottom": ""
          });
      }

      this.range.addClass( classes +
        ( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
    } else {
      if ( this.range ) {
        this.range.remove();
      }
      this.range = null;
    }
  },

  _setupEvents: function() {
    var elements = this.handles.add( this.range ).filter( "a" );
    this._off( elements );
    this._on( elements, this._handleEvents );
    this._hoverable( elements );
    this._focusable( elements );
  },

  _destroy: function() {
    this.handles.remove();
    if ( this.range ) {
      this.range.remove();
    }

    this.element
      .removeClass( "ui-slider" +
        " ui-slider-horizontal" +
        " ui-slider-vertical" +
        " ui-widget" +
        " ui-widget-content" +
        " ui-corner-all" );

    this._mouseDestroy();
  },

  _mouseCapture: function( event ) {
    var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
      that = this,
      o = this.options;

    if ( o.disabled ) {
      return false;
    }

    this.elementSize = {
      width: this.element.outerWidth(),
      height: this.element.outerHeight()
    };
    this.elementOffset = this.element.offset();

    position = { x: event.pageX, y: event.pageY };
    normValue = this._normValueFromMouse( position );
    distance = this._valueMax() - this._valueMin() + 1;
    this.handles.each(function( i ) {
      var thisDistance = Math.abs( normValue - that.values(i) );
      if (( distance > thisDistance ) ||
        ( distance === thisDistance &&
          (i === that._lastChangedValue || that.values(i) === o.min ))) {
        distance = thisDistance;
        closestHandle = $( this );
        index = i;
      }
    });

    allowed = this._start( event, index );
    if ( allowed === false ) {
      return false;
    }
    this._mouseSliding = true;

    this._handleIndex = index;

    closestHandle
      .addClass( "ui-state-active" )
      .focus();

    offset = closestHandle.offset();
    mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
    this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
      left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
      top: event.pageY - offset.top -
        ( closestHandle.height() / 2 ) -
        ( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
        ( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
        ( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
    };

    if ( !this.handles.hasClass( "ui-state-hover" ) ) {
      this._slide( event, index, normValue );
    }
    this._animateOff = true;
    return true;
  },

  _mouseStart: function() {
    return true;
  },

  _mouseDrag: function( event ) {
    var position = { x: event.pageX, y: event.pageY },
      normValue = this._normValueFromMouse( position );

    this._slide( event, this._handleIndex, normValue );

    return false;
  },

  _mouseStop: function( event ) {
    this.handles.removeClass( "ui-state-active" );
    this._mouseSliding = false;

    this._stop( event, this._handleIndex );
    this._change( event, this._handleIndex );

    this._handleIndex = null;
    this._clickOffset = null;
    this._animateOff = false;

    return false;
  },

  _detectOrientation: function() {
    this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
  },

  _normValueFromMouse: function( position ) {
    var pixelTotal,
      pixelMouse,
      percentMouse,
      valueTotal,
      valueMouse;

    if ( this.orientation === "horizontal" ) {
      pixelTotal = this.elementSize.width;
      pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
    } else {
      pixelTotal = this.elementSize.height;
      pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
    }

    percentMouse = ( pixelMouse / pixelTotal );
    if ( percentMouse > 1 ) {
      percentMouse = 1;
    }
    if ( percentMouse < 0 ) {
      percentMouse = 0;
    }
    if ( this.orientation === "vertical" ) {
      percentMouse = 1 - percentMouse;
    }

    valueTotal = this._valueMax() - this._valueMin();
    valueMouse = this._valueMin() + percentMouse * valueTotal;

    return this._trimAlignValue( valueMouse );
  },

  _start: function( event, index ) {
    var uiHash = {
      handle: this.handles[ index ],
      value: this.value()
    };
    if ( this.options.values && this.options.values.length ) {
      uiHash.value = this.values( index );
      uiHash.values = this.values();
    }
    return this._trigger( "start", event, uiHash );
  },

  _slide: function( event, index, newVal ) {
    var otherVal,
      newValues,
      allowed;

    if ( this.options.values && this.options.values.length ) {
      otherVal = this.values( index ? 0 : 1 );

      if ( ( this.options.values.length === 2 && this.options.range === true ) &&
          ( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
        ) {
        newVal = otherVal;
      }

      if ( newVal !== this.values( index ) ) {
        newValues = this.values();
        newValues[ index ] = newVal;
        // A slide can be canceled by returning false from the slide callback
        allowed = this._trigger( "slide", event, {
          handle: this.handles[ index ],
          value: newVal,
          values: newValues
        } );
        otherVal = this.values( index ? 0 : 1 );
        if ( allowed !== false ) {
          this.values( index, newVal );
        }
      }
    } else {
      if ( newVal !== this.value() ) {
        // A slide can be canceled by returning false from the slide callback
        allowed = this._trigger( "slide", event, {
          handle: this.handles[ index ],
          value: newVal
        } );
        if ( allowed !== false ) {
          this.value( newVal );
        }
      }
    }
  },

  _stop: function( event, index ) {
    var uiHash = {
      handle: this.handles[ index ],
      value: this.value()
    };
    if ( this.options.values && this.options.values.length ) {
      uiHash.value = this.values( index );
      uiHash.values = this.values();
    }

    this._trigger( "stop", event, uiHash );
  },

  _change: function( event, index ) {
    if ( !this._keySliding && !this._mouseSliding ) {
      var uiHash = {
        handle: this.handles[ index ],
        value: this.value()
      };
      if ( this.options.values && this.options.values.length ) {
        uiHash.value = this.values( index );
        uiHash.values = this.values();
      }

      //store the last changed value index for reference when handles overlap
      this._lastChangedValue = index;

      this._trigger( "change", event, uiHash );
    }
  },

  value: function( newValue ) {
    if ( arguments.length ) {
      this.options.value = this._trimAlignValue( newValue );
      this._refreshValue();
      this._change( null, 0 );
      return;
    }

    return this._value();
  },

  values: function( index, newValue ) {
    var vals,
      newValues,
      i;

    if ( arguments.length > 1 ) {
      this.options.values[ index ] = this._trimAlignValue( newValue );
      this._refreshValue();
      this._change( null, index );
      return;
    }

    if ( arguments.length ) {
      if ( $.isArray( arguments[ 0 ] ) ) {
        vals = this.options.values;
        newValues = arguments[ 0 ];
        for ( i = 0; i < vals.length; i += 1 ) {
          vals[ i ] = this._trimAlignValue( newValues[ i ] );
          this._change( null, i );
        }
        this._refreshValue();
      } else {
        if ( this.options.values && this.options.values.length ) {
          return this._values( index );
        } else {
          return this.value();
        }
      }
    } else {
      return this._values();
    }
  },

  _setOption: function( key, value ) {
    var i,
      valsLength = 0;

    if ( key === "range" && this.options.range === true ) {
      if ( value === "min" ) {
        this.options.value = this._values( 0 );
        this.options.values = null;
      } else if ( value === "max" ) {
        this.options.value = this._values( this.options.values.length-1 );
        this.options.values = null;
      }
    }

    if ( $.isArray( this.options.values ) ) {
      valsLength = this.options.values.length;
    }

    $.Widget.prototype._setOption.apply( this, arguments );

    switch ( key ) {
      case "orientation":
        this._detectOrientation();
        this.element
          .removeClass( "ui-slider-horizontal ui-slider-vertical" )
          .addClass( "ui-slider-" + this.orientation );
        this._refreshValue();
        break;
      case "value":
        this._animateOff = true;
        this._refreshValue();
        this._change( null, 0 );
        this._animateOff = false;
        break;
      case "values":
        this._animateOff = true;
        this._refreshValue();
        for ( i = 0; i < valsLength; i += 1 ) {
          this._change( null, i );
        }
        this._animateOff = false;
        break;
      case "min":
      case "max":
        this._animateOff = true;
        this._refreshValue();
        this._animateOff = false;
        break;
      case "range":
        this._animateOff = true;
        this._refresh();
        this._animateOff = false;
        break;
    }
  },

  //internal value getter
  // _value() returns value trimmed by min and max, aligned by step
  _value: function() {
    var val = this.options.value;
    val = this._trimAlignValue( val );

    return val;
  },

  //internal values getter
  // _values() returns array of values trimmed by min and max, aligned by step
  // _values( index ) returns single value trimmed by min and max, aligned by step
  _values: function( index ) {
    var val,
      vals,
      i;

    if ( arguments.length ) {
      val = this.options.values[ index ];
      val = this._trimAlignValue( val );

      return val;
    } else if ( this.options.values && this.options.values.length ) {
      // .slice() creates a copy of the array
      // this copy gets trimmed by min and max and then returned
      vals = this.options.values.slice();
      for ( i = 0; i < vals.length; i+= 1) {
        vals[ i ] = this._trimAlignValue( vals[ i ] );
      }

      return vals;
    } else {
      return [];
    }
  },

  // returns the step-aligned value that val is closest to, between (inclusive) min and max
  _trimAlignValue: function( val ) {
    if ( val <= this._valueMin() ) {
      return this._valueMin();
    }
    if ( val >= this._valueMax() ) {
      return this._valueMax();
    }
    var step = ( this.options.step > 0 ) ? this.options.step : 1,
      valModStep = (val - this._valueMin()) % step,
      alignValue = val - valModStep;

    if ( Math.abs(valModStep) * 2 >= step ) {
      alignValue += ( valModStep > 0 ) ? step : ( -step );
    }

    // Since JavaScript has problems with large floats, round
    // the final value to 5 digits after the decimal point (see #4124)
    return parseFloat( alignValue.toFixed(5) );
  },

  _valueMin: function() {
    return this.options.min;
  },

  _valueMax: function() {
    return this.options.max;
  },

  _refreshValue: function() {
    var lastValPercent, valPercent, value, valueMin, valueMax,
      oRange = this.options.range,
      o = this.options,
      that = this,
      animate = ( !this._animateOff ) ? o.animate : false,
      _set = {};

    if ( this.options.values && this.options.values.length ) {
      this.handles.each(function( i ) {
        valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
        _set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
        $( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
        if ( that.options.range === true ) {
          if ( that.orientation === "horizontal" ) {
            if ( i === 0 ) {
              that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
            }
            if ( i === 1 ) {
              that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
            }
          } else {
            if ( i === 0 ) {
              that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
            }
            if ( i === 1 ) {
              that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
            }
          }
        }
        lastValPercent = valPercent;
      });
    } else {
      value = this.value();
      valueMin = this._valueMin();
      valueMax = this._valueMax();
      valPercent = ( valueMax !== valueMin ) ?
          ( value - valueMin ) / ( valueMax - valueMin ) * 100 :
          0;
      _set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
      this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

      if ( oRange === "min" && this.orientation === "horizontal" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
      }
      if ( oRange === "max" && this.orientation === "horizontal" ) {
        this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
      }
      if ( oRange === "min" && this.orientation === "vertical" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
      }
      if ( oRange === "max" && this.orientation === "vertical" ) {
        this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
      }
    }
  },

  _handleEvents: {
    keydown: function( event ) {
      var allowed, curVal, newVal, step,
        index = $( event.target ).data( "ui-slider-handle-index" );

      switch ( event.keyCode ) {
        case $.ui.keyCode.HOME:
        case $.ui.keyCode.END:
        case $.ui.keyCode.PAGE_UP:
        case $.ui.keyCode.PAGE_DOWN:
        case $.ui.keyCode.UP:
        case $.ui.keyCode.RIGHT:
        case $.ui.keyCode.DOWN:
        case $.ui.keyCode.LEFT:
          event.preventDefault();
          if ( !this._keySliding ) {
            this._keySliding = true;
            $( event.target ).addClass( "ui-state-active" );
            allowed = this._start( event, index );
            if ( allowed === false ) {
              return;
            }
          }
          break;
      }

      step = this.options.step;
      if ( this.options.values && this.options.values.length ) {
        curVal = newVal = this.values( index );
      } else {
        curVal = newVal = this.value();
      }

      switch ( event.keyCode ) {
        case $.ui.keyCode.HOME:
          newVal = this._valueMin();
          break;
        case $.ui.keyCode.END:
          newVal = this._valueMax();
          break;
        case $.ui.keyCode.PAGE_UP:
          newVal = this._trimAlignValue( curVal + ( (this._valueMax() - this._valueMin()) / numPages ) );
          break;
        case $.ui.keyCode.PAGE_DOWN:
          newVal = this._trimAlignValue( curVal - ( (this._valueMax() - this._valueMin()) / numPages ) );
          break;
        case $.ui.keyCode.UP:
        case $.ui.keyCode.RIGHT:
          if ( curVal === this._valueMax() ) {
            return;
          }
          newVal = this._trimAlignValue( curVal + step );
          break;
        case $.ui.keyCode.DOWN:
        case $.ui.keyCode.LEFT:
          if ( curVal === this._valueMin() ) {
            return;
          }
          newVal = this._trimAlignValue( curVal - step );
          break;
      }

      this._slide( event, index, newVal );
    },
    click: function( event ) {
      event.preventDefault();
    },
    keyup: function( event ) {
      var index = $( event.target ).data( "ui-slider-handle-index" );

      if ( this._keySliding ) {
        this._keySliding = false;
        this._stop( event, index );
        this._change( event, index );
        $( event.target ).removeClass( "ui-state-active" );
      }
    }
  }

});

}(jQuery));
(function( $, undefined ) {

function isOverAxis( x, reference, size ) {
  return ( x > reference ) && ( x < ( reference + size ) );
}

function isFloating(item) {
  return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
}

$.widget("ui.sortable", $.ui.mouse, {
  version: "1.10.4",
  widgetEventPrefix: "sort",
  ready: false,
  options: {
    appendTo: "parent",
    axis: false,
    connectWith: false,
    containment: false,
    cursor: "auto",
    cursorAt: false,
    dropOnEmpty: true,
    forcePlaceholderSize: false,
    forceHelperSize: false,
    grid: false,
    handle: false,
    helper: "original",
    items: "> *",
    opacity: false,
    placeholder: false,
    revert: false,
    scroll: true,
    scrollSensitivity: 20,
    scrollSpeed: 20,
    scope: "default",
    tolerance: "intersect",
    zIndex: 1000,

    // callbacks
    activate: null,
    beforeStop: null,
    change: null,
    deactivate: null,
    out: null,
    over: null,
    receive: null,
    remove: null,
    sort: null,
    start: null,
    stop: null,
    update: null
  },
  _create: function() {

    var o = this.options;
    this.containerCache = {};
    this.element.addClass("ui-sortable");

    //Get the items
    this.refresh();

    //Let's determine if the items are being displayed horizontally
    this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;

    //Let's determine the parent's offset
    this.offset = this.element.offset();

    //Initialize mouse events for interaction
    this._mouseInit();

    //We're ready to go
    this.ready = true;

  },

  _destroy: function() {
    this.element
      .removeClass("ui-sortable ui-sortable-disabled");
    this._mouseDestroy();

    for ( var i = this.items.length - 1; i >= 0; i-- ) {
      this.items[i].item.removeData(this.widgetName + "-item");
    }

    return this;
  },

  _setOption: function(key, value){
    if ( key === "disabled" ) {
      this.options[ key ] = value;

      this.widget().toggleClass( "ui-sortable-disabled", !!value );
    } else {
      // Don't call widget base _setOption for disable as it adds ui-state-disabled class
      $.Widget.prototype._setOption.apply(this, arguments);
    }
  },

  _mouseCapture: function(event, overrideHandle) {
    var currentItem = null,
      validHandle = false,
      that = this;

    if (this.reverting) {
      return false;
    }

    if(this.options.disabled || this.options.type === "static") {
      return false;
    }

    //We have to refresh the items data once first
    this._refreshItems(event);

    //Find out if the clicked node (or one of its parents) is a actual item in this.items
    $(event.target).parents().each(function() {
      if($.data(this, that.widgetName + "-item") === that) {
        currentItem = $(this);
        return false;
      }
    });
    if($.data(event.target, that.widgetName + "-item") === that) {
      currentItem = $(event.target);
    }

    if(!currentItem) {
      return false;
    }
    if(this.options.handle && !overrideHandle) {
      $(this.options.handle, currentItem).find("*").addBack().each(function() {
        if(this === event.target) {
          validHandle = true;
        }
      });
      if(!validHandle) {
        return false;
      }
    }

    this.currentItem = currentItem;
    this._removeCurrentsFromItems();
    return true;

  },

  _mouseStart: function(event, overrideHandle, noActivation) {

    var i, body,
      o = this.options;

    this.currentContainer = this;

    //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
    this.refreshPositions();

    //Create and append the visible helper
    this.helper = this._createHelper(event);

    //Cache the helper size
    this._cacheHelperProportions();

    /*
     * - Position generation -
     * This block generates everything position related - it's the core of draggables.
     */

    //Cache the margins of the original element
    this._cacheMargins();

    //Get the next scrolling parent
    this.scrollParent = this.helper.scrollParent();

    //The element's absolute position on the page minus margins
    this.offset = this.currentItem.offset();
    this.offset = {
      top: this.offset.top - this.margins.top,
      left: this.offset.left - this.margins.left
    };

    $.extend(this.offset, {
      click: { //Where the click happened, relative to the element
        left: event.pageX - this.offset.left,
        top: event.pageY - this.offset.top
      },
      parent: this._getParentOffset(),
      relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
    });

    // Only after we got the offset, we can change the helper's position to absolute
    // TODO: Still need to figure out a way to make relative sorting possible
    this.helper.css("position", "absolute");
    this.cssPosition = this.helper.css("position");

    //Generate the original position
    this.originalPosition = this._generatePosition(event);
    this.originalPageX = event.pageX;
    this.originalPageY = event.pageY;

    //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
    (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

    //Cache the former DOM position
    this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

    //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
    if(this.helper[0] !== this.currentItem[0]) {
      this.currentItem.hide();
    }

    //Create the placeholder
    this._createPlaceholder();

    //Set a containment if given in the options
    if(o.containment) {
      this._setContainment();
    }

    if( o.cursor && o.cursor !== "auto" ) { // cursor option
      body = this.document.find( "body" );

      // support: IE
      this.storedCursor = body.css( "cursor" );
      body.css( "cursor", o.cursor );

      this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
    }

    if(o.opacity) { // opacity option
      if (this.helper.css("opacity")) {
        this._storedOpacity = this.helper.css("opacity");
      }
      this.helper.css("opacity", o.opacity);
    }

    if(o.zIndex) { // zIndex option
      if (this.helper.css("zIndex")) {
        this._storedZIndex = this.helper.css("zIndex");
      }
      this.helper.css("zIndex", o.zIndex);
    }

    //Prepare scrolling
    if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
      this.overflowOffset = this.scrollParent.offset();
    }

    //Call callbacks
    this._trigger("start", event, this._uiHash());

    //Recache the helper size
    if(!this._preserveHelperProportions) {
      this._cacheHelperProportions();
    }


    //Post "activate" events to possible containers
    if( !noActivation ) {
      for ( i = this.containers.length - 1; i >= 0; i-- ) {
        this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
      }
    }

    //Prepare possible droppables
    if($.ui.ddmanager) {
      $.ui.ddmanager.current = this;
    }

    if ($.ui.ddmanager && !o.dropBehaviour) {
      $.ui.ddmanager.prepareOffsets(this, event);
    }

    this.dragging = true;

    this.helper.addClass("ui-sortable-helper");
    this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
    return true;

  },

  _mouseDrag: function(event) {
    var i, item, itemElement, intersection,
      o = this.options,
      scrolled = false;

    //Compute the helpers position
    this.position = this._generatePosition(event);
    this.positionAbs = this._convertPositionTo("absolute");

    if (!this.lastPositionAbs) {
      this.lastPositionAbs = this.positionAbs;
    }

    //Do scrolling
    if(this.options.scroll) {
      if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

        if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
          this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
        } else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
          this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
        }

        if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
          this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
        } else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
          this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
        }

      } else {

        if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
          scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
        } else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
          scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
        }

        if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
          scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
        } else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
          scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
        }

      }

      if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(this, event);
      }
    }

    //Regenerate the absolute position used for position checks
    this.positionAbs = this._convertPositionTo("absolute");

    //Set the helper position
    if(!this.options.axis || this.options.axis !== "y") {
      this.helper[0].style.left = this.position.left+"px";
    }
    if(!this.options.axis || this.options.axis !== "x") {
      this.helper[0].style.top = this.position.top+"px";
    }

    //Rearrange
    for (i = this.items.length - 1; i >= 0; i--) {

      //Cache variables and intersection, continue if no intersection
      item = this.items[i];
      itemElement = item.item[0];
      intersection = this._intersectsWithPointer(item);
      if (!intersection) {
        continue;
      }

      // Only put the placeholder inside the current Container, skip all
      // items from other containers. This works because when moving
      // an item from one container to another the
      // currentContainer is switched before the placeholder is moved.
      //
      // Without this, moving items in "sub-sortables" can cause
      // the placeholder to jitter beetween the outer and inner container.
      if (item.instance !== this.currentContainer) {
        continue;
      }

      // cannot intersect with itself
      // no useless actions that have been done before
      // no action if the item moved is the parent of the item checked
      if (itemElement !== this.currentItem[0] &&
        this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
        !$.contains(this.placeholder[0], itemElement) &&
        (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
      ) {

        this.direction = intersection === 1 ? "down" : "up";

        if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
          this._rearrange(event, item);
        } else {
          break;
        }

        this._trigger("change", event, this._uiHash());
        break;
      }
    }

    //Post events to containers
    this._contactContainers(event);

    //Interconnect with droppables
    if($.ui.ddmanager) {
      $.ui.ddmanager.drag(this, event);
    }

    //Call callbacks
    this._trigger("sort", event, this._uiHash());

    this.lastPositionAbs = this.positionAbs;
    return false;

  },

  _mouseStop: function(event, noPropagation) {

    if(!event) {
      return;
    }

    //If we are using droppables, inform the manager about the drop
    if ($.ui.ddmanager && !this.options.dropBehaviour) {
      $.ui.ddmanager.drop(this, event);
    }

    if(this.options.revert) {
      var that = this,
        cur = this.placeholder.offset(),
        axis = this.options.axis,
        animation = {};

      if ( !axis || axis === "x" ) {
        animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
      }
      if ( !axis || axis === "y" ) {
        animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
      }
      this.reverting = true;
      $(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
        that._clear(event);
      });
    } else {
      this._clear(event, noPropagation);
    }

    return false;

  },

  cancel: function() {

    if(this.dragging) {

      this._mouseUp({ target: null });

      if(this.options.helper === "original") {
        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
      } else {
        this.currentItem.show();
      }

      //Post deactivating events to containers
      for (var i = this.containers.length - 1; i >= 0; i--){
        this.containers[i]._trigger("deactivate", null, this._uiHash(this));
        if(this.containers[i].containerCache.over) {
          this.containers[i]._trigger("out", null, this._uiHash(this));
          this.containers[i].containerCache.over = 0;
        }
      }

    }

    if (this.placeholder) {
      //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
      if(this.placeholder[0].parentNode) {
        this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
      }
      if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
        this.helper.remove();
      }

      $.extend(this, {
        helper: null,
        dragging: false,
        reverting: false,
        _noFinalSort: null
      });

      if(this.domPosition.prev) {
        $(this.domPosition.prev).after(this.currentItem);
      } else {
        $(this.domPosition.parent).prepend(this.currentItem);
      }
    }

    return this;

  },

  serialize: function(o) {

    var items = this._getItemsAsjQuery(o && o.connected),
      str = [];
    o = o || {};

    $(items).each(function() {
      var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
      if (res) {
        str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
      }
    });

    if(!str.length && o.key) {
      str.push(o.key + "=");
    }

    return str.join("&");

  },

  toArray: function(o) {

    var items = this._getItemsAsjQuery(o && o.connected),
      ret = [];

    o = o || {};

    items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
    return ret;

  },

  /* Be careful with the following core functions */
  _intersectsWith: function(item) {

    var x1 = this.positionAbs.left,
      x2 = x1 + this.helperProportions.width,
      y1 = this.positionAbs.top,
      y2 = y1 + this.helperProportions.height,
      l = item.left,
      r = l + item.width,
      t = item.top,
      b = t + item.height,
      dyClick = this.offset.click.top,
      dxClick = this.offset.click.left,
      isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
      isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
      isOverElement = isOverElementHeight && isOverElementWidth;

    if ( this.options.tolerance === "pointer" ||
      this.options.forcePointerForContainers ||
      (this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
    ) {
      return isOverElement;
    } else {

      return (l < x1 + (this.helperProportions.width / 2) && // Right Half
        x2 - (this.helperProportions.width / 2) < r && // Left Half
        t < y1 + (this.helperProportions.height / 2) && // Bottom Half
        y2 - (this.helperProportions.height / 2) < b ); // Top Half

    }
  },

  _intersectsWithPointer: function(item) {

    var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
      isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
      isOverElement = isOverElementHeight && isOverElementWidth,
      verticalDirection = this._getDragVerticalDirection(),
      horizontalDirection = this._getDragHorizontalDirection();

    if (!isOverElement) {
      return false;
    }

    return this.floating ?
      ( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
      : ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

  },

  _intersectsWithSides: function(item) {

    var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
      isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
      verticalDirection = this._getDragVerticalDirection(),
      horizontalDirection = this._getDragHorizontalDirection();

    if (this.floating && horizontalDirection) {
      return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
    } else {
      return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
    }

  },

  _getDragVerticalDirection: function() {
    var delta = this.positionAbs.top - this.lastPositionAbs.top;
    return delta !== 0 && (delta > 0 ? "down" : "up");
  },

  _getDragHorizontalDirection: function() {
    var delta = this.positionAbs.left - this.lastPositionAbs.left;
    return delta !== 0 && (delta > 0 ? "right" : "left");
  },

  refresh: function(event) {
    this._refreshItems(event);
    this.refreshPositions();
    return this;
  },

  _connectWith: function() {
    var options = this.options;
    return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
  },

  _getItemsAsjQuery: function(connected) {

    var i, j, cur, inst,
      items = [],
      queries = [],
      connectWith = this._connectWith();

    if(connectWith && connected) {
      for (i = connectWith.length - 1; i >= 0; i--){
        cur = $(connectWith[i]);
        for ( j = cur.length - 1; j >= 0; j--){
          inst = $.data(cur[j], this.widgetFullName);
          if(inst && inst !== this && !inst.options.disabled) {
            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
          }
        }
      }
    }

    queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

    function addItems() {
      items.push( this );
    }
    for (i = queries.length - 1; i >= 0; i--){
      queries[i][0].each( addItems );
    }

    return $(items);

  },

  _removeCurrentsFromItems: function() {

    var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

    this.items = $.grep(this.items, function (item) {
      for (var j=0; j < list.length; j++) {
        if(list[j] === item.item[0]) {
          return false;
        }
      }
      return true;
    });

  },

  _refreshItems: function(event) {

    this.items = [];
    this.containers = [this];

    var i, j, cur, inst, targetData, _queries, item, queriesLength,
      items = this.items,
      queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
      connectWith = this._connectWith();

    if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
      for (i = connectWith.length - 1; i >= 0; i--){
        cur = $(connectWith[i]);
        for (j = cur.length - 1; j >= 0; j--){
          inst = $.data(cur[j], this.widgetFullName);
          if(inst && inst !== this && !inst.options.disabled) {
            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
            this.containers.push(inst);
          }
        }
      }
    }

    for (i = queries.length - 1; i >= 0; i--) {
      targetData = queries[i][1];
      _queries = queries[i][0];

      for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
        item = $(_queries[j]);

        item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

        items.push({
          item: item,
          instance: targetData,
          width: 0, height: 0,
          left: 0, top: 0
        });
      }
    }

  },

  refreshPositions: function(fast) {

    //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
    if(this.offsetParent && this.helper) {
      this.offset.parent = this._getParentOffset();
    }

    var i, item, t, p;

    for (i = this.items.length - 1; i >= 0; i--){
      item = this.items[i];

      //We ignore calculating positions of all connected containers when we're not over them
      if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
        continue;
      }

      t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

      if (!fast) {
        item.width = t.outerWidth();
        item.height = t.outerHeight();
      }

      p = t.offset();
      item.left = p.left;
      item.top = p.top;
    }

    if(this.options.custom && this.options.custom.refreshContainers) {
      this.options.custom.refreshContainers.call(this);
    } else {
      for (i = this.containers.length - 1; i >= 0; i--){
        p = this.containers[i].element.offset();
        this.containers[i].containerCache.left = p.left;
        this.containers[i].containerCache.top = p.top;
        this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
        this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
      }
    }

    return this;
  },

  _createPlaceholder: function(that) {
    that = that || this;
    var className,
      o = that.options;

    if(!o.placeholder || o.placeholder.constructor === String) {
      className = o.placeholder;
      o.placeholder = {
        element: function() {

          var nodeName = that.currentItem[0].nodeName.toLowerCase(),
            element = $( "<" + nodeName + ">", that.document[0] )
              .addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
              .removeClass("ui-sortable-helper");

          if ( nodeName === "tr" ) {
            that.currentItem.children().each(function() {
              $( "<td>&#160;</td>", that.document[0] )
                .attr( "colspan", $( this ).attr( "colspan" ) || 1 )
                .appendTo( element );
            });
          } else if ( nodeName === "img" ) {
            element.attr( "src", that.currentItem.attr( "src" ) );
          }

          if ( !className ) {
            element.css( "visibility", "hidden" );
          }

          return element;
        },
        update: function(container, p) {

          // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
          // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
          if(className && !o.forcePlaceholderSize) {
            return;
          }

          //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
          if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
          if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
        }
      };
    }

    //Create the placeholder
    that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

    //Append it after the actual current item
    that.currentItem.after(that.placeholder);

    //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
    o.placeholder.update(that, that.placeholder);

  },

  _contactContainers: function(event) {
    var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating,
      innermostContainer = null,
      innermostIndex = null;

    // get innermost container that intersects with item
    for (i = this.containers.length - 1; i >= 0; i--) {

      // never consider a container that's located within the item itself
      if($.contains(this.currentItem[0], this.containers[i].element[0])) {
        continue;
      }

      if(this._intersectsWith(this.containers[i].containerCache)) {

        // if we've already found a container and it's more "inner" than this, then continue
        if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
          continue;
        }

        innermostContainer = this.containers[i];
        innermostIndex = i;

      } else {
        // container doesn't intersect. trigger "out" event if necessary
        if(this.containers[i].containerCache.over) {
          this.containers[i]._trigger("out", event, this._uiHash(this));
          this.containers[i].containerCache.over = 0;
        }
      }

    }

    // if no intersecting containers found, return
    if(!innermostContainer) {
      return;
    }

    // move the item into the container if it's not there already
    if(this.containers.length === 1) {
      if (!this.containers[innermostIndex].containerCache.over) {
        this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
        this.containers[innermostIndex].containerCache.over = 1;
      }
    } else {

      //When entering a new container, we will find the item with the least distance and append our item near it
      dist = 10000;
      itemWithLeastDistance = null;
      floating = innermostContainer.floating || isFloating(this.currentItem);
      posProperty = floating ? "left" : "top";
      sizeProperty = floating ? "width" : "height";
      base = this.positionAbs[posProperty] + this.offset.click[posProperty];
      for (j = this.items.length - 1; j >= 0; j--) {
        if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
          continue;
        }
        if(this.items[j].item[0] === this.currentItem[0]) {
          continue;
        }
        if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) {
          continue;
        }
        cur = this.items[j].item.offset()[posProperty];
        nearBottom = false;
        if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){
          nearBottom = true;
          cur += this.items[j][sizeProperty];
        }

        if(Math.abs(cur - base) < dist) {
          dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
          this.direction = nearBottom ? "up": "down";
        }
      }

      //Check if dropOnEmpty is enabled
      if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
        return;
      }

      if(this.currentContainer === this.containers[innermostIndex]) {
        return;
      }

      itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
      this._trigger("change", event, this._uiHash());
      this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
      this.currentContainer = this.containers[innermostIndex];

      //Update the placeholder
      this.options.placeholder.update(this.currentContainer, this.placeholder);

      this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
      this.containers[innermostIndex].containerCache.over = 1;
    }


  },

  _createHelper: function(event) {

    var o = this.options,
      helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

    //Add the helper to the DOM if that didn't happen already
    if(!helper.parents("body").length) {
      $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
    }

    if(helper[0] === this.currentItem[0]) {
      this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
    }

    if(!helper[0].style.width || o.forceHelperSize) {
      helper.width(this.currentItem.width());
    }
    if(!helper[0].style.height || o.forceHelperSize) {
      helper.height(this.currentItem.height());
    }

    return helper;

  },

  _adjustOffsetFromHelper: function(obj) {
    if (typeof obj === "string") {
      obj = obj.split(" ");
    }
    if ($.isArray(obj)) {
      obj = {left: +obj[0], top: +obj[1] || 0};
    }
    if ("left" in obj) {
      this.offset.click.left = obj.left + this.margins.left;
    }
    if ("right" in obj) {
      this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
    }
    if ("top" in obj) {
      this.offset.click.top = obj.top + this.margins.top;
    }
    if ("bottom" in obj) {
      this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
    }
  },

  _getParentOffset: function() {


    //Get the offsetParent and cache its position
    this.offsetParent = this.helper.offsetParent();
    var po = this.offsetParent.offset();

    // This is a special case where we need to modify a offset calculated on start, since the following happened:
    // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
    // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
    //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
    if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
      po.left += this.scrollParent.scrollLeft();
      po.top += this.scrollParent.scrollTop();
    }

    // This needs to be actually done for all browsers, since pageX/pageY includes this information
    // with an ugly IE fix
    if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
      po = { top: 0, left: 0 };
    }

    return {
      top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
      left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
    };

  },

  _getRelativeOffset: function() {

    if(this.cssPosition === "relative") {
      var p = this.currentItem.position();
      return {
        top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
        left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
      };
    } else {
      return { top: 0, left: 0 };
    }

  },

  _cacheMargins: function() {
    this.margins = {
      left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
      top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
    };
  },

  _cacheHelperProportions: function() {
    this.helperProportions = {
      width: this.helper.outerWidth(),
      height: this.helper.outerHeight()
    };
  },

  _setContainment: function() {

    var ce, co, over,
      o = this.options;
    if(o.containment === "parent") {
      o.containment = this.helper[0].parentNode;
    }
    if(o.containment === "document" || o.containment === "window") {
      this.containment = [
        0 - this.offset.relative.left - this.offset.parent.left,
        0 - this.offset.relative.top - this.offset.parent.top,
        $(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
        ($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
      ];
    }

    if(!(/^(document|window|parent)$/).test(o.containment)) {
      ce = $(o.containment)[0];
      co = $(o.containment).offset();
      over = ($(ce).css("overflow") !== "hidden");

      this.containment = [
        co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
        co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
        co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
        co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
      ];
    }

  },

  _convertPositionTo: function(d, pos) {

    if(!pos) {
      pos = this.position;
    }
    var mod = d === "absolute" ? 1 : -1,
      scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
      scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

    return {
      top: (
        pos.top +                               // The absolute mouse position
        this.offset.relative.top * mod +                    // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.top * mod -                      // The offsetParent's offset without borders (offset + border)
        ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
      ),
      left: (
        pos.left +                                // The absolute mouse position
        this.offset.relative.left * mod +                   // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.left * mod -                   // The offsetParent's offset without borders (offset + border)
        ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
      )
    };

  },

  _generatePosition: function(event) {

    var top, left,
      o = this.options,
      pageX = event.pageX,
      pageY = event.pageY,
      scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

    // This is another very weird special case that only happens for relative elements:
    // 1. If the css position is relative
    // 2. and the scroll parent is the document or similar to the offset parent
    // we have to refresh the relative offset during the scroll so there are no jumps
    if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
      this.offset.relative = this._getRelativeOffset();
    }

    /*
     * - Position constraining -
     * Constrain the position to a mix of grid, containment.
     */

    if(this.originalPosition) { //If we are not dragging yet, we won't check for options

      if(this.containment) {
        if(event.pageX - this.offset.click.left < this.containment[0]) {
          pageX = this.containment[0] + this.offset.click.left;
        }
        if(event.pageY - this.offset.click.top < this.containment[1]) {
          pageY = this.containment[1] + this.offset.click.top;
        }
        if(event.pageX - this.offset.click.left > this.containment[2]) {
          pageX = this.containment[2] + this.offset.click.left;
        }
        if(event.pageY - this.offset.click.top > this.containment[3]) {
          pageY = this.containment[3] + this.offset.click.top;
        }
      }

      if(o.grid) {
        top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
        pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

        left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
        pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
      }

    }

    return {
      top: (
        pageY -                               // The absolute mouse position
        this.offset.click.top -                         // Click offset (relative to the element)
        this.offset.relative.top  -                     // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.top +                        // The offsetParent's offset without borders (offset + border)
        ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
      ),
      left: (
        pageX -                               // The absolute mouse position
        this.offset.click.left -                        // Click offset (relative to the element)
        this.offset.relative.left -                     // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.parent.left +                       // The offsetParent's offset without borders (offset + border)
        ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
      )
    };

  },

  _rearrange: function(event, i, a, hardRefresh) {

    a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

    //Various things done here to improve the performance:
    // 1. we create a setTimeout, that calls refreshPositions
    // 2. on the instance, we have a counter variable, that get's higher after every append
    // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
    // 4. this lets only the last addition to the timeout stack through
    this.counter = this.counter ? ++this.counter : 1;
    var counter = this.counter;

    this._delay(function() {
      if(counter === this.counter) {
        this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
      }
    });

  },

  _clear: function(event, noPropagation) {

    this.reverting = false;
    // We delay all events that have to be triggered to after the point where the placeholder has been removed and
    // everything else normalized again
    var i,
      delayedTriggers = [];

    // We first have to update the dom position of the actual currentItem
    // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
    if(!this._noFinalSort && this.currentItem.parent().length) {
      this.placeholder.before(this.currentItem);
    }
    this._noFinalSort = null;

    if(this.helper[0] === this.currentItem[0]) {
      for(i in this._storedCSS) {
        if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
          this._storedCSS[i] = "";
        }
      }
      this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
    } else {
      this.currentItem.show();
    }

    if(this.fromOutside && !noPropagation) {
      delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
    }
    if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
      delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
    }

    // Check if the items Container has Changed and trigger appropriate
    // events.
    if (this !== this.currentContainer) {
      if(!noPropagation) {
        delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
        delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
        delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
      }
    }


    //Post events to containers
    function delayEvent( type, instance, container ) {
      return function( event ) {
        container._trigger( type, event, instance._uiHash( instance ) );
      };
    }
    for (i = this.containers.length - 1; i >= 0; i--){
      if (!noPropagation) {
        delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
      }
      if(this.containers[i].containerCache.over) {
        delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
        this.containers[i].containerCache.over = 0;
      }
    }

    //Do what was originally in plugins
    if ( this.storedCursor ) {
      this.document.find( "body" ).css( "cursor", this.storedCursor );
      this.storedStylesheet.remove();
    }
    if(this._storedOpacity) {
      this.helper.css("opacity", this._storedOpacity);
    }
    if(this._storedZIndex) {
      this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
    }

    this.dragging = false;
    if(this.cancelHelperRemoval) {
      if(!noPropagation) {
        this._trigger("beforeStop", event, this._uiHash());
        for (i=0; i < delayedTriggers.length; i++) {
          delayedTriggers[i].call(this, event);
        } //Trigger all delayed events
        this._trigger("stop", event, this._uiHash());
      }

      this.fromOutside = false;
      return false;
    }

    if(!noPropagation) {
      this._trigger("beforeStop", event, this._uiHash());
    }

    //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
    this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

    if(this.helper[0] !== this.currentItem[0]) {
      this.helper.remove();
    }
    this.helper = null;

    if(!noPropagation) {
      for (i=0; i < delayedTriggers.length; i++) {
        delayedTriggers[i].call(this, event);
      } //Trigger all delayed events
      this._trigger("stop", event, this._uiHash());
    }

    this.fromOutside = false;
    return true;

  },

  _trigger: function() {
    if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
      this.cancel();
    }
  },

  _uiHash: function(_inst) {
    var inst = _inst || this;
    return {
      helper: inst.helper,
      placeholder: inst.placeholder || $([]),
      position: inst.position,
      originalPosition: inst.originalPosition,
      offset: inst.positionAbs,
      item: inst.currentItem,
      sender: _inst ? _inst.element : null
    };
  }

});

})(jQuery);
(function( $ ) {

function modifier( fn ) {
  return function() {
    var previous = this.element.val();
    fn.apply( this, arguments );
    this._refresh();
    if ( previous !== this.element.val() ) {
      this._trigger( "change" );
    }
  };
}

$.widget( "ui.spinner", {
  version: "1.10.4",
  defaultElement: "<input>",
  widgetEventPrefix: "spin",
  options: {
    culture: null,
    icons: {
      down: "ui-icon-triangle-1-s",
      up: "ui-icon-triangle-1-n"
    },
    incremental: true,
    max: null,
    min: null,
    numberFormat: null,
    page: 10,
    step: 1,

    change: null,
    spin: null,
    start: null,
    stop: null
  },

  _create: function() {
    // handle string values that need to be parsed
    this._setOption( "max", this.options.max );
    this._setOption( "min", this.options.min );
    this._setOption( "step", this.options.step );

    // Only format if there is a value, prevents the field from being marked
    // as invalid in Firefox, see #9573.
    if ( this.value() !== "" ) {
      // Format the value, but don't constrain.
      this._value( this.element.val(), true );
    }

    this._draw();
    this._on( this._events );
    this._refresh();

    // turning off autocomplete prevents the browser from remembering the
    // value when navigating through history, so we re-enable autocomplete
    // if the page is unloaded before the widget is destroyed. #7790
    this._on( this.window, {
      beforeunload: function() {
        this.element.removeAttr( "autocomplete" );
      }
    });
  },

  _getCreateOptions: function() {
    var options = {},
      element = this.element;

    $.each( [ "min", "max", "step" ], function( i, option ) {
      var value = element.attr( option );
      if ( value !== undefined && value.length ) {
        options[ option ] = value;
      }
    });

    return options;
  },

  _events: {
    keydown: function( event ) {
      if ( this._start( event ) && this._keydown( event ) ) {
        event.preventDefault();
      }
    },
    keyup: "_stop",
    focus: function() {
      this.previous = this.element.val();
    },
    blur: function( event ) {
      if ( this.cancelBlur ) {
        delete this.cancelBlur;
        return;
      }

      this._stop();
      this._refresh();
      if ( this.previous !== this.element.val() ) {
        this._trigger( "change", event );
      }
    },
    mousewheel: function( event, delta ) {
      if ( !delta ) {
        return;
      }
      if ( !this.spinning && !this._start( event ) ) {
        return false;
      }

      this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
      clearTimeout( this.mousewheelTimer );
      this.mousewheelTimer = this._delay(function() {
        if ( this.spinning ) {
          this._stop( event );
        }
      }, 100 );
      event.preventDefault();
    },
    "mousedown .ui-spinner-button": function( event ) {
      var previous;

      // We never want the buttons to have focus; whenever the user is
      // interacting with the spinner, the focus should be on the input.
      // If the input is focused then this.previous is properly set from
      // when the input first received focus. If the input is not focused
      // then we need to set this.previous based on the value before spinning.
      previous = this.element[0] === this.document[0].activeElement ?
        this.previous : this.element.val();
      function checkFocus() {
        var isActive = this.element[0] === this.document[0].activeElement;
        if ( !isActive ) {
          this.element.focus();
          this.previous = previous;
          // support: IE
          // IE sets focus asynchronously, so we need to check if focus
          // moved off of the input because the user clicked on the button.
          this._delay(function() {
            this.previous = previous;
          });
        }
      }

      // ensure focus is on (or stays on) the text field
      event.preventDefault();
      checkFocus.call( this );

      // support: IE
      // IE doesn't prevent moving focus even with event.preventDefault()
      // so we set a flag to know when we should ignore the blur event
      // and check (again) if focus moved off of the input.
      this.cancelBlur = true;
      this._delay(function() {
        delete this.cancelBlur;
        checkFocus.call( this );
      });

      if ( this._start( event ) === false ) {
        return;
      }

      this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
    },
    "mouseup .ui-spinner-button": "_stop",
    "mouseenter .ui-spinner-button": function( event ) {
      // button will add ui-state-active if mouse was down while mouseleave and kept down
      if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
        return;
      }

      if ( this._start( event ) === false ) {
        return false;
      }
      this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
    },
    // TODO: do we really want to consider this a stop?
    // shouldn't we just stop the repeater and wait until mouseup before
    // we trigger the stop event?
    "mouseleave .ui-spinner-button": "_stop"
  },

  _draw: function() {
    var uiSpinner = this.uiSpinner = this.element
      .addClass( "ui-spinner-input" )
      .attr( "autocomplete", "off" )
      .wrap( this._uiSpinnerHtml() )
      .parent()
        // add buttons
        .append( this._buttonHtml() );

    this.element.attr( "role", "spinbutton" );

    // button bindings
    this.buttons = uiSpinner.find( ".ui-spinner-button" )
      .attr( "tabIndex", -1 )
      .button()
      .removeClass( "ui-corner-all" );

    // IE 6 doesn't understand height: 50% for the buttons
    // unless the wrapper has an explicit height
    if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
        uiSpinner.height() > 0 ) {
      uiSpinner.height( uiSpinner.height() );
    }

    // disable spinner if element was already disabled
    if ( this.options.disabled ) {
      this.disable();
    }
  },

  _keydown: function( event ) {
    var options = this.options,
      keyCode = $.ui.keyCode;

    switch ( event.keyCode ) {
    case keyCode.UP:
      this._repeat( null, 1, event );
      return true;
    case keyCode.DOWN:
      this._repeat( null, -1, event );
      return true;
    case keyCode.PAGE_UP:
      this._repeat( null, options.page, event );
      return true;
    case keyCode.PAGE_DOWN:
      this._repeat( null, -options.page, event );
      return true;
    }

    return false;
  },

  _uiSpinnerHtml: function() {
    return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
  },

  _buttonHtml: function() {
    return "" +
      "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
        "<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
      "</a>" +
      "<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
        "<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
      "</a>";
  },

  _start: function( event ) {
    if ( !this.spinning && this._trigger( "start", event ) === false ) {
      return false;
    }

    if ( !this.counter ) {
      this.counter = 1;
    }
    this.spinning = true;
    return true;
  },

  _repeat: function( i, steps, event ) {
    i = i || 500;

    clearTimeout( this.timer );
    this.timer = this._delay(function() {
      this._repeat( 40, steps, event );
    }, i );

    this._spin( steps * this.options.step, event );
  },

  _spin: function( step, event ) {
    var value = this.value() || 0;

    if ( !this.counter ) {
      this.counter = 1;
    }

    value = this._adjustValue( value + step * this._increment( this.counter ) );

    if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
      this._value( value );
      this.counter++;
    }
  },

  _increment: function( i ) {
    var incremental = this.options.incremental;

    if ( incremental ) {
      return $.isFunction( incremental ) ?
        incremental( i ) :
        Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );
    }

    return 1;
  },

  _precision: function() {
    var precision = this._precisionOf( this.options.step );
    if ( this.options.min !== null ) {
      precision = Math.max( precision, this._precisionOf( this.options.min ) );
    }
    return precision;
  },

  _precisionOf: function( num ) {
    var str = num.toString(),
      decimal = str.indexOf( "." );
    return decimal === -1 ? 0 : str.length - decimal - 1;
  },

  _adjustValue: function( value ) {
    var base, aboveMin,
      options = this.options;

    // make sure we're at a valid step
    // - find out where we are relative to the base (min or 0)
    base = options.min !== null ? options.min : 0;
    aboveMin = value - base;
    // - round to the nearest step
    aboveMin = Math.round(aboveMin / options.step) * options.step;
    // - rounding is based on 0, so adjust back to our base
    value = base + aboveMin;

    // fix precision from bad JS floating point math
    value = parseFloat( value.toFixed( this._precision() ) );

    // clamp the value
    if ( options.max !== null && value > options.max) {
      return options.max;
    }
    if ( options.min !== null && value < options.min ) {
      return options.min;
    }

    return value;
  },

  _stop: function( event ) {
    if ( !this.spinning ) {
      return;
    }

    clearTimeout( this.timer );
    clearTimeout( this.mousewheelTimer );
    this.counter = 0;
    this.spinning = false;
    this._trigger( "stop", event );
  },

  _setOption: function( key, value ) {
    if ( key === "culture" || key === "numberFormat" ) {
      var prevValue = this._parse( this.element.val() );
      this.options[ key ] = value;
      this.element.val( this._format( prevValue ) );
      return;
    }

    if ( key === "max" || key === "min" || key === "step" ) {
      if ( typeof value === "string" ) {
        value = this._parse( value );
      }
    }
    if ( key === "icons" ) {
      this.buttons.first().find( ".ui-icon" )
        .removeClass( this.options.icons.up )
        .addClass( value.up );
      this.buttons.last().find( ".ui-icon" )
        .removeClass( this.options.icons.down )
        .addClass( value.down );
    }

    this._super( key, value );

    if ( key === "disabled" ) {
      if ( value ) {
        this.element.prop( "disabled", true );
        this.buttons.button( "disable" );
      } else {
        this.element.prop( "disabled", false );
        this.buttons.button( "enable" );
      }
    }
  },

  _setOptions: modifier(function( options ) {
    this._super( options );
    this._value( this.element.val() );
  }),

  _parse: function( val ) {
    if ( typeof val === "string" && val !== "" ) {
      val = window.Globalize && this.options.numberFormat ?
        Globalize.parseFloat( val, 10, this.options.culture ) : +val;
    }
    return val === "" || isNaN( val ) ? null : val;
  },

  _format: function( value ) {
    if ( value === "" ) {
      return "";
    }
    return window.Globalize && this.options.numberFormat ?
      Globalize.format( value, this.options.numberFormat, this.options.culture ) :
      value;
  },

  _refresh: function() {
    this.element.attr({
      "aria-valuemin": this.options.min,
      "aria-valuemax": this.options.max,
      // TODO: what should we do with values that can't be parsed?
      "aria-valuenow": this._parse( this.element.val() )
    });
  },

  // update the value without triggering change
  _value: function( value, allowAny ) {
    var parsed;
    if ( value !== "" ) {
      parsed = this._parse( value );
      if ( parsed !== null ) {
        if ( !allowAny ) {
          parsed = this._adjustValue( parsed );
        }
        value = this._format( parsed );
      }
    }
    this.element.val( value );
    this._refresh();
  },

  _destroy: function() {
    this.element
      .removeClass( "ui-spinner-input" )
      .prop( "disabled", false )
      .removeAttr( "autocomplete" )
      .removeAttr( "role" )
      .removeAttr( "aria-valuemin" )
      .removeAttr( "aria-valuemax" )
      .removeAttr( "aria-valuenow" );
    this.uiSpinner.replaceWith( this.element );
  },

  stepUp: modifier(function( steps ) {
    this._stepUp( steps );
  }),
  _stepUp: function( steps ) {
    if ( this._start() ) {
      this._spin( (steps || 1) * this.options.step );
      this._stop();
    }
  },

  stepDown: modifier(function( steps ) {
    this._stepDown( steps );
  }),
  _stepDown: function( steps ) {
    if ( this._start() ) {
      this._spin( (steps || 1) * -this.options.step );
      this._stop();
    }
  },

  pageUp: modifier(function( pages ) {
    this._stepUp( (pages || 1) * this.options.page );
  }),

  pageDown: modifier(function( pages ) {
    this._stepDown( (pages || 1) * this.options.page );
  }),

  value: function( newVal ) {
    if ( !arguments.length ) {
      return this._parse( this.element.val() );
    }
    modifier( this._value ).call( this, newVal );
  },

  widget: function() {
    return this.uiSpinner;
  }
});

}( jQuery ) );
(function( $, undefined ) {

var tabId = 0,
  rhash = /#.*$/;

function getNextTabId() {
  return ++tabId;
}

function isLocal( anchor ) {
  // support: IE7
  // IE7 doesn't normalize the href property when set via script (#9317)
  anchor = anchor.cloneNode( false );

  return anchor.hash.length > 1 &&
    decodeURIComponent( anchor.href.replace( rhash, "" ) ) ===
      decodeURIComponent( location.href.replace( rhash, "" ) );
}

$.widget( "ui.tabs", {
  version: "1.10.4",
  delay: 300,
  options: {
    active: null,
    collapsible: false,
    event: "click",
    heightStyle: "content",
    hide: null,
    show: null,

    // callbacks
    activate: null,
    beforeActivate: null,
    beforeLoad: null,
    load: null
  },

  _create: function() {
    var that = this,
      options = this.options;

    this.running = false;

    this.element
      .addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
      .toggleClass( "ui-tabs-collapsible", options.collapsible )
      // Prevent users from focusing disabled tabs via click
      .delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {
        if ( $( this ).is( ".ui-state-disabled" ) ) {
          event.preventDefault();
        }
      })
      // support: IE <9
      // Preventing the default action in mousedown doesn't prevent IE
      // from focusing the element, so if the anchor gets focused, blur.
      // We don't have to worry about focusing the previously focused
      // element since clicking on a non-focusable element should focus
      // the body anyway.
      .delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
        if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
          this.blur();
        }
      });

    this._processTabs();
    options.active = this._initialActive();

    // Take disabling tabs via class attribute from HTML
    // into account and update option properly.
    if ( $.isArray( options.disabled ) ) {
      options.disabled = $.unique( options.disabled.concat(
        $.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
          return that.tabs.index( li );
        })
      ) ).sort();
    }

    // check for length avoids error when initializing empty list
    if ( this.options.active !== false && this.anchors.length ) {
      this.active = this._findActive( options.active );
    } else {
      this.active = $();
    }

    this._refresh();

    if ( this.active.length ) {
      this.load( options.active );
    }
  },

  _initialActive: function() {
    var active = this.options.active,
      collapsible = this.options.collapsible,
      locationHash = location.hash.substring( 1 );

    if ( active === null ) {
      // check the fragment identifier in the URL
      if ( locationHash ) {
        this.tabs.each(function( i, tab ) {
          if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
            active = i;
            return false;
          }
        });
      }

      // check for a tab marked active via a class
      if ( active === null ) {
        active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
      }

      // no active tab, set to false
      if ( active === null || active === -1 ) {
        active = this.tabs.length ? 0 : false;
      }
    }

    // handle numbers: negative, out of range
    if ( active !== false ) {
      active = this.tabs.index( this.tabs.eq( active ) );
      if ( active === -1 ) {
        active = collapsible ? false : 0;
      }
    }

    // don't allow collapsible: false and active: false
    if ( !collapsible && active === false && this.anchors.length ) {
      active = 0;
    }

    return active;
  },

  _getCreateEventData: function() {
    return {
      tab: this.active,
      panel: !this.active.length ? $() : this._getPanelForTab( this.active )
    };
  },

  _tabKeydown: function( event ) {
    var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
      selectedIndex = this.tabs.index( focusedTab ),
      goingForward = true;

    if ( this._handlePageNav( event ) ) {
      return;
    }

    switch ( event.keyCode ) {
      case $.ui.keyCode.RIGHT:
      case $.ui.keyCode.DOWN:
        selectedIndex++;
        break;
      case $.ui.keyCode.UP:
      case $.ui.keyCode.LEFT:
        goingForward = false;
        selectedIndex--;
        break;
      case $.ui.keyCode.END:
        selectedIndex = this.anchors.length - 1;
        break;
      case $.ui.keyCode.HOME:
        selectedIndex = 0;
        break;
      case $.ui.keyCode.SPACE:
        // Activate only, no collapsing
        event.preventDefault();
        clearTimeout( this.activating );
        this._activate( selectedIndex );
        return;
      case $.ui.keyCode.ENTER:
        // Toggle (cancel delayed activation, allow collapsing)
        event.preventDefault();
        clearTimeout( this.activating );
        // Determine if we should collapse or activate
        this._activate( selectedIndex === this.options.active ? false : selectedIndex );
        return;
      default:
        return;
    }

    // Focus the appropriate tab, based on which key was pressed
    event.preventDefault();
    clearTimeout( this.activating );
    selectedIndex = this._focusNextTab( selectedIndex, goingForward );

    // Navigating with control key will prevent automatic activation
    if ( !event.ctrlKey ) {
      // Update aria-selected immediately so that AT think the tab is already selected.
      // Otherwise AT may confuse the user by stating that they need to activate the tab,
      // but the tab will already be activated by the time the announcement finishes.
      focusedTab.attr( "aria-selected", "false" );
      this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

      this.activating = this._delay(function() {
        this.option( "active", selectedIndex );
      }, this.delay );
    }
  },

  _panelKeydown: function( event ) {
    if ( this._handlePageNav( event ) ) {
      return;
    }

    // Ctrl+up moves focus to the current tab
    if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
      event.preventDefault();
      this.active.focus();
    }
  },

  // Alt+page up/down moves focus to the previous/next tab (and activates)
  _handlePageNav: function( event ) {
    if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
      this._activate( this._focusNextTab( this.options.active - 1, false ) );
      return true;
    }
    if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
      this._activate( this._focusNextTab( this.options.active + 1, true ) );
      return true;
    }
  },

  _findNextTab: function( index, goingForward ) {
    var lastTabIndex = this.tabs.length - 1;

    function constrain() {
      if ( index > lastTabIndex ) {
        index = 0;
      }
      if ( index < 0 ) {
        index = lastTabIndex;
      }
      return index;
    }

    while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
      index = goingForward ? index + 1 : index - 1;
    }

    return index;
  },

  _focusNextTab: function( index, goingForward ) {
    index = this._findNextTab( index, goingForward );
    this.tabs.eq( index ).focus();
    return index;
  },

  _setOption: function( key, value ) {
    if ( key === "active" ) {
      // _activate() will handle invalid values and update this.options
      this._activate( value );
      return;
    }

    if ( key === "disabled" ) {
      // don't use the widget factory's disabled handling
      this._setupDisabled( value );
      return;
    }

    this._super( key, value);

    if ( key === "collapsible" ) {
      this.element.toggleClass( "ui-tabs-collapsible", value );
      // Setting collapsible: false while collapsed; open first panel
      if ( !value && this.options.active === false ) {
        this._activate( 0 );
      }
    }

    if ( key === "event" ) {
      this._setupEvents( value );
    }

    if ( key === "heightStyle" ) {
      this._setupHeightStyle( value );
    }
  },

  _tabId: function( tab ) {
    return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();
  },

  _sanitizeSelector: function( hash ) {
    return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
  },

  refresh: function() {
    var options = this.options,
      lis = this.tablist.children( ":has(a[href])" );

    // get disabled tabs from class attribute from HTML
    // this will get converted to a boolean if needed in _refresh()
    options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
      return lis.index( tab );
    });

    this._processTabs();

    // was collapsed or no tabs
    if ( options.active === false || !this.anchors.length ) {
      options.active = false;
      this.active = $();
    // was active, but active tab is gone
    } else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
      // all remaining tabs are disabled
      if ( this.tabs.length === options.disabled.length ) {
        options.active = false;
        this.active = $();
      // activate previous tab
      } else {
        this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
      }
    // was active, active tab still exists
    } else {
      // make sure active index is correct
      options.active = this.tabs.index( this.active );
    }

    this._refresh();
  },

  _refresh: function() {
    this._setupDisabled( this.options.disabled );
    this._setupEvents( this.options.event );
    this._setupHeightStyle( this.options.heightStyle );

    this.tabs.not( this.active ).attr({
      "aria-selected": "false",
      tabIndex: -1
    });
    this.panels.not( this._getPanelForTab( this.active ) )
      .hide()
      .attr({
        "aria-expanded": "false",
        "aria-hidden": "true"
      });

    // Make sure one tab is in the tab order
    if ( !this.active.length ) {
      this.tabs.eq( 0 ).attr( "tabIndex", 0 );
    } else {
      this.active
        .addClass( "ui-tabs-active ui-state-active" )
        .attr({
          "aria-selected": "true",
          tabIndex: 0
        });
      this._getPanelForTab( this.active )
        .show()
        .attr({
          "aria-expanded": "true",
          "aria-hidden": "false"
        });
    }
  },

  _processTabs: function() {
    var that = this;

    this.tablist = this._getList()
      .addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
      .attr( "role", "tablist" );

    this.tabs = this.tablist.find( "> li:has(a[href])" )
      .addClass( "ui-state-default ui-corner-top" )
      .attr({
        role: "tab",
        tabIndex: -1
      });

    this.anchors = this.tabs.map(function() {
        return $( "a", this )[ 0 ];
      })
      .addClass( "ui-tabs-anchor" )
      .attr({
        role: "presentation",
        tabIndex: -1
      });

    this.panels = $();

    this.anchors.each(function( i, anchor ) {
      var selector, panel, panelId,
        anchorId = $( anchor ).uniqueId().attr( "id" ),
        tab = $( anchor ).closest( "li" ),
        originalAriaControls = tab.attr( "aria-controls" );

      // inline tab
      if ( isLocal( anchor ) ) {
        selector = anchor.hash;
        panel = that.element.find( that._sanitizeSelector( selector ) );
      // remote tab
      } else {
        panelId = that._tabId( tab );
        selector = "#" + panelId;
        panel = that.element.find( selector );
        if ( !panel.length ) {
          panel = that._createPanel( panelId );
          panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
        }
        panel.attr( "aria-live", "polite" );
      }

      if ( panel.length) {
        that.panels = that.panels.add( panel );
      }
      if ( originalAriaControls ) {
        tab.data( "ui-tabs-aria-controls", originalAriaControls );
      }
      tab.attr({
        "aria-controls": selector.substring( 1 ),
        "aria-labelledby": anchorId
      });
      panel.attr( "aria-labelledby", anchorId );
    });

    this.panels
      .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
      .attr( "role", "tabpanel" );
  },

  // allow overriding how to find the list for rare usage scenarios (#7715)
  _getList: function() {
    return this.tablist || this.element.find( "ol,ul" ).eq( 0 );
  },

  _createPanel: function( id ) {
    return $( "<div>" )
      .attr( "id", id )
      .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
      .data( "ui-tabs-destroy", true );
  },

  _setupDisabled: function( disabled ) {
    if ( $.isArray( disabled ) ) {
      if ( !disabled.length ) {
        disabled = false;
      } else if ( disabled.length === this.anchors.length ) {
        disabled = true;
      }
    }

    // disable tabs
    for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
      if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
        $( li )
          .addClass( "ui-state-disabled" )
          .attr( "aria-disabled", "true" );
      } else {
        $( li )
          .removeClass( "ui-state-disabled" )
          .removeAttr( "aria-disabled" );
      }
    }

    this.options.disabled = disabled;
  },

  _setupEvents: function( event ) {
    var events = {
      click: function( event ) {
        event.preventDefault();
      }
    };
    if ( event ) {
      $.each( event.split(" "), function( index, eventName ) {
        events[ eventName ] = "_eventHandler";
      });
    }

    this._off( this.anchors.add( this.tabs ).add( this.panels ) );
    this._on( this.anchors, events );
    this._on( this.tabs, { keydown: "_tabKeydown" } );
    this._on( this.panels, { keydown: "_panelKeydown" } );

    this._focusable( this.tabs );
    this._hoverable( this.tabs );
  },

  _setupHeightStyle: function( heightStyle ) {
    var maxHeight,
      parent = this.element.parent();

    if ( heightStyle === "fill" ) {
      maxHeight = parent.height();
      maxHeight -= this.element.outerHeight() - this.element.height();

      this.element.siblings( ":visible" ).each(function() {
        var elem = $( this ),
          position = elem.css( "position" );

        if ( position === "absolute" || position === "fixed" ) {
          return;
        }
        maxHeight -= elem.outerHeight( true );
      });

      this.element.children().not( this.panels ).each(function() {
        maxHeight -= $( this ).outerHeight( true );
      });

      this.panels.each(function() {
        $( this ).height( Math.max( 0, maxHeight -
          $( this ).innerHeight() + $( this ).height() ) );
      })
      .css( "overflow", "auto" );
    } else if ( heightStyle === "auto" ) {
      maxHeight = 0;
      this.panels.each(function() {
        maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
      }).height( maxHeight );
    }
  },

  _eventHandler: function( event ) {
    var options = this.options,
      active = this.active,
      anchor = $( event.currentTarget ),
      tab = anchor.closest( "li" ),
      clickedIsActive = tab[ 0 ] === active[ 0 ],
      collapsing = clickedIsActive && options.collapsible,
      toShow = collapsing ? $() : this._getPanelForTab( tab ),
      toHide = !active.length ? $() : this._getPanelForTab( active ),
      eventData = {
        oldTab: active,
        oldPanel: toHide,
        newTab: collapsing ? $() : tab,
        newPanel: toShow
      };

    event.preventDefault();

    if ( tab.hasClass( "ui-state-disabled" ) ||
        // tab is already loading
        tab.hasClass( "ui-tabs-loading" ) ||
        // can't switch durning an animation
        this.running ||
        // click on active header, but not collapsible
        ( clickedIsActive && !options.collapsible ) ||
        // allow canceling activation
        ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
      return;
    }

    options.active = collapsing ? false : this.tabs.index( tab );

    this.active = clickedIsActive ? $() : tab;
    if ( this.xhr ) {
      this.xhr.abort();
    }

    if ( !toHide.length && !toShow.length ) {
      $.error( "jQuery UI Tabs: Mismatching fragment identifier." );
    }

    if ( toShow.length ) {
      this.load( this.tabs.index( tab ), event );
    }
    this._toggle( event, eventData );
  },

  // handles show/hide for selecting tabs
  _toggle: function( event, eventData ) {
    var that = this,
      toShow = eventData.newPanel,
      toHide = eventData.oldPanel;

    this.running = true;

    function complete() {
      that.running = false;
      that._trigger( "activate", event, eventData );
    }

    function show() {
      eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

      if ( toShow.length && that.options.show ) {
        that._show( toShow, that.options.show, complete );
      } else {
        toShow.show();
        complete();
      }
    }

    // start out by hiding, then showing, then completing
    if ( toHide.length && this.options.hide ) {
      this._hide( toHide, this.options.hide, function() {
        eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
        show();
      });
    } else {
      eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
      toHide.hide();
      show();
    }

    toHide.attr({
      "aria-expanded": "false",
      "aria-hidden": "true"
    });
    eventData.oldTab.attr( "aria-selected", "false" );
    // If we're switching tabs, remove the old tab from the tab order.
    // If we're opening from collapsed state, remove the previous tab from the tab order.
    // If we're collapsing, then keep the collapsing tab in the tab order.
    if ( toShow.length && toHide.length ) {
      eventData.oldTab.attr( "tabIndex", -1 );
    } else if ( toShow.length ) {
      this.tabs.filter(function() {
        return $( this ).attr( "tabIndex" ) === 0;
      })
      .attr( "tabIndex", -1 );
    }

    toShow.attr({
      "aria-expanded": "true",
      "aria-hidden": "false"
    });
    eventData.newTab.attr({
      "aria-selected": "true",
      tabIndex: 0
    });
  },

  _activate: function( index ) {
    var anchor,
      active = this._findActive( index );

    // trying to activate the already active panel
    if ( active[ 0 ] === this.active[ 0 ] ) {
      return;
    }

    // trying to collapse, simulate a click on the current active header
    if ( !active.length ) {
      active = this.active;
    }

    anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
    this._eventHandler({
      target: anchor,
      currentTarget: anchor,
      preventDefault: $.noop
    });
  },

  _findActive: function( index ) {
    return index === false ? $() : this.tabs.eq( index );
  },

  _getIndex: function( index ) {
    // meta-function to give users option to provide a href string instead of a numerical index.
    if ( typeof index === "string" ) {
      index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
    }

    return index;
  },

  _destroy: function() {
    if ( this.xhr ) {
      this.xhr.abort();
    }

    this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

    this.tablist
      .removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
      .removeAttr( "role" );

    this.anchors
      .removeClass( "ui-tabs-anchor" )
      .removeAttr( "role" )
      .removeAttr( "tabIndex" )
      .removeUniqueId();

    this.tabs.add( this.panels ).each(function() {
      if ( $.data( this, "ui-tabs-destroy" ) ) {
        $( this ).remove();
      } else {
        $( this )
          .removeClass( "ui-state-default ui-state-active ui-state-disabled " +
            "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
          .removeAttr( "tabIndex" )
          .removeAttr( "aria-live" )
          .removeAttr( "aria-busy" )
          .removeAttr( "aria-selected" )
          .removeAttr( "aria-labelledby" )
          .removeAttr( "aria-hidden" )
          .removeAttr( "aria-expanded" )
          .removeAttr( "role" );
      }
    });

    this.tabs.each(function() {
      var li = $( this ),
        prev = li.data( "ui-tabs-aria-controls" );
      if ( prev ) {
        li
          .attr( "aria-controls", prev )
          .removeData( "ui-tabs-aria-controls" );
      } else {
        li.removeAttr( "aria-controls" );
      }
    });

    this.panels.show();

    if ( this.options.heightStyle !== "content" ) {
      this.panels.css( "height", "" );
    }
  },

  enable: function( index ) {
    var disabled = this.options.disabled;
    if ( disabled === false ) {
      return;
    }

    if ( index === undefined ) {
      disabled = false;
    } else {
      index = this._getIndex( index );
      if ( $.isArray( disabled ) ) {
        disabled = $.map( disabled, function( num ) {
          return num !== index ? num : null;
        });
      } else {
        disabled = $.map( this.tabs, function( li, num ) {
          return num !== index ? num : null;
        });
      }
    }
    this._setupDisabled( disabled );
  },

  disable: function( index ) {
    var disabled = this.options.disabled;
    if ( disabled === true ) {
      return;
    }

    if ( index === undefined ) {
      disabled = true;
    } else {
      index = this._getIndex( index );
      if ( $.inArray( index, disabled ) !== -1 ) {
        return;
      }
      if ( $.isArray( disabled ) ) {
        disabled = $.merge( [ index ], disabled ).sort();
      } else {
        disabled = [ index ];
      }
    }
    this._setupDisabled( disabled );
  },

  load: function( index, event ) {
    index = this._getIndex( index );
    var that = this,
      tab = this.tabs.eq( index ),
      anchor = tab.find( ".ui-tabs-anchor" ),
      panel = this._getPanelForTab( tab ),
      eventData = {
        tab: tab,
        panel: panel
      };

    // not remote
    if ( isLocal( anchor[ 0 ] ) ) {
      return;
    }

    this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

    // support: jQuery <1.8
    // jQuery <1.8 returns false if the request is canceled in beforeSend,
    // but as of 1.8, $.ajax() always returns a jqXHR object.
    if ( this.xhr && this.xhr.statusText !== "canceled" ) {
      tab.addClass( "ui-tabs-loading" );
      panel.attr( "aria-busy", "true" );

      this.xhr
        .success(function( response ) {
          // support: jQuery <1.8
          // http://bugs.jquery.com/ticket/11778
          setTimeout(function() {
            panel.html( response );
            that._trigger( "load", event, eventData );
          }, 1 );
        })
        .complete(function( jqXHR, status ) {
          // support: jQuery <1.8
          // http://bugs.jquery.com/ticket/11778
          setTimeout(function() {
            if ( status === "abort" ) {
              that.panels.stop( false, true );
            }

            tab.removeClass( "ui-tabs-loading" );
            panel.removeAttr( "aria-busy" );

            if ( jqXHR === that.xhr ) {
              delete that.xhr;
            }
          }, 1 );
        });
    }
  },

  _ajaxSettings: function( anchor, event, eventData ) {
    var that = this;
    return {
      url: anchor.attr( "href" ),
      beforeSend: function( jqXHR, settings ) {
        return that._trigger( "beforeLoad", event,
          $.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
      }
    };
  },

  _getPanelForTab: function( tab ) {
    var id = $( tab ).attr( "aria-controls" );
    return this.element.find( this._sanitizeSelector( "#" + id ) );
  }
});

})( jQuery );
(function( $ ) {

var increments = 0;

function addDescribedBy( elem, id ) {
  var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
  describedby.push( id );
  elem
    .data( "ui-tooltip-id", id )
    .attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
}

function removeDescribedBy( elem ) {
  var id = elem.data( "ui-tooltip-id" ),
    describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
    index = $.inArray( id, describedby );
  if ( index !== -1 ) {
    describedby.splice( index, 1 );
  }

  elem.removeData( "ui-tooltip-id" );
  describedby = $.trim( describedby.join( " " ) );
  if ( describedby ) {
    elem.attr( "aria-describedby", describedby );
  } else {
    elem.removeAttr( "aria-describedby" );
  }
}

$.widget( "ui.tooltip", {
  version: "1.10.4",
  options: {
    content: function() {
      // support: IE<9, Opera in jQuery <1.7
      // .text() can't accept undefined, so coerce to a string
      var title = $( this ).attr( "title" ) || "";
      // Escape title, since we're going from an attribute to raw HTML
      return $( "<a>" ).text( title ).html();
    },
    hide: true,
    // Disabled elements have inconsistent behavior across browsers (#8661)
    items: "[title]:not([disabled])",
    position: {
      my: "left top+15",
      at: "left bottom",
      collision: "flipfit flip"
    },
    show: true,
    tooltipClass: null,
    track: false,

    // callbacks
    close: null,
    open: null
  },

  _create: function() {
    this._on({
      mouseover: "open",
      focusin: "open"
    });

    // IDs of generated tooltips, needed for destroy
    this.tooltips = {};
    // IDs of parent tooltips where we removed the title attribute
    this.parents = {};

    if ( this.options.disabled ) {
      this._disable();
    }
  },

  _setOption: function( key, value ) {
    var that = this;

    if ( key === "disabled" ) {
      this[ value ? "_disable" : "_enable" ]();
      this.options[ key ] = value;
      // disable element style changes
      return;
    }

    this._super( key, value );

    if ( key === "content" ) {
      $.each( this.tooltips, function( id, element ) {
        that._updateContent( element );
      });
    }
  },

  _disable: function() {
    var that = this;

    // close open tooltips
    $.each( this.tooltips, function( id, element ) {
      var event = $.Event( "blur" );
      event.target = event.currentTarget = element[0];
      that.close( event, true );
    });

    // remove title attributes to prevent native tooltips
    this.element.find( this.options.items ).addBack().each(function() {
      var element = $( this );
      if ( element.is( "[title]" ) ) {
        element
          .data( "ui-tooltip-title", element.attr( "title" ) )
          .attr( "title", "" );
      }
    });
  },

  _enable: function() {
    // restore title attributes
    this.element.find( this.options.items ).addBack().each(function() {
      var element = $( this );
      if ( element.data( "ui-tooltip-title" ) ) {
        element.attr( "title", element.data( "ui-tooltip-title" ) );
      }
    });
  },

  open: function( event ) {
    var that = this,
      target = $( event ? event.target : this.element )
        // we need closest here due to mouseover bubbling,
        // but always pointing at the same event target
        .closest( this.options.items );

    // No element to show a tooltip for or the tooltip is already open
    if ( !target.length || target.data( "ui-tooltip-id" ) ) {
      return;
    }

    if ( target.attr( "title" ) ) {
      target.data( "ui-tooltip-title", target.attr( "title" ) );
    }

    target.data( "ui-tooltip-open", true );

    // kill parent tooltips, custom or native, for hover
    if ( event && event.type === "mouseover" ) {
      target.parents().each(function() {
        var parent = $( this ),
          blurEvent;
        if ( parent.data( "ui-tooltip-open" ) ) {
          blurEvent = $.Event( "blur" );
          blurEvent.target = blurEvent.currentTarget = this;
          that.close( blurEvent, true );
        }
        if ( parent.attr( "title" ) ) {
          parent.uniqueId();
          that.parents[ this.id ] = {
            element: this,
            title: parent.attr( "title" )
          };
          parent.attr( "title", "" );
        }
      });
    }

    this._updateContent( target, event );
  },

  _updateContent: function( target, event ) {
    var content,
      contentOption = this.options.content,
      that = this,
      eventType = event ? event.type : null;

    if ( typeof contentOption === "string" ) {
      return this._open( event, target, contentOption );
    }

    content = contentOption.call( target[0], function( response ) {
      // ignore async response if tooltip was closed already
      if ( !target.data( "ui-tooltip-open" ) ) {
        return;
      }
      // IE may instantly serve a cached response for ajax requests
      // delay this call to _open so the other call to _open runs first
      that._delay(function() {
        // jQuery creates a special event for focusin when it doesn't
        // exist natively. To improve performance, the native event
        // object is reused and the type is changed. Therefore, we can't
        // rely on the type being correct after the event finished
        // bubbling, so we set it back to the previous value. (#8740)
        if ( event ) {
          event.type = eventType;
        }
        this._open( event, target, response );
      });
    });
    if ( content ) {
      this._open( event, target, content );
    }
  },

  _open: function( event, target, content ) {
    var tooltip, events, delayedShow,
      positionOption = $.extend( {}, this.options.position );

    if ( !content ) {
      return;
    }

    // Content can be updated multiple times. If the tooltip already
    // exists, then just update the content and bail.
    tooltip = this._find( target );
    if ( tooltip.length ) {
      tooltip.find( ".ui-tooltip-content" ).html( content );
      return;
    }

    // if we have a title, clear it to prevent the native tooltip
    // we have to check first to avoid defining a title if none exists
    // (we don't want to cause an element to start matching [title])
    //
    // We use removeAttr only for key events, to allow IE to export the correct
    // accessible attributes. For mouse events, set to empty string to avoid
    // native tooltip showing up (happens only when removing inside mouseover).
    if ( target.is( "[title]" ) ) {
      if ( event && event.type === "mouseover" ) {
        target.attr( "title", "" );
      } else {
        target.removeAttr( "title" );
      }
    }

    tooltip = this._tooltip( target );
    addDescribedBy( target, tooltip.attr( "id" ) );
    tooltip.find( ".ui-tooltip-content" ).html( content );

    function position( event ) {
      positionOption.of = event;
      if ( tooltip.is( ":hidden" ) ) {
        return;
      }
      tooltip.position( positionOption );
    }
    if ( this.options.track && event && /^mouse/.test( event.type ) ) {
      this._on( this.document, {
        mousemove: position
      });
      // trigger once to override element-relative positioning
      position( event );
    } else {
      tooltip.position( $.extend({
        of: target
      }, this.options.position ) );
    }

    tooltip.hide();

    this._show( tooltip, this.options.show );
    // Handle tracking tooltips that are shown with a delay (#8644). As soon
    // as the tooltip is visible, position the tooltip using the most recent
    // event.
    if ( this.options.show && this.options.show.delay ) {
      delayedShow = this.delayedShow = setInterval(function() {
        if ( tooltip.is( ":visible" ) ) {
          position( positionOption.of );
          clearInterval( delayedShow );
        }
      }, $.fx.interval );
    }

    this._trigger( "open", event, { tooltip: tooltip } );

    events = {
      keyup: function( event ) {
        if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
          var fakeEvent = $.Event(event);
          fakeEvent.currentTarget = target[0];
          this.close( fakeEvent, true );
        }
      },
      remove: function() {
        this._removeTooltip( tooltip );
      }
    };
    if ( !event || event.type === "mouseover" ) {
      events.mouseleave = "close";
    }
    if ( !event || event.type === "focusin" ) {
      events.focusout = "close";
    }
    this._on( true, target, events );
  },

  close: function( event ) {
    var that = this,
      target = $( event ? event.currentTarget : this.element ),
      tooltip = this._find( target );

    // disabling closes the tooltip, so we need to track when we're closing
    // to avoid an infinite loop in case the tooltip becomes disabled on close
    if ( this.closing ) {
      return;
    }

    // Clear the interval for delayed tracking tooltips
    clearInterval( this.delayedShow );

    // only set title if we had one before (see comment in _open())
    if ( target.data( "ui-tooltip-title" ) ) {
      target.attr( "title", target.data( "ui-tooltip-title" ) );
    }

    removeDescribedBy( target );

    tooltip.stop( true );
    this._hide( tooltip, this.options.hide, function() {
      that._removeTooltip( $( this ) );
    });

    target.removeData( "ui-tooltip-open" );
    this._off( target, "mouseleave focusout keyup" );
    // Remove 'remove' binding only on delegated targets
    if ( target[0] !== this.element[0] ) {
      this._off( target, "remove" );
    }
    this._off( this.document, "mousemove" );

    if ( event && event.type === "mouseleave" ) {
      $.each( this.parents, function( id, parent ) {
        $( parent.element ).attr( "title", parent.title );
        delete that.parents[ id ];
      });
    }

    this.closing = true;
    this._trigger( "close", event, { tooltip: tooltip } );
    this.closing = false;
  },

  _tooltip: function( element ) {
    var id = "ui-tooltip-" + increments++,
      tooltip = $( "<div>" )
        .attr({
          id: id,
          role: "tooltip"
        })
        .addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
          ( this.options.tooltipClass || "" ) );
    $( "<div>" )
      .addClass( "ui-tooltip-content" )
      .appendTo( tooltip );
    tooltip.appendTo( this.document[0].body );
    this.tooltips[ id ] = element;
    return tooltip;
  },

  _find: function( target ) {
    var id = target.data( "ui-tooltip-id" );
    return id ? $( "#" + id ) : $();
  },

  _removeTooltip: function( tooltip ) {
    tooltip.remove();
    delete this.tooltips[ tooltip.attr( "id" ) ];
  },

  _destroy: function() {
    var that = this;

    // close open tooltips
    $.each( this.tooltips, function( id, element ) {
      // Delegate to close method to handle common cleanup
      var event = $.Event( "blur" );
      event.target = event.currentTarget = element[0];
      that.close( event, true );

      // Remove immediately; destroying an open tooltip doesn't use the
      // hide animation
      $( "#" + id ).remove();

      // Restore the title
      if ( element.data( "ui-tooltip-title" ) ) {
        element.attr( "title", element.data( "ui-tooltip-title" ) );
        element.removeData( "ui-tooltip-title" );
      }
    });
  }
});

}( jQuery ) );
define("jquery-ui", ["jquery"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.$;
    };
}(this)));

define('mixins/BackboneModal',[
  'backbone',
  'jquery-ui'
],

function() {

  Backbone.ModalView = Backbone.View.extend({
    width: 500,
    padding: 30,

    bodyEl: null,

    events : {
      'click .modal-bg' : 'closeModal',
      'keydown'         : 'handleKey',
      'click .done' : 'closeModal'
    },

    _configure: function(options) {
      Backbone.ModalView.__super__._configure.call(this, options);
      if(options.height) {
        this.height = options.height;
      }
      this.bodyEl = document.body;
      this.backgroundDiv = this.setupModal();
      this.modalWindow = this.setupModalWindow();
      _.bindAll(this);
    },

    _ensureElement: function(options) {
      Backbone.ModalView.__super__._ensureElement.call(this, options);
    },

    setBodyEl: function(el) {
      this.bodyEl = el;
    },

    setupModal: function() {
      var self = this;
      var div = document.createElement('div');
      div.className = "modal-bg fadeIn";
      div.style.position = 'fixed';
      div.style.width = '100%';
      div.style.height = '100%';
      div.style.top = '0';
      div.style.left = '0';
      div.style.backgroundColor = '#222';
      div.style.opacity = '0.7';
      div.style.zIndex = 3000;
      this.bodyEl.appendChild(div);

      var closeHandler = function(e) {
        if(e.keyCode == 27) {
          self.closeModal(closeHandler);
        }
      };

      $(div).on('click', function() {
        self.closeModal(closeHandler);
      });


      $(window).on('keydown', closeHandler);

      return div;
    },

    setupModalWindow: function() {
      var self = this;

      var div = document.createElement('div');
      div.style.position = 'fixed';
      div.className = 'modal ' + this.className;
      div.style.width = this.width + 'px';
      if(this.height) {
        div.style.height = this.height + 'px';
      }
      else {
        div.style.minHeight = '300px';
        div.style.maxHeight = '630px';
      }
      div.style.top = '50%';
      div.style.left = '50%';
      div.style.marginLeft= '-'+ (this.width/2) +'px';
      div.style.marginTop = '-300px';
      div.style.zIndex = 3001;
      div.style.padding = 0;

      if(this.title) {
        var title = document.createElement('h3');
        title.innerText = this.title;
        div.appendChild(title);
      }
      if(this.doneButton) {
        var qMark = '';
        if(this.address) { qMark = '<div class="q-mark"></div>'; }
        $(div).append('<div class="bottom-sect">'+ qMark+'<div class="btn done">Done</div></div>');
        $(div).find('.done').on('click', function() {
          self.closeModal();
        });
      }

      var span = document.createElement('span');
      span.className = 'modal-cross';
      span.style.position = 'absolute';
      span.style.right = '15px';
      span.style.top = '15px';
      span.innerText = '×';
      span.style.zIndex = '1000';
      div.appendChild(span);

      var content = document.createElement('div');
      content.style.width = '100%';
      if(!this.title) content.style.height = (this.contentHeight || '100%');
      content.style.position = "relative";
      content.style.padding = (this.padding||0) + 'px';
      div.appendChild(content);

      this.bodyEl.appendChild(div);

      $(span).on('click', function(){
        self.closeModal();
      });

      this.el = content;
      return div;
    },

    closeModal: function(closeHandlerFn) {
      var self = this;
      this.undelegateEvents();
      if(this.callback) this.callback();
      if(this.onClose) this.onClose();
      $(self.modalWindow).fadeOut(100);
      $(self.backgroundDiv).hide();

      setTimeout(function(){
        self.$el.remove();
        self.remove();
        $(self.modalWindow).remove();
        $(self.backgroundDiv).remove();
      }, 550);

      if(closeHandlerFn) {
        $(window).unbind('keydown', closeHandlerFn);
      }

      this.close();
    },

    handleKey: function(e) {
      if(e.keyCode == 27) { //escape
        this.closeModal();
        e.stopPropagation();
      }
    }

  });

  return Backbone;
});

define('mixins/SimpleModalView',[
  'backbone',
  'mixins/BackboneModal',
  'util'
],
function(Backbone) {

  var SimpleModalView = Backbone.ModalView.extend({
    tagName: 'div',
    className: 'deployed',

    initialize: function(data) {
      this.render(data.img, data.text);
    },

    render : function(img, text) {
      if(img) {
        this.el.innerHTML += '<img height="300" src="/static/img/'+img+'">';
      }

      if(text) {
        this.el.innerHTML += '<h4>'+text+'</h4>';
      }
      return this;
    }
  });

  return SimpleModalView;
});

define('mixins/ErrorDialogueView',[
  'backbone',
  'mixins/BackboneModal',
  'util'
],
function(Backbone) {

  var ErrorDialogueView = Backbone.ModalView.extend({
    tagName: 'div',
    className: 'error-dialogue',
    events : {
      'click .btn.done' : 'closeModal'
    },

    doneButton: true,

    initialize: function(data, callback) {
      this.render(data.img, data.text);
      this.callback = callback;
    },

    _countdownToRefresh : function() {
        /* This only works for the DeployView, because there is a span w ID = countdown-ksikka. */
        var cntEl = document.getElementById("countdown-ksikka");
        function countdown() {
          var n = parseInt(cntEl.innerHTML);
          if (n == 0) {
            window.location.reload(true);
          } else {
            cntEl.innerHTML = n-1;
            window.setTimeout(countdown, 1000);
          }
        }
        window.setTimeout(countdown, 1000);
    },

    render : function(img, text) {
      if(img) { this.el.innerHTML += '<img src="/static/img/'+img+'">'; }
      if(text) { this.el.innerHTML += '<p>'+text+'</p>'; }

      return this;
    }
  });

  return ErrorDialogueView;
});

define('mixins/BackboneDialogue',[
  'backbone',
  'jquery-ui'
],

function() {

  Backbone.DialogueView = Backbone.View.extend({
    width: 500,
    height: 160,
    padding: 0,
    css: 'dialogue',

    events : {
      'click .modal-bg' : 'closeModal',
      'keydown'         : 'handleKey'
    },

    _configure: function(options) {
      Backbone.DialogueView.__super__._configure.call(this, options);
      this.backgroundDiv = this.setupModal();
      this.modalWindow = this.setupModalWindow();
      util.loadCSS(this.css);
      _.bindAll(this);
    },

    _ensureElement: function(options) {
      Backbone.DialogueView.__super__._ensureElement.call(this, options);
    },

    setupModal: function() {
      var self = this;
      var div = document.createElement('div');
      div.className = "modal-bg fadeIn";
      div.style.position = 'fixed';
      div.style.width = '100%';
      div.style.height = '100%';
      div.style.top = '0';
      div.style.left = '0';
      div.style.backgroundColor = '#222';
      div.style.opacity = '0.4';
      div.style.zIndex = 3000;
      document.body.appendChild(div);

      var closeHandler = function(e) {
        if(e.keyCode == 27) {
          self.closeModal(closeHandler);
        }
      };

      $(div).on('click', function() {
        self.closeModal(closeHandler);
      });


      $(window).on('keydown', closeHandler);

      return div;
    },

    setupModalWindow: function() {
      var self = this;

      var div = document.createElement('div');
      div.style.position = 'fixed';
      div.className = 'modal ' + this.className;
      div.style.width = this.width + 'px';
      div.style.minHeight = '300px';
      div.style.padding = this.padding + 'px';
      
      if(this.height) div.style.height = this.height;
      
      div.style.top = '50%';
      div.style.left = '50%';
      div.style.marginLeft= '-'+ (this.width/2) +'px';
      div.style.marginTop = '-240px';
      div.style.zIndex = 3001;

      var span = document.createElement('span');
      span.className = 'modal-cross';
      span.style.position = 'absolute';
      span.style.right = '15px';
      span.style.top = '15px';
      span.innerText = '×';
      div.appendChild(span);

      var content = document.createElement('div');
      content.style.width = '100%';
      div.appendChild(content);

      document.body.appendChild(div);

      $(span).on('click', function(){
        self.closeModal();
      });

      this.el = content;
      return div;
    },

    closeModal: function(closeHandlerFn) {
      var self = this;
      this.undelegateEvents();
      if(this.callback) this.callback();
      if(this.onClose) this.onClose();
      // fadeOut(function() { $(this).remove(); });
      $(self.modalWindow).fadeOut(100);
      $(self.backgroundDiv).hide();

      setTimeout(function(){
        self.$el.remove();
        self.remove();
        $(self.modalWindow).remove();
        $(self.backgroundDiv).remove();
      }, 550);

      if(closeHandlerFn) {
        $(window).unbind('keydown', closeHandlerFn);
      }

      this.stopListening();
    },

    handleKey: function(e) {
      if(e.keyCode == 27) { //escape
        this.closeModal();
        e.stopPropagation();
      }
    }

  });

  return Backbone;
});

define('mixins/SimpleDialogueView',[
  'backbone',
  'mixins/BackboneDialogue',
  'util'
],
function(Backbone) {

  var SimpleDialogueView = Backbone.DialogueView.extend({
    tagName: 'div',
    className: 'normal-dialogue',
    padding: 0,
    events : {
      'click .btn.done' : 'closeModal'
    },

    initialize: function(data) {
      this.render(data.img, data.text);
    },

    render : function(img, text) {
      if(img) {
        this.el.innerHTML += '<img src="/static/img/'+img+'">';
      }

      if(text) {
        this.el.innerHTML += '<p>'+text+'</p>';
      }

      this.el.innerHTML += '<div class="bottom-sect"><div class="btn done">Done</div></div>';

      return this;
    }
  });

  return SimpleDialogueView;
});

var TutorialDirectory = [
  {
    title : "Introduction",
    view  : "tutorial-intro",
    isSubSection: false
  },
  {
    title : "Tables Page",
    view  : "tutorial-tables-page",
    isSubSection: false
  },
  {
    title : "User Tables",
    view  : "tutorial-user-tables",
    isSubSection : true
  },
  {
    title : "Tables",
    view  : "tutorial-tables",
    isSubSection: true
  },
  {
    title : "Relationships",
    view  : "tutorial-relationships",
    isSubSection : true
  },
  {
    title : "Pages",
    view  : "tutorial-pages",
    isSubSection : false
  },
  {
    title : "Editor",
    view  : "tutorial-editor",
    isSubSection : false
  },
  {
    title : "Design Elements",
    view  : "tutorial-design-elements",
    isSubSection : true
  },
  {
    title : "Images",
    view  : "tutorial-images",
    isSubSection : true
  },
  {
    title : "Login",
    view  : "tutorial-login",
    isSubSection : true
  },
  {
    title : "Sign Up",
    view  : "tutorial-sign-up",
    isSubSection : true
  },
  {
    title : "Page Content",
    view  : "tutorial-page-content",
    isSubSection : true
  },
  {
    title : "Forms",
    view  : "tutorial-forms",
    isSubSection : true
  },
  {
    title : "Lists",
    view  : "tutorial-lists",
    isSubSection : true
  },
  {
    title : "Search",
    view  : "tutorial-search",
    isSubSection : true
  },
  {
    title : "Themes",
    view  : "tutorial-themes",
    isSubSection : false
  },
  {
    title : "Deploy",
    view  : "tutorial-deploy",
    isSubSection : false
  },
  {
    title : "Emails",
    view  : "tutorial-emails",
    isSubSection : false
  },
  {
    title : "Application Settings",
    view  : "tutorial-application-settings",
    isSubSection : false
  },
  {
    title : "Domain Settings",
    view  : "tutorial-domain-settings",
    isSubSection : true
  },
  {
    title : "SEO Optimization",
    view  : "tutorial-seo-optimization",
    isSubSection : true
  },
  {
    title : "Deleting Your Application",
    view  : "tutorial-deleting-your-application",
    isSubSection : true
  },
  {
    title : "Feedback",
    view  : "feedback-form-page",
    isSubSection : false
  }
];

define("tutorial/TutorialDict", function(){});

TutorialTemplates = {};

TutorialTemplates.searchFieldTemp = [
	'<form class="tutorial-q-form">',
		'<input type="text" class="q-input" placeholder="Type your question...">',
		'<input class="btn" type="submit" value="?">',
	'</form>'
].join('\n');

TutorialTemplates.menuTemp = [
	'<div class="bottom-arrow"></div',
	'<div class="tutorial-menu">',
		'<ul id="tutorial-menu-list">',
			'<% _(tutorials).each(function(tutorial, i) { %>',
			'<li id="tutorial-<%= i %>" class="<%= tutorial.cls %>">',
				'<%= tutorial.title %>',
			'</li>',
			'<% }); %>',
		'</ul>',
	'</div>'
].join('\n');

TutorialTemplates.slideTemp = [
	'<header>',
		'<h1><%= title %></h1><a href="<%= link %>" rel="external" target="_blank" class="full-page-button"><div class="icon"></div>See Full Page</a>',
		'<a class="btn btn-navbar collapsed" data-toggle="collapse" data-target=".nav-collapse">',
			'<span class="icon-bar"></span>',
      '<span class="icon-bar"></span>',
      '<span class="icon-bar"></span>',
    '</a>',
    '<span class="pull-right">',
      '<% if (showPrevBtn) { %><a class="prev btn" href="#">&laquo; Prev</a><% } %>',
      '<% if (showNextBtn) { %><a class="next btn offset1" href="#">Next &raquo;</a><% } %>',
    '</span>',
	'</header>',
	'<div class="text-cont">',
		'<%= obj.content %>',
	'</div>'
].join('\n');

define("tutorial/TutorialTemplates", function(){});

define('tutorial/TutorialView',[
  'backbone',
  './TutorialDict',
  './TutorialTemplates',
  'util'
],
function() {

  var TutorialView = Backbone.View.extend({
    tagName: 'div',
    className: 'tutorial-view hide',
    css : "tutorial",
    expanded: false,

    events : {
      "click #tutorial-menu-list li" : "clickedMenuItem",
      'scroll #tutorial-menu-list' : 'menuScrolled',
      "submit .tutorial-q-form" : "submittedQuestion",
      "click .answer-slide"     : "showAnswer",
      'click .tutorial-content .prev' : 'prevBtnClicked',
      'click .tutorial-content .next' : 'nextBtnClicked',
      "submit #feedback-form"   : "submittedFeedback",
      "mouseover .bottom-arrow" : "slideDown",
      "click .btn-navbar"       : "toggleMenu"
    },

    initialize: function(options) {
      _.bindAll(this);
      this.titles = _.pluck(TutorialDirectory, 'title');
      var initial = options.initial || 0;
      this.addr = this.getIndex(initial);

      util.loadCSS(this.css);
      this.render();
      this.chooseSlide();
      /*this.reader = new answer();
      this.parseAnswers(TutorialDirectory);*/
    },

    render : function(img, text) {
      this.renderBg();
      this.renderLeftMenu();
      this.renderMainModal();
      document.body.appendChild(this.el);
      this.$el.fadeIn('fast');
      return this;
    },

    renderBg: function() {
      var self = this;
      var bgDiv = document.createElement('div');
      bgDiv.className = 'modal-bg';
      this.bgDiv = bgDiv;
      $(bgDiv).on('click', function(e) {
        self.closeModal();
      });
      this.el.appendChild(bgDiv);
    },

    renderMainModal: function() {
      var mainDiv = document.createElement('div');
      mainDiv.className = 'tutorial-content';
      this.mainDiv = mainDiv;
      this.el.appendChild(mainDiv);
    },

    renderLeftMenu: function() {
      var menuDiv = document.createElement('div');
      menuDiv.className = 'tutorial-menu';
      //menuDiv.appendChild(this.createSearchField());

      var tutorials = _(TutorialDirectory).map(function(t) {
        return {
          title: t.title,
          cls: (t.isSubSection) ? 'submenu' : ''
        };
      });
      var menuHtml = _.template(TutorialTemplates.menuTemp, {tutorials: tutorials});
      menuDiv.innerHTML += menuHtml;
      this.el.appendChild(menuDiv);
    },

    createSearchField: function() {
      var searchLi = document.createElement('div');
      searchLi.innerHTML = _.template(TutorialTemplates.searchFieldTemp, {});
      searchLi.className = "search-bar";
      return searchLi;
    },

    /*
     * Given a section title, return the index in the tutorial directory
     * If title, is not a string, assume it is already an array index
     */
    getIndex: function(title) {
      if(_.isString(title)) {
        index = this.titles.indexOf(title);
        if(index > -1) {
          return index;
        }
        else {
          return 0;
        }
      }
      else {
        return title;
      }
    },

    getSection: function(title) {
      return TutorialDirectory[this.getIndex(title)];
    },

    parseAnswers: function(dict) {
      var self = this;
      _(dict).each(function(item, ind) {
        if(item.view) {
          self.reader.read(util.getHTML(item.view), [ind] ,item.title);
        }
      });
    },

    clickedMenuItem: function(e) {
      var addr = (e.target.id).replace('tutorial-','');
      this.chooseSlide(parseInt(addr, 10));
    },

    chooseSlide: function(addr) {
      if(addr) {
        this.addr = addr;
      }
      this.selectMenu();
      this.showSlide(addr);
    },

    selectMenu: function (addr) {
      if(addr) {
        this.addr = addr;
      }
      this.$el.find('.selected').removeClass('selected');
      $('#tutorial-'+this.addr).addClass('selected');
    },

    showSlide: function(addr) {
      if(addr) {
        this.addr = addr;
      }
      var obj = this.getSection(this.addr);
      context = {
        title: obj.title,
        content: util.getHTML(obj.view),
        showPrevBtn: !(addr === 0),
        showNextBtn: !(addr === TutorialDirectory.length - 1)
      };
      context.link = '/documentation/' + obj.view + '/';

      contentHTML = _.template(TutorialTemplates.slideTemp, context);
      $('.tutorial-content').html(contentHTML);
      util.log_to_server('viewed tutorial page', {page: obj.title}, appId);
    },

    showQuestionSlide: function(question, results) {
      console.log(results);

      var title = '<div class="main-img q-mark" style="background-image:url(/static/img/tutorial/large-q-mark.png)">'+ question +'</div>';
      var resultItems = '';

      _(results).each(function(result) {
        console.log(result);
        resultItems += '<li class="answer-slide" id="slide-'+result.dir.join('-') + '"><h3>'+ result.title +'</h3>' + result.article + '</li>';
      });

      if(!results.length) {
        resultItems += '<li class="no-result">No answers could be found :( But we\'ll get back to you soon!</li>';
      }

      $('.tutorial-content').html('');
      $('.tutorial-content').html(title + '<ul class="text-cont">'+resultItems+'</ul>');
    },

    submittedQuestion: function(e) {
      e.preventDefault();

      var question = this.$el.find('.q-input').val();
      var results = this.reader.match(question);
      this.showQuestionSlide(question, results);

      util.log_to_server('asked question', {directory: null, title: question}, appId);
    },

    showAnswer: function(e) {
      console.log(e.target.id);
      var id = (e.target.id||e.target.parentNode.id).replace('slide-', '');
      this.chooseSlide([id], false);
    },

    submittedFeedback: function(e) {
      e.preventDefault();
      var response = {};
      response.like = $('#like-appcubator').val();
      response.dislike = $('#dislike-appcubator').val();
      response.features = $('#features-appcubator').val();

      util.log_to_server('posted feedback', response, appId);

      $('#feedback-check').prop('checked', true);
      this.closeModal();
      alert('Thanks for your feedback!');
    },

    onClose: function() {
      $(this.el).empty();
      $(window).unbind('keydown', this.keyhandler);
    },

    closeModal: function() {
      var self = this;
      this.$el.fadeOut('fast', function() {
        self.remove();
        self.stopListening();
        window.history.pushState(null, null, window.location.href.replace("tutorial/",""));
        v1.tutorialIsVisible = false;
      });
    },

    menuScrolled: function(e) {
      var el = $(e.target);
      var a = el.scrollTop();
      var b = $(el).innerHeight();
      var c = e.target.scrollHeight;

      if(a+b == c) {
        $('.bottom-arrow').fadeOut();
      }
      else {
        $('.bottom-arrow').fadeIn();
      }
    },

    slideDown: function() {
      var self = this;
      this.$el.find('#tutorial-menu-list').animate({
        scrollTop: '200px'
      }, 200);
    },

    prevBtnClicked: function(e) {
      e.preventDefault();
      this.chooseSlide(this.addr - 1);
    },

    nextBtnClicked: function(e) {
      e.preventDefault();
      this.chooseSlide(this.addr + 1);
    },

    toggleMenu: function() {
      if(!this.expanded) {
        this.expanded = true;
        $('.tutorial-menu').addClass('open');
        $('.tutorial-content').addClass('open');
      }
      else {
        this.expanded = false;
        $('.tutorial-menu').removeClass('open');
        $('.tutorial-content').removeClass('open');
      }
    }

  });

  return TutorialView;
});

define('DeployView',[
  'mixins/BackboneModal',
  'util'
],
function() {

  var DeployView = Backbone.ModalView.extend({
    el: null,
    className: "deploy-panel",
    width: 620,
    height: 370,
    events: {
      'click .download-pane': 'downloaded'
    },
    theme: null,

    initialize: function(data) {
      _.bindAll(this);
      this.data = data;
      this.render();
    },

    render: function() {
      var template = util.getHTML('deploy-panel');
      this.el.innerHTML = _.template(template, this.data);
      this.g_js = {};
      var self = this;
      !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s); self.g_js = js; js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');
      return this;
    },

    downloaded: function() {
        $(".download-pane .loading-wheel").css('visibility','visible')
        var hideWheel = function() {
            $(".download-pane .loading-wheel").css('visibility','hidden');
        }
        v1.download(hideWheel);
    },

    close: function() {
      if(this.g_js) { this.g_js.parentNode.removeChild(this.g_js); }
      DeployView.__super__.close.call(this);
    }
  });

  return DeployView;
});

define('app/DeployManagerModel',['require','exports','module','backbone','DeployView','mixins/ErrorDialogueView'],function(require, exports, module) {

    'use strict';

    require('backbone');
    var DeployView = require('DeployView');
    var ErrorDialogueView = require('mixins/ErrorDialogueView');

	var DeployManagerModel = Backbone.Model.extend({
        DeployView : DeployView,

		isDeployed : false,
		lastDeploy : null,
		disableSave: false,

		initialize: function (appId) {
            _.bindAll(this);
            this.deployUrl = '/app/' + appId + '/deploy/';
		},

		deploySuccessHandler: function(data, callback){
            var self = this;
            callback.call(this, data);
            new DeployView(data);
            util.log_to_server('deployed app', {
                status: 'success',
                deploy_time: data.deploy_time + " seconds"
            }, appId);
            self.trigger('deployed');
            return data;
        },

        deploySoftErrorHandler: function(data) {
                v1State.set('version_id', data.version_id);
                this.disableSave = true;
                new SoftErrorView({
                    text: data.message,
                    path: data.path
                }, function() {
                    this.disableSave = false;
                });
                return data;
        },


        deployHardErrorHandler: function(data){
                var content = {};
                if (DEBUG) content.text = data.responseText;
                else content.text = "There has been a problem. Please refresh your page. We're really sorry for the inconvenience and will be fixing it very soon.";
                new ErrorDialogueView(content);
                util.log_to_server('deployed app', {
                    status: 'FAILURE',
                    deploy_time: data.deploy_time + " seconds",
                    message: data.errors
                }, appId);
                return data;
        },

		deploy: function(callback, hold_on_callback) {
            if (this.disableSave === true) return;
            var self = this;
            
            var isDeployed = false;
            var before_deploy = new Date().getTime(); // global, b/c accessed in an ajax handler
            
            this.disableSave = true;

            var jqxhrToJson = function(jqxhr){
                var data = {};
                try {
                    data = JSON.parse(jqxhr.responseText);
                } catch (e) {
                    data.errors = ["JSON response from server failed to parse", jqxhr.responseText];
                }
                return data;
            };

            // compose this w the other callbacks
            var completeCallback = function(data) {
                self.disableSave = false;
                isDeployed = true;
                data.deploy_time = (new Date().getTime() - before_deploy) / 1000;
                self.lastDeploy = new Date().getTime();
                return data;
            };

            $.ajax({
                type: "POST",
                url: self.deployUrl,
                statusCode: {
                    200: function(data){
                        data = completeCallback(data);
                        data = self.deploySuccessHandler(data, callback);
                    },
                    400: function(jqxhr){
                        var data = jqxhrToJson(jqxhr);
                        data = completeCallback(data);
                        data = self.softErrorHandler(data);
                        data = callback(data);
                    },
                    500: function(jqxhr){
                        var data = jqxhrToJson(jqxhr);
                        data = completeCallback(data);
                        data = self.deployHardErrorHandler(data);
                        data = callback(data);
                    },
                },
                dataType: "JSON"
            });

            var holdOnTimer = setTimeout(function() {
                if (!isDeployed && hold_on_callback) hold_on_callback.call(this);
                clearTimeout(holdOnTimer);
            }, 10000);
        },
	});

    return DeployManagerModel;

});
define('mixins/BackboneNameBox',[
  'backbone',
  'jquery-ui'
],

function(Backbone) {

  Backbone.NameBox = Backbone.View.extend({
    el: null,
    tagName: 'div',
    txt: "",
    events: {
      'click'               : 'showForm',
      'submit form'         : 'createFormSubmitted',
      'keydown input[type="text"]' : 'keyDown'
    },

    initialize: function(inp) {
      _.bindAll(this, 'render', 'showForm', 'createFormSubmitted');
      if(inp.txt) {
        this.txt = inp.txt;
      }
      return this;
    },

    render: function() {
      if(this.txt) {
        this.el.innerHTML += '<div class="box-button text">' + this.txt + '</div>';
      }
      if(!this.$el.find('form').length) {
        this.el.innerHTML +="<form style='display:none;'><input type='text' placeholder='Name...'></form>";
      }
      return this;
    },

    showForm: function (e) {
      this.$el.find('.box-button').hide();
      this.$el.find('form').fadeIn();
      this.$el.find('input[type="text"]').focus();
    },

    createFormSubmitted: function(e) {
      e.preventDefault();
      var nameInput = this.$el.find('input[type=text]');
      var name = nameInput.val();
      if(name.length > 0) {
        nameInput.val('');
        this.$el.find('form').hide();
        this.$el.find('.box-button').fadeIn();
        this.trigger('submit', name);
      }
      else {
        this.reset();
      }
    },

    keyDown: function (e) {
      if(e.keyCode === 27) this.reset();
    },

    reset: function() {
      var nameInput = this.$el.find('input[type=text]');
      nameInput.val('');
      this.$el.find('form').hide();
      this.$el.find('.box-button').fadeIn();
    }

  });

  return Backbone;

});

define('editor/ToolBarView',['require','exports','module','models/RouteModel','models/TemplateModel','mixins/BackboneNameBox'],function(require, exports, module) {

    'use strict';

    var RouteModel = require('models/RouteModel'),
        TemplateModel = require('models/TemplateModel');

    require('mixins/BackboneNameBox');

    var ToolBarView = Backbone.View.extend({
        subviews: [],

        events: {
            'click .go-to-page'    : 'clickedGoToPage',
            'click a.back'         : 'navigateBack',
        },

        initialize: function(options) {
            _.bindAll(this);
            
            this.collection = v1State.get('routes');

            this.pageId = options.pageId;
            this.nmrFields = v1State.get('routes').length + 1;
            
            if (this.nmrFields > 6) this.nmrFields = 6;
            
            this.listenTo(v1State.get('routes'), 'add remove', function() {
                this.nmrFields = v1State.get('routes').length + 1;
                if (this.nmrFields > 6) this.nmrFields = 6;
            }, this);

        },

        setPage: function(pageId) {
            this.pageId = pageId;
            this.render();
        },

        render: function() {
            if(this.pageId >= 0) {
                util.get('current-page').innerHTML = this.collection.models[this.pageId].get('name');
            }
            else {
                util.get('current-page').innerHTML = "Pages";
            }
            
            this.pageList = util.get('page-list');
            this.pageList.innerHTML = '';

            this.collection.each(function(page, ind) {
                if (this.pageId == ind) return;
                this.renderPageItem(ind, page.get('name'));
            }, this);

            this.createBox = new Backbone.NameBox({
                txt: 'New Page'
            }).render();
            this.createBox.on('submit', this.createPage);

            util.get('create-page').appendChild(this.createBox.el);

            this.menuPages = document.getElementById('menu-pages');
            return this;
        },

        renderPageItem: function(ind, name) {
            this.pageList.innerHTML += '<li class="go-to-page" id="page-' + ind + '"><a>' + name + '</a></li>';
        },

        clickedGoToPage: function(e) {
            var goToPageId = (e.target.id || e.target.parentNode.id).replace('page-', '');
            v1.navigate("app/" + appId + "/page/" + goToPageId + "/", {
                trigger: true
            });
        },

        createPage: function(name) {
            var pageInd = this.collection.length;
            var pageModel = new RouteModel({
                name: name
            });
            pageModel.setupUrl(name);
            pageModel.setGenerator("routes.staticpage");
            this.collection.push(pageModel);

            var templateModel = new TemplateModel({ name : name });
            templateModel.setGenerator("templates.page");
            v1State.get('templates').add(templateModel);

            var self = this;
            v1.currentApp.save(null, function() {
                self.$el.find('#page-list').append('<li class="go-to-page" id="page-' + pageInd + '"><a>' + name + '</a></li>');
                util.scrollToBottom(self.$el.find('#page-list'));
            });
        },

        navigateBack: function() {
            window.history.back();
        },

        save: function() {
            v1.save();
            return false;
        }

    });

    return ToolBarView;
});
define('mixins/DialogueView',[
  'backbone',
  'mixins/BackboneDialogue',
  'util'
],
function(Backbone) {

  var SimpleDialogueView = Backbone.DialogueView.extend({
    tagName: 'div',
    className: 'normal-dialogue',
    padding: 0,

    events : {
      'click .btn.ok' : 'okCase',
      'click .btn.cancel' : 'cancelCase'
    },

    initialize: function(data, successCallback) {
      _.bindAll(this);
      this.successCallback = successCallback;
      this.render(data.text);
    },

    render : function(text) {
      if(text) {
        this.el.innerHTML += '<p style="padding:30px;">'+text+'</p>';
      }

      this.el.innerHTML += '<div class="bottom-sect"><div class="btn cancel">Cancel</div><div class="btn ok offset1">Ok</div></div>';

      return this;
    },

    okCase: function() {
      this.successCallback.call(this);
      this.closeModal();
    },

    cancelCase: function() {
      this.closeModal();
    }

  });

  return SimpleDialogueView;
});

var UrlTemplate = {};

UrlTemplate.mainTemplate = [
  '<h3 class="hi3 hoff1 edit-url">Edit URL</h3>',
  '<div class="row well well-small">',
    '<p class="span24 offset2 hoff1"><strong>Full URL: </strong><span class="full-url"></span></p>',
  '</div>',
  '<form class="form-horizontal">',
    /*'<div class="row hoff1 control-group">',
      '<div class="">',
        '<label class="control-label">Page Name:</label>',
        '<input type="text" class="span16 offset1 page-name" value="<%= page_name %>"">',
      '</div>',
    '</div>',*/
    '<ul class="row hoff1 url-parts"></ul>',
    '<div class="row hoff2 hi3 offset2">',
      '<div class="btn btn-info btn-small offset3 new-context">+ Add Context Value</div>',
      '<div class="btn btn-info btn-small offset1 new-suffix">+ Add Custom Text</div>',
    '</div>',
  '</form>'
].join('\n');

UrlTemplate.contextTemp = [
    '<label class="control-label">Context Data:</label>',
    '<select class="context-part span16 offset1" id="form-<%= cid %>">',
      '<% _.each(entities, function(name, i) { %>',
        '<option value="<%= name %>" <% if(name == value) { %> selected <% } %> > <%= name %> ID</option>',
      '<% }); %>',
    '</select>',
    '<span id="remove-<%= cid %>" class="remove offset1">×</span>',
].join('\n');

UrlTemplate.suffixTemp = [
    '<label class="control-label">Custom Text:</label>',
    '<input type="text" id="form-<%= cid %>" class="span16 offset1 suffix-part" placeholder="customtext" value="<%= value %>">',
    '<span id="remove-<%= cid %>" class="remove offset1">×</span>',
].join('\n');

define("app/templates/UrlTemplates", function(){});

define('app/pages/UrlView',[
        'mixins/DialogueView',
        'mixins/BackboneModal',
        'app/templates/UrlTemplates'
    ],
    function(DialogueView) {

        var UrlView = Backbone.ModalView.extend({
            padding: 0,
            width: 600,
            id: 'url-editor',
            //height: 150,
            events: {
                'change .context-part': 'contextPartChanged',
                'keyup .suffix-part': 'suffixPartChanged',
                'keyup .page-name': 'pageNameChanged',
                'click .remove': 'clickedRemove',
                'click .new-context': 'askToAddContext',
                'click .new-suffix': 'addNewSuffixPart',
                'submit form': 'cancelFormSubmit'
            },

            initialize: function(urlModel, pageModel) {
                _.bindAll(this);

                this.model = urlModel;
                this.pageModel = pageModel;
                this.listenTo(this.model.get('urlparts'), 'add remove', this.renderFullUrl);
                this.listenTo(this.model.get('urlparts'), 'change:value', this.renderFullUrl);
                this.listenTo(this.model.get('urlparts'), 'add', this.appendUrlPartForm);
                this.listenTo(this.model.get('urlparts'), 'remove', this.removeUrlPart);
                this.listenTo(this.model.get('urlparts'), 'reset', this.renderUrlParts);
                this.render();
            },

            render: function() {
                var temp = UrlTemplate.mainTemplate;
                this.el.innerHTML = _.template(temp, this.model.serialize());
                this.renderUrlParts();
                this.renderFullUrl();

                this.$('.url-parts').sortable({
                    stop: this.changedOrder,
                    axis: 'y'
                });

                return this;
            },

            renderFullUrl: function() {
                this.$('.full-url').text(this.model.getUrlString());
            },

            renderUrlParts: function() {
                this.$('.url-parts').empty();
                this.model.get('urlparts').each(this.appendUrlPartForm);
            },

            appendUrlPartForm: function(urlpart, index) {
                var value = urlpart.get('value');

                // render table urlpart
                if (value.indexOf('{{') === 0) {
                    var variable = value.replace('{{', '').replace('}}', '');
                    var newContext = document.createElement('li');
                    newContext.className = 'row hoff1';
                    newContext.id = "urlpart-" + urlpart.cid;
                    newContext.innerHTML = _.template(UrlTemplate.contextTemp, {
                        cid: urlpart.cid,
                        value: variable,
                        entities: _.union(v1State.get('tables').pluck('name'), v1State.get('users').pluck('name'))
                    });
                    this.$('.url-parts').append(newContext);
                }

                // render suffix urlpart
                else {
                    var newSuffix = document.createElement('li');
                    newSuffix.className = 'row hoff1';
                    newSuffix.id = "urlpart-" + urlpart.cid;
                    newSuffix.innerHTML = _.template(UrlTemplate.suffixTemp, {
                        cid: urlpart.cid,
                        value: value
                    });
                    this.$('.url-parts').append(newSuffix);
                }
            },

            clickedRemove: function(e) {
                var cid = e.currentTarget.id.replace('remove-', '');
                this.model.get('urlparts').remove(cid);
            },

            removeUrlPart: function(urlpart, index) {
                this.$('#urlpart-' + urlpart.cid).remove();
            },

            contextPartChanged: function(e) {
                var cid = e.target.id.replace('form-', '');
                this.model.get('urlparts').get(cid).set('value', "{{" + e.target.value + "}}");
                return false;
            },

            suffixPartChanged: function(e) {
                var cid = e.target.id.replace('form-', '');
                this.model.get('urlparts').get(cid).set('value', e.target.value);
                return false;
            },

            pageNameChanged: function(e) {
                this.model.set('name', e.currentTarget.value);
                this.renderFullUrl();
            },

            addNewContextPart: function(e) {

                if (v1State.get('tables').length > 0) {
                    var firstTableName = "{{" + v1State.get('tables').at(0).get('name') + "}}";
                    this.model.get('urlparts').push({
                        value: firstTableName
                    });
                } else if (v1State.get('users').length > 0) {
                    var firstUserName = "{{" + v1State.get('users').at(0).get('name') + "}}";
                    this.model.get('urlparts').push({
                        value: firstUserName
                    });
                } else {
                    alert("Create a Table or User before adding a context value");
                }
                this.$('.context-part').last().focus();

            },

            askToAddContext: function() {
                var self = this;
                var translateTypetoNL = function(str) {
                    if (str == "node") {
                        str = "Widget";
                    }
                    return str;
                };

                var model = this.model;

                var widgets = v1State.getWidgetsRelatedToPage(this.pageModel);
                var links = v1State.getNavLinkRelatedToPage(this.pageModel);

                var widgetsNLString = "";
                if (widgets.length) {
                    var widgetsNL = _.map(widgets, function(widget) {
                        return translateTypetoNL(widget.widget.get('type')) + ' on ' + widget.pageName;
                    });
                    widgetsNLString = widgetsNL.join('<br>');

                }

                var linksNLString = "";
                if (links.length) {
                    var linksNL = _.map(links, function(link) {
                        return 'Link on ' + link.section + ' of ' + link.pageName;
                    });
                    linksNLString = linksNL.join('<br>');
                }

                if (!links.length && !widgets.length) {
                        self.addNewContextPart();
                } else {

                    new DialogueView({
                        text: "The elements listed below will be deleted if you add a context to this URL because they will no longer be valid. Do you want to proceed? <br><br> " + widgetsNLString + linksNLString
                    }, function() {

                        _.each(widgets, function(widget) {
                            widget.widget.collection.remove(widget.widget);
                        });

                        _.each(links, function(link) {
                            link.link.collection.remove(link.link);
                        });

                        self.addNewContextPart();
                    });
                }
            },

            addNewSuffixPart: function(e) {
                this.model.get('urlparts').push({
                    value: 'customtext'
                });
                this.$('.suffix-part').last().focus();
            },

            changedOrder: function(e, ui) {
                var self = this;
                var sortedIDs = $('.url-parts').sortable("toArray");
                console.log(this.model.get('urlparts').serialize());

                var newUrlParts = _(sortedIDs).map(function(id) {
                    return self.model.get('urlparts').get(id.replace('urlpart-', ''));
                });

                this.model.get('urlparts').reset(newUrlParts);
                console.log(this.model.get('urlparts').serialize());
            },
            cancelFormSubmit: function() {
                return false;
            }
        });

        return UrlView;
    });
define('mixins/ErrorModalView',[
  'backbone',
  'mixins/BackboneModal',
  'util'
],
function(Backbone) {

  var ErrorModalView = Backbone.ModalView.extend({
    tagName: 'div',
    className: 'deployed',

    initialize: function(data, callback) {
      this.render(data.img, data.text);
      this.callback = callback;
    },

    render : function(img, text) {
      if(img) {
        this.el.innerHTML += '<img src="/static/img/'+img+'">';
      }

      if(text) {
        text = text.replace('\n', '<br />');
        text = text.replace(' ', '&nbsp;');
        this.el.innerHTML += '<h3>'+text+'</h3>';
      }
      return this;
    }
  });

  return ErrorModalView;
});

define('mixins/DebugOverlay',[
  'backbone',
  'mixins/BackboneModal',
  'util'
],
function(Backbone) {

  var ErrorModalView = Backbone.ModalView.extend({
    tagName: 'div',
    className: 'deployed',

    setupModal: function() {
      var self = this;
      var div = document.createElement('div');
      div.className = "modal-bg fadeIn";
      div.style.position = 'fixed';
      div.style.width = '100%';
      div.style.height = '100%';
      div.style.top = '0';
      div.style.left = '0';
      div.style.backgroundColor = '#222';
      div.style.opacity = '0.6';
      div.style.zIndex = 3000;
      document.body.appendChild(div);

      var closeHandler = function(e) {
        if(e.keyCode == 27) {
          self.closeModal(closeHandler);
        }
      };

      $(div).on('click', function() {
        self.closeModal(closeHandler);
      });


      $(window).on('keydown', closeHandler);

      return div;
    },

    setupModalWindow: function() {
      var self = this;

      var div = document.createElement('div');
      div.style.position = 'fixed';
      div.className = this.className;
      div.style.width = "85%";
      div.style.color = "white";
      div.style.lineHeight = "2em";
      div.style.fontSize = "16px";
      if(this.height) div.style.height = this.height;
      div.style.top = '0';
      /*
      div.style.left = '50%';
      div.style.marginLeft= '-'+ (this.width/2) +'px';
      div.style.marginTop = '-300px';
      */
      div.style.padding = this.padding + 'px';
      div.style.zIndex = 3001;

      var span = document.createElement('span');
      span.className = 'modal-cross';
      span.style.position = 'absolute';
      span.style.right = '15px';
      span.style.top = '15px';
      span.innerText = '×';
      div.appendChild(span);

      var content = document.createElement('div');
      content.style.width = '100%';
      div.appendChild(content);

      document.body.appendChild(div);

      $(span).on('click', function(){
        self.closeModal();
      });

      this.el = content;
      return div;
    },

    closeModal: function(closeHandlerFn) {
      var self = this;
      this.undelegateEvents();
      if(this.callback) this.callback();
      if(this.onClose) this.onClose();
      // fadeOut(function() { $(this).remove(); });
      $(self.modalWindow).fadeOut(100);
      $(self.backgroundDiv).hide();

      setTimeout(function(){
        self.$el.remove();
        self.remove();
        $(self.modalWindow).remove();
        $(self.backgroundDiv).remove();
      }, 550);

      if(closeHandlerFn) {
        $(window).unbind('keydown', closeHandlerFn);
      }

      this.stopListening();
    },
    initialize: function(data) {
      this.render(data.img, data.text);
    },

    render : function(img, text) {
      if(img) {
        this.el.innerHTML += '<img src="/static/img/'+img+'">';
      }

      if(text) {
        text = text.replace(/\n/g, '</p><p>');
        text = text.replace(/ /g, '&nbsp;');
        this.el.innerHTML += '<p>'+text+'</p>';
      }
      return this;
    }
  });

  return ErrorModalView;
});

define('mixins/BackboneUI',[
  'backbone',
  'jquery-ui'
],

function(Backbone) {

  Backbone.UIView = Backbone.View.extend({

    resizableAndDraggable: function() {
      var self = this;

      $(self.el).resizable({
        handles: "n, e, s, w, nw, ne, sw, se",
        // grid: [80, 15],
        containment: "parent",
        resize: self.resizing,
        stop  : self.resized
      });

      self.$el.draggable({
        containment: "parent",
        //grid: [80, 15],
        drag: self.moving,
        stop: self.moved,
        snapMode : "outer"
      });

      this.setPosition("absolute");
    },

    draggable: function() {
      var self = this;
      self.$el.draggable({
        containment: parent,
        grid: [80, 15],
        drag: self.moving,
        stop: self.moved
      });
    },

    resizable: function() {
      var self = this;
      self.$el.resizable({
        handles: "n, e, s, w, se",
        grid: 30,
        resize: self.resizing,
        stop: self.resized
      });

      this.setPosition("absolute");
    },

    disableResizeAndDraggable: function() {
      if(this.$el.hasClass('ui-resizable')) {
        $(this.el).resizable("disable");
      }
      if(this.$el.hasClass('ui-draggable')) {
        $(this.el).draggable("disable");
      }
    },

    clear : function() {
      this.disableResizeAndDraggable();
      this.el.className = this.className;
      this.el.innerHTML = '';
    },

    setLeft : function(val) {
      this.el.style.left = val + "px";
    },

    setRight : function(val) {
      this.el.style.right = val + "px";
    },

    setTop: function(val) {
      this.el.style.top = val + "px";
    },

    setHeight: function(val) {
      this.el.style.height = val + "px";
    },

    setWidth: function(val) {
      this.el.style.width = val + "px";
    },

    setBottom: function(val) {
      this.el.style.bottom = val + "px";
    },

    setPosition: function(val) {
      this.el.style.position = val;
    }

  });

  return Backbone;

});

define('mixins/BackboneCardView',[
        'backbone',
        'jquery-ui'
    ],

    function() {

        Backbone.CardView = Backbone.View.extend({
            width: 800,
            padding: 0,

            bodyEl: null,

            events: {
                'click .modal-bg': 'closeModal',
                'keydown': 'handleKey',
                'click .done': 'closeModal'
            },

            _configure: function(options) {
                Backbone.ModalView.__super__._configure.call(this, options);
                if (options.height) {
                    this.height = options.height;
                }
                this.bodyEl = document.body;
                this.backgroundDiv = this.setupModal();
                this.modalWindow = this.setupModalWindow();
                _.bindAll(this);
            },

            _ensureElement: function(options) {
                Backbone.ModalView.__super__._ensureElement.call(this, options);
            },

            setBodyEl: function(el) {
                this.bodyEl = el;
            },

            setupModal: function() {
                var self = this;
                var div = document.createElement('div');
                div.className = "modal-bg";
                div.style.position = 'fixed';
                div.style.width = '100%';
                div.style.height = '100%';
                div.style.top = '0';
                div.style.left = '0';
                div.style.backgroundColor = '#222';
                div.style.opacity = '0.7';
                div.style.zIndex = 3000;
                this.bodyEl.appendChild(div);

                var closeHandler = function(e) {
                    if (e.keyCode == 27) {
                        self.closeModal(closeHandler);
                    }
                };

                $(div).on('click', function() {
                    self.closeModal(closeHandler);
                });


                $(window).on('keydown', closeHandler);

                return div;
            },

            setupModalWindow: function() {
                var self = this;

                var div = document.createElement('div');
                div.style.position = 'fixed';
                div.className = 'card-view bounceInUp ' + this.className;
                div.style.width = this.width + 'px';
                if (this.height) {
                    div.style.height = this.height + 'px';
                } else {
                    div.style.minHeight = '300px';
                    div.style.maxHeight = '630px';
                }
                div.style.top = '50%';
                div.style.left = '50%';
                div.style.marginLeft = '-' + (this.width / 2) + 'px';
                div.style.marginTop = '-300px';
                div.style.zIndex = 3001;
                div.style.padding = 0;

                if (this.title) {
                    var title = document.createElement('h3');
                    title.innerText = this.title;
                    div.appendChild(title);
                }
                if (this.doneButton) {
                    var qMark = '';
                    if (this.address) {
                        qMark = '<div class="q-mark"></div>';
                    }
                    $(div).append('<div class="bottom-sect">' + qMark + '<div class="btn done">Done</div></div>');
                    $(div).find('.done').on('click', function() {
                        self.closeModal();
                    });
                }

                var span = document.createElement('span');
                span.className = 'modal-cross';
                span.style.position = 'absolute';
                span.style.right = '15px';
                span.style.top = '15px';
                span.innerText = '×';
                span.style.zIndex = '1000';
                div.appendChild(span);

                var content = document.createElement('div');
                content.style.width = '100%';
                if (!this.title) content.style.height = (this.contentHeight || '100%');
                content.style.position = "relative";
                content.style.padding = (this.padding || 0) + 'px';
                div.appendChild(content);

                this.bodyEl.appendChild(div);

                $(span).on('click', function() {
                    self.closeModal();
                });

                this.el = content;
                return div;
            },

            closeModal: function(closeHandlerFn) {
                var self = this;
                this.undelegateEvents();
                if (this.callback) this.callback();
                if (this.onClose) this.onClose();
                
                $(self.modalWindow).addClass('animated');
                $(self.modalWindow).removeClass('bounceInUp');
                $(self.modalWindow).addClass('bounceOutDown');
                
                $(self.backgroundDiv).fadeOut();

                setTimeout(function() {
                    self.$el.remove();
                    self.remove();
                    $(self.modalWindow).remove();
                    $(self.backgroundDiv).remove();
                }, 550);

                if (closeHandlerFn) {
                    $(window).unbind('keydown', closeHandlerFn);
                }

                this.close();
            },

            handleKey: function(e) {
                if (e.keyCode == 27) { //escape
                    this.closeModal();
                    e.stopPropagation();
                }
            }

        });

        return Backbone;
    });
/* ===================================================
 * bootstrap-transition.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#transitions
 * ===================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


  /* CSS TRANSITION SUPPORT (http://www.modernizr.com/)
   * ======================================================= */

  $(function () {

    $.support.transition = (function () {

      var transitionEnd = (function () {

        var el = document.createElement('bootstrap')
          , transEndEventNames = {
               'WebkitTransition' : 'webkitTransitionEnd'
            ,  'MozTransition'    : 'transitionend'
            ,  'OTransition'      : 'oTransitionEnd otransitionend'
            ,  'transition'       : 'transitionend'
            }
          , name

        for (name in transEndEventNames){
          if (el.style[name] !== undefined) {
            return transEndEventNames[name]
          }
        }

      }())

      return transitionEnd && {
        end: transitionEnd
      }

    })()

  })

}(window.jQuery);/* ==========================================================
 * bootstrap-alert.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#alerts
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* ALERT CLASS DEFINITION
  * ====================== */

  var dismiss = '[data-dismiss="alert"]'
    , Alert = function (el) {
        $(el).on('click', dismiss, this.close)
      }

  Alert.prototype.close = function (e) {
    var $this = $(this)
      , selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = $(selector)

    e && e.preventDefault()

    $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent())

    $parent.trigger(e = $.Event('close'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent
        .trigger('closed')
        .remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent.on($.support.transition.end, removeElement) :
      removeElement()
  }


 /* ALERT PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('alert')
      if (!data) $this.data('alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


 /* ALERT NO CONFLICT
  * ================= */

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


 /* ALERT DATA-API
  * ============== */

  $(document).on('click.alert.data-api', dismiss, Alert.prototype.close)

}(window.jQuery);/* ============================================================
 * bootstrap-button.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#buttons
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* BUTTON PUBLIC CLASS DEFINITION
  * ============================== */

  var Button = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.button.defaults, options)
  }

  Button.prototype.setState = function (state) {
    var d = 'disabled'
      , $el = this.$element
      , data = $el.data()
      , val = $el.is('input') ? 'val' : 'html'

    state = state + 'Text'
    data.resetText || $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout(function () {
      state == 'loadingText' ?
        $el.addClass(d).attr(d, d) :
        $el.removeClass(d).removeAttr(d)
    }, 0)
  }

  Button.prototype.toggle = function () {
    var $parent = this.$element.closest('[data-toggle="buttons-radio"]')

    $parent && $parent
      .find('.active')
      .removeClass('active')

    this.$element.toggleClass('active')
  }


 /* BUTTON PLUGIN DEFINITION
  * ======================== */

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('button')
        , options = typeof option == 'object' && option
      if (!data) $this.data('button', (data = new Button(this, options)))
      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.defaults = {
    loadingText: 'loading...'
  }

  $.fn.button.Constructor = Button


 /* BUTTON NO CONFLICT
  * ================== */

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


 /* BUTTON DATA-API
  * =============== */

  $(document).on('click.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
  })

}(window.jQuery);/* ==========================================================
 * bootstrap-carousel.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#carousel
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* CAROUSEL CLASS DEFINITION
  * ========================= */

  var Carousel = function (element, options) {
    this.$element = $(element)
    this.options = options
    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.prototype = {

    cycle: function (e) {
      if (!e) this.paused = false
      this.options.interval
        && !this.paused
        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))
      return this
    }

  , to: function (pos) {
      var $active = this.$element.find('.item.active')
        , children = $active.parent().children()
        , activePos = children.index($active)
        , that = this

      if (pos > (children.length - 1) || pos < 0) return

      if (this.sliding) {
        return this.$element.one('slid', function () {
          that.to(pos)
        })
      }

      if (activePos == pos) {
        return this.pause().cycle()
      }

      return this.slide(pos > activePos ? 'next' : 'prev', $(children[pos]))
    }

  , pause: function (e) {
      if (!e) this.paused = true
      if (this.$element.find('.next, .prev').length && $.support.transition.end) {
        this.$element.trigger($.support.transition.end)
        this.cycle()
      }
      clearInterval(this.interval)
      this.interval = null
      return this
    }

  , next: function () {
      if (this.sliding) return
      return this.slide('next')
    }

  , prev: function () {
      if (this.sliding) return
      return this.slide('prev')
    }

  , slide: function (type, next) {
      var $active = this.$element.find('.item.active')
        , $next = next || $active[type]()
        , isCycling = this.interval
        , direction = type == 'next' ? 'left' : 'right'
        , fallback  = type == 'next' ? 'first' : 'last'
        , that = this
        , e

      this.sliding = true

      isCycling && this.pause()

      $next = $next.length ? $next : this.$element.find('.item')[fallback]()

      e = $.Event('slide', {
        relatedTarget: $next[0]
      })

      if ($next.hasClass('active')) return

      if ($.support.transition && this.$element.hasClass('slide')) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $next.addClass(type)
        $next[0].offsetWidth // force reflow
        $active.addClass(direction)
        $next.addClass(direction)
        this.$element.one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid') }, 0)
        })
      } else {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $active.removeClass('active')
        $next.addClass('active')
        this.sliding = false
        this.$element.trigger('slid')
      }

      isCycling && this.cycle()

      return this
    }

  }


 /* CAROUSEL PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('carousel')
        , options = $.extend({}, $.fn.carousel.defaults, typeof option == 'object' && option)
        , action = typeof option == 'string' ? option : options.slide
      if (!data) $this.data('carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.cycle()
    })
  }

  $.fn.carousel.defaults = {
    interval: 5000
  , pause: 'hover'
  }

  $.fn.carousel.Constructor = Carousel


 /* CAROUSEL NO CONFLICT
  * ==================== */

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }

 /* CAROUSEL DATA-API
  * ================= */

  $(document).on('click.carousel.data-api', '[data-slide]', function (e) {
    var $this = $(this), href
      , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      , options = $.extend({}, $target.data(), $this.data())
    $target.carousel(options)
    e.preventDefault()
  })

}(window.jQuery);/* =============================================================
 * bootstrap-collapse.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#collapse
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* COLLAPSE PUBLIC CLASS DEFINITION
  * ================================ */

  var Collapse = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.collapse.defaults, options)

    if (this.options.parent) {
      this.$parent = $(this.options.parent)
    }

    this.options.toggle && this.toggle()
  }

  Collapse.prototype = {

    constructor: Collapse

  , dimension: function () {
      var hasWidth = this.$element.hasClass('width')
      return hasWidth ? 'width' : 'height'
    }

  , show: function () {
      var dimension
        , scroll
        , actives
        , hasData

      if (this.transitioning) return

      dimension = this.dimension()
      scroll = $.camelCase(['scroll', dimension].join('-'))
      actives = this.$parent && this.$parent.find('> .accordion-group > .in')

      if (actives && actives.length) {
        hasData = actives.data('collapse')
        if (hasData && hasData.transitioning) return
        actives.collapse('hide')
        hasData || actives.data('collapse', null)
      }

      this.$element[dimension](0)
      this.transition('addClass', $.Event('show'), 'shown')
      $.support.transition && this.$element[dimension](this.$element[0][scroll])
    }

  , hide: function () {
      var dimension
      if (this.transitioning) return
      dimension = this.dimension()
      this.reset(this.$element[dimension]())
      this.transition('removeClass', $.Event('hide'), 'hidden')
      this.$element[dimension](0)
    }

  , reset: function (size) {
      var dimension = this.dimension()

      this.$element
        .removeClass('collapse')
        [dimension](size || 'auto')
        [0].offsetWidth

      this.$element[size !== null ? 'addClass' : 'removeClass']('collapse')

      return this
    }

  , transition: function (method, startEvent, completeEvent) {
      var that = this
        , complete = function () {
            if (startEvent.type == 'show') that.reset()
            that.transitioning = 0
            that.$element.trigger(completeEvent)
          }

      this.$element.trigger(startEvent)

      if (startEvent.isDefaultPrevented()) return

      this.transitioning = 1

      this.$element[method]('in')

      $.support.transition && this.$element.hasClass('collapse') ?
        this.$element.one($.support.transition.end, complete) :
        complete()
    }

  , toggle: function () {
      this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

  }


 /* COLLAPSE PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('collapse')
        , options = typeof option == 'object' && option
      if (!data) $this.data('collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.defaults = {
    toggle: true
  }

  $.fn.collapse.Constructor = Collapse


 /* COLLAPSE NO CONFLICT
  * ==================== */

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


 /* COLLAPSE DATA-API
  * ================= */

  $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this = $(this), href
      , target = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
      , option = $(target).data('collapse') ? 'toggle' : $this.data()
    $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    $(target).collapse(option)
  })

}(window.jQuery);/* ============================================================
 * bootstrap-dropdown.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#dropdowns
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* DROPDOWN CLASS DEFINITION
  * ========================= */

  var toggle = '[data-toggle=dropdown]'
    , Dropdown = function (element) {
        var $el = $(element).on('click.dropdown.data-api', this.toggle)
        $('html').on('click.dropdown.data-api', function () {
          $el.parent().removeClass('open')
        })
      }

  Dropdown.prototype = {

    constructor: Dropdown

  , toggle: function (e) {
      var $this = $(this)
        , $parent
        , isActive

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      clearMenus()

      if (!isActive) {
        $parent.toggleClass('open')
      }

      $this.focus()

      return false
    }

  , keydown: function (e) {
      var $this
        , $items
        , $active
        , $parent
        , isActive
        , index

      if (!/(38|40|27)/.test(e.keyCode)) return

      $this = $(this)

      e.preventDefault()
      e.stopPropagation()

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      if (!isActive || (isActive && e.keyCode == 27)) return $this.click()

      $items = $('[role=menu] li:not(.divider):visible a', $parent)

      if (!$items.length) return

      index = $items.index($items.filter(':focus'))

      if (e.keyCode == 38 && index > 0) index--                                        // up
      if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
      if (!~index) index = 0

      $items
        .eq(index)
        .focus()
    }

  }

  function clearMenus() {
    $(toggle).each(function () {
      getParent($(this)).removeClass('open')
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = $(selector)
    $parent.length || ($parent = $this.parent())

    return $parent
  }


  /* DROPDOWN PLUGIN DEFINITION
   * ========================== */

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('dropdown')
      if (!data) $this.data('dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


 /* DROPDOWN NO CONFLICT
  * ==================== */

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  /* APPLY TO STANDARD DROPDOWN ELEMENTS
   * =================================== */

  $(document)
    .on('click.dropdown.data-api touchstart.dropdown.data-api', clearMenus)
    .on('click.dropdown touchstart.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('touchstart.dropdown.data-api', '.dropdown-menu', function (e) { e.stopPropagation() })
    .on('click.dropdown.data-api touchstart.dropdown.data-api'  , toggle, Dropdown.prototype.toggle)
    .on('keydown.dropdown.data-api touchstart.dropdown.data-api', toggle + ', [role=menu]' , Dropdown.prototype.keydown)

}(window.jQuery);/* =========================================================
 * bootstrap-modal.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#modals
 * =========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */


!function ($) {

  "use strict"; // jshint ;_;


 /* MODAL CLASS DEFINITION
  * ====================== */

  var Modal = function (element, options) {
    this.options = options
    this.$element = $(element)
      .delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))
    this.options.remote && this.$element.find('.modal-body').load(this.options.remote)
  }

  Modal.prototype = {

      constructor: Modal

    , toggle: function () {
        return this[!this.isShown ? 'show' : 'hide']()
      }

    , show: function () {
        var that = this
          , e = $.Event('show')

        this.$element.trigger(e)

        if (this.isShown || e.isDefaultPrevented()) return

        this.isShown = true

        this.escape()

        this.backdrop(function () {
          var transition = $.support.transition && that.$element.hasClass('fade')

          if (!that.$element.parent().length) {
            that.$element.appendTo(document.body) //don't move modals dom position
          }

          that.$element
            .show()

          if (transition) {
            that.$element[0].offsetWidth // force reflow
          }

          that.$element
            .addClass('in')
            .attr('aria-hidden', false)

          that.enforceFocus()

          transition ?
            that.$element.one($.support.transition.end, function () { that.$element.focus().trigger('shown') }) :
            that.$element.focus().trigger('shown')

        })
      }

    , hide: function (e) {
        e && e.preventDefault()

        var that = this

        e = $.Event('hide')

        this.$element.trigger(e)

        if (!this.isShown || e.isDefaultPrevented()) return

        this.isShown = false

        this.escape()

        $(document).off('focusin.modal')

        this.$element
          .removeClass('in')
          .attr('aria-hidden', true)

        $.support.transition && this.$element.hasClass('fade') ?
          this.hideWithTransition() :
          this.hideModal()
      }

    , enforceFocus: function () {
        var that = this
        $(document).on('focusin.modal', function (e) {
          if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {
            that.$element.focus()
          }
        })
      }

    , escape: function () {
        var that = this
        if (this.isShown && this.options.keyboard) {
          this.$element.on('keyup.dismiss.modal', function ( e ) {
            e.which == 27 && that.hide()
          })
        } else if (!this.isShown) {
          this.$element.off('keyup.dismiss.modal')
        }
      }

    , hideWithTransition: function () {
        var that = this
          , timeout = setTimeout(function () {
              that.$element.off($.support.transition.end)
              that.hideModal()
            }, 500)

        this.$element.one($.support.transition.end, function () {
          clearTimeout(timeout)
          that.hideModal()
        })
      }

    , hideModal: function (that) {
        this.$element
          .hide()
          .trigger('hidden')

        this.backdrop()
      }

    , removeBackdrop: function () {
        this.$backdrop.remove()
        this.$backdrop = null
      }

    , backdrop: function (callback) {
        var that = this
          , animate = this.$element.hasClass('fade') ? 'fade' : ''

        if (this.isShown && this.options.backdrop) {
          var doAnimate = $.support.transition && animate

          this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
            .appendTo(document.body)

          this.$backdrop.click(
            this.options.backdrop == 'static' ?
              $.proxy(this.$element[0].focus, this.$element[0])
            : $.proxy(this.hide, this)
          )

          if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

          this.$backdrop.addClass('in')

          doAnimate ?
            this.$backdrop.one($.support.transition.end, callback) :
            callback()

        } else if (!this.isShown && this.$backdrop) {
          this.$backdrop.removeClass('in')

          $.support.transition && this.$element.hasClass('fade')?
            this.$backdrop.one($.support.transition.end, $.proxy(this.removeBackdrop, this)) :
            this.removeBackdrop()

        } else if (callback) {
          callback()
        }
      }
  }


 /* MODAL PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.modal

  $.fn.modal = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('modal')
        , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)
      if (!data) $this.data('modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option]()
      else if (options.show) data.show()
    })
  }

  $.fn.modal.defaults = {
      backdrop: true
    , keyboard: true
    , show: true
  }

  $.fn.modal.Constructor = Modal


 /* MODAL NO CONFLICT
  * ================= */

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


 /* MODAL DATA-API
  * ============== */

  $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this)
      , href = $this.attr('href')
      , $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
      , option = $target.data('modal') ? 'toggle' : $.extend({ remote:!/#/.test(href) && href }, $target.data(), $this.data())

    e.preventDefault()

    $target
      .modal(option)
      .one('hide', function () {
        $this.focus()
      })
  })

}(window.jQuery);
/* ===========================================================
 * bootstrap-tooltip.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* TOOLTIP PUBLIC CLASS DEFINITION
  * =============================== */

  var Tooltip = function (element, options) {
    this.init('tooltip', element, options)
  }

  Tooltip.prototype = {

    constructor: Tooltip

  , init: function (type, element, options) {
      var eventIn
        , eventOut

      this.type = type
      this.$element = $(element)
      this.options = this.getOptions(options)
      this.enabled = true

      if (this.options.trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (this.options.trigger != 'manual') {
        eventIn = this.options.trigger == 'hover' ? 'mouseenter' : 'focus'
        eventOut = this.options.trigger == 'hover' ? 'mouseleave' : 'blur'
        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }

      this.options.selector ?
        (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
        this.fixTitle()
    }

  , getOptions: function (options) {
      options = $.extend({}, $.fn[this.type].defaults, options, this.$element.data())

      if (options.delay && typeof options.delay == 'number') {
        options.delay = {
          show: options.delay
        , hide: options.delay
        }
      }

      return options
    }

  , enter: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)

      if (!self.options.delay || !self.options.delay.show) return self.show()

      clearTimeout(this.timeout)
      self.hoverState = 'in'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'in') self.show()
      }, self.options.delay.show)
    }

  , leave: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)

      if (this.timeout) clearTimeout(this.timeout)
      if (!self.options.delay || !self.options.delay.hide) return self.hide()

      self.hoverState = 'out'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'out') self.hide()
      }, self.options.delay.hide)
    }

  , show: function () {
      var $tip
        , inside
        , pos
        , actualWidth
        , actualHeight
        , placement
        , tp

      if (this.hasContent() && this.enabled) {
        $tip = this.tip()
        this.setContent()

        if (this.options.animation) {
          $tip.addClass('fade')
        }

        placement = typeof this.options.placement == 'function' ?
          this.options.placement.call(this, $tip[0], this.$element[0]) :
          this.options.placement

        inside = /in/.test(placement)

        $tip
          .detach()
          .css({ top: 0, left: 0, display: 'block' })
          .insertAfter(this.$element)

        pos = this.getPosition(inside)

        actualWidth = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight

        switch (inside ? placement.split(' ')[1] : placement) {
          case 'bottom':
            tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'top':
            tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'left':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}
            break
          case 'right':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}
            break
        }

        $tip
          .offset(tp)
          .addClass(placement)
          .addClass('in')
      }
    }

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()

      $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
      $tip.removeClass('fade in top bottom left right')
    }

  , hide: function () {
      var that = this
        , $tip = this.tip()

      $tip.removeClass('in')

      function removeWithAnimation() {
        var timeout = setTimeout(function () {
          $tip.off($.support.transition.end).detach()
        }, 500)

        $tip.one($.support.transition.end, function () {
          clearTimeout(timeout)
          $tip.detach()
        })
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        removeWithAnimation() :
        $tip.detach()

      return this
    }

  , fixTitle: function () {
      var $e = this.$element
      if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
        $e.attr('data-original-title', $e.attr('title') || '').removeAttr('title')
      }
    }

  , hasContent: function () {
      return this.getTitle()
    }

  , getPosition: function (inside) {
      return $.extend({}, (inside ? {top: 0, left: 0} : this.$element.offset()), {
        width: this.$element[0].offsetWidth
      , height: this.$element[0].offsetHeight
      })
    }

  , getTitle: function () {
      var title
        , $e = this.$element
        , o = this.options

      title = $e.attr('data-original-title')
        || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

      return title
    }

  , tip: function () {
      return this.$tip = this.$tip || $(this.options.template)
    }

  , validate: function () {
      if (!this.$element[0].parentNode) {
        this.hide()
        this.$element = null
        this.options = null
      }
    }

  , enable: function () {
      this.enabled = true
    }

  , disable: function () {
      this.enabled = false
    }

  , toggleEnabled: function () {
      this.enabled = !this.enabled
    }

  , toggle: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)
      self[self.tip().hasClass('in') ? 'hide' : 'show']()
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  }


 /* TOOLTIP PLUGIN DEFINITION
  * ========================= */

  var old = $.fn.tooltip

  $.fn.tooltip = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tooltip')
        , options = typeof option == 'object' && option
      if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip

  $.fn.tooltip.defaults = {
    animation: true
  , placement: 'top'
  , selector: false
  , template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
  , trigger: 'hover'
  , title: ''
  , delay: 0
  , html: false
  }


 /* TOOLTIP NO CONFLICT
  * =================== */

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(window.jQuery);/* ===========================================================
 * bootstrap-popover.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#popovers
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* POPOVER PUBLIC CLASS DEFINITION
  * =============================== */

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }


  /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
     ========================================== */

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {

    constructor: Popover

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()
        , content = this.getContent()

      $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
      $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content)

      $tip.removeClass('fade top bottom left right in')
    }

  , hasContent: function () {
      return this.getTitle() || this.getContent()
    }

  , getContent: function () {
      var content
        , $e = this.$element
        , o = this.options

      content = $e.attr('data-content')
        || (typeof o.content == 'function' ? o.content.call($e[0]) :  o.content)

      return content
    }

  , tip: function () {
      if (!this.$tip) {
        this.$tip = $(this.options.template)
      }
      return this.$tip
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  })


 /* POPOVER PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('popover')
        , options = typeof option == 'object' && option
      if (!data) $this.data('popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover

  $.fn.popover.defaults = $.extend({} , $.fn.tooltip.defaults, {
    placement: 'right'
  , trigger: 'click'
  , content: ''
  , template: '<div class="popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"></div></div></div>'
  })


 /* POPOVER NO CONFLICT
  * =================== */

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(window.jQuery);/* =============================================================
 * bootstrap-scrollspy.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#scrollspy
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* SCROLLSPY CLASS DEFINITION
  * ========================== */

  function ScrollSpy(element, options) {
    var process = $.proxy(this.process, this)
      , $element = $(element).is('body') ? $(window) : $(element)
      , href
    this.options = $.extend({}, $.fn.scrollspy.defaults, options)
    this.$scrollElement = $element.on('scroll.scroll-spy.data-api', process)
    this.selector = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.$body = $('body')
    this.refresh()
    this.process()
  }

  ScrollSpy.prototype = {

      constructor: ScrollSpy

    , refresh: function () {
        var self = this
          , $targets

        this.offsets = $([])
        this.targets = $([])

        $targets = this.$body
          .find(this.selector)
          .map(function () {
            var $el = $(this)
              , href = $el.data('target') || $el.attr('href')
              , $href = /^#\w/.test(href) && $(href)
            return ( $href
              && $href.length
              && [[ $href.position().top + self.$scrollElement.scrollTop(), href ]] ) || null
          })
          .sort(function (a, b) { return a[0] - b[0] })
          .each(function () {
            self.offsets.push(this[0])
            self.targets.push(this[1])
          })
      }

    , process: function () {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
          , scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
          , maxScroll = scrollHeight - this.$scrollElement.height()
          , offsets = this.offsets
          , targets = this.targets
          , activeTarget = this.activeTarget
          , i

        if (scrollTop >= maxScroll) {
          return activeTarget != (i = targets.last()[0])
            && this.activate ( i )
        }

        for (i = offsets.length; i--;) {
          activeTarget != targets[i]
            && scrollTop >= offsets[i]
            && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
            && this.activate( targets[i] )
        }
      }

    , activate: function (target) {
        var active
          , selector

        this.activeTarget = target

        $(this.selector)
          .parent('.active')
          .removeClass('active')

        selector = this.selector
          + '[data-target="' + target + '"],'
          + this.selector + '[href="' + target + '"]'

        active = $(selector)
          .parent('li')
          .addClass('active')

        if (active.parent('.dropdown-menu').length)  {
          active = active.closest('li.dropdown').addClass('active')
        }

        active.trigger('activate')
      }

  }


 /* SCROLLSPY PLUGIN DEFINITION
  * =========================== */

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('scrollspy')
        , options = typeof option == 'object' && option
      if (!data) $this.data('scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy

  $.fn.scrollspy.defaults = {
    offset: 10
  }


 /* SCROLLSPY NO CONFLICT
  * ===================== */

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


 /* SCROLLSPY DATA-API
  * ================== */

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(window.jQuery);/* ========================================================
 * bootstrap-tab.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#tabs
 * ========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* TAB CLASS DEFINITION
  * ==================== */

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype = {

    constructor: Tab

  , show: function () {
      var $this = this.element
        , $ul = $this.closest('ul:not(.dropdown-menu)')
        , selector = $this.attr('data-target')
        , previous
        , $target
        , e

      if (!selector) {
        selector = $this.attr('href')
        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
      }

      if ( $this.parent('li').hasClass('active') ) return

      previous = $ul.find('.active:last a')[0]

      e = $.Event('show', {
        relatedTarget: previous
      })

      $this.trigger(e)

      if (e.isDefaultPrevented()) return

      $target = $(selector)

      this.activate($this.parent('li'), $ul)
      this.activate($target, $target.parent(), function () {
        $this.trigger({
          type: 'shown'
        , relatedTarget: previous
        })
      })
    }

  , activate: function ( element, container, callback) {
      var $active = container.find('> .active')
        , transition = callback
            && $.support.transition
            && $active.hasClass('fade')

      function next() {
        $active
          .removeClass('active')
          .find('> .dropdown-menu > .active')
          .removeClass('active')

        element.addClass('active')

        if (transition) {
          element[0].offsetWidth // reflow for transition
          element.addClass('in')
        } else {
          element.removeClass('fade')
        }

        if ( element.parent('.dropdown-menu') ) {
          element.closest('li.dropdown').addClass('active')
        }

        callback && callback()
      }

      transition ?
        $active.one($.support.transition.end, next) :
        next()

      $active.removeClass('in')
    }
  }


 /* TAB PLUGIN DEFINITION
  * ===================== */

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tab')
      if (!data) $this.data('tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


 /* TAB NO CONFLICT
  * =============== */

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


 /* TAB DATA-API
  * ============ */

  $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(window.jQuery);/* =============================================================
 * bootstrap-typeahead.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#typeahead
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function($){

  "use strict"; // jshint ;_;


 /* TYPEAHEAD PUBLIC CLASS DEFINITION
  * ================================= */

  var Typeahead = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.typeahead.defaults, options)
    this.matcher = this.options.matcher || this.matcher
    this.sorter = this.options.sorter || this.sorter
    this.highlighter = this.options.highlighter || this.highlighter
    this.updater = this.options.updater || this.updater
    this.source = this.options.source
    this.$menu = $(this.options.menu)
    this.shown = false
    this.listen()
  }

  Typeahead.prototype = {

    constructor: Typeahead

  , select: function () {
      var val = this.$menu.find('.active').attr('data-value')
      this.$element
        .val(this.updater(val))
        .change()
      return this.hide()
    }

  , updater: function (item) {
      return item
    }

  , show: function () {
      var pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight
      })

      this.$menu
        .insertAfter(this.$element)
        .css({
          top: pos.top + pos.height
        , left: pos.left
        })
        .show()

      this.shown = true
      return this
    }

  , hide: function () {
      this.$menu.hide()
      this.shown = false
      return this
    }

  , lookup: function (event) {
      var items

      this.query = this.$element.val()

      if (!this.query || this.query.length < this.options.minLength) {
        return this.shown ? this.hide() : this
      }

      items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source

      return items ? this.process(items) : this
    }

  , process: function (items) {
      var that = this

      items = $.grep(items, function (item) {
        return that.matcher(item)
      })

      items = this.sorter(items)

      if (!items.length) {
        return this.shown ? this.hide() : this
      }

      return this.render(items.slice(0, this.options.items)).show()
    }

  , matcher: function (item) {
      return ~item.toLowerCase().indexOf(this.query.toLowerCase())
    }

  , sorter: function (items) {
      var beginswith = []
        , caseSensitive = []
        , caseInsensitive = []
        , item

      while (item = items.shift()) {
        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item)
        else if (~item.indexOf(this.query)) caseSensitive.push(item)
        else caseInsensitive.push(item)
      }

      return beginswith.concat(caseSensitive, caseInsensitive)
    }

  , highlighter: function (item) {
      var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
      return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
        return '<strong>' + match + '</strong>'
      })
    }

  , render: function (items) {
      var that = this

      items = $(items).map(function (i, item) {
        i = $(that.options.item).attr('data-value', item)
        i.find('a').html(that.highlighter(item))
        return i[0]
      })

      items.first().addClass('active')
      this.$menu.html(items)
      return this
    }

  , next: function (event) {
      var active = this.$menu.find('.active').removeClass('active')
        , next = active.next()

      if (!next.length) {
        next = $(this.$menu.find('li')[0])
      }

      next.addClass('active')
    }

  , prev: function (event) {
      var active = this.$menu.find('.active').removeClass('active')
        , prev = active.prev()

      if (!prev.length) {
        prev = this.$menu.find('li').last()
      }

      prev.addClass('active')
    }

  , listen: function () {
      this.$element
        .on('blur',     $.proxy(this.blur, this))
        .on('keypress', $.proxy(this.keypress, this))
        .on('keyup',    $.proxy(this.keyup, this))

      if (this.eventSupported('keydown')) {
        this.$element.on('keydown', $.proxy(this.keydown, this))
      }

      this.$menu
        .on('click', $.proxy(this.click, this))
        .on('mouseenter', 'li', $.proxy(this.mouseenter, this))
    }

  , eventSupported: function(eventName) {
      var isSupported = eventName in this.$element
      if (!isSupported) {
        this.$element.setAttribute(eventName, 'return;')
        isSupported = typeof this.$element[eventName] === 'function'
      }
      return isSupported
    }

  , move: function (e) {
      if (!this.shown) return

      switch(e.keyCode) {
        case 9: // tab
        case 13: // enter
        case 27: // escape
          e.preventDefault()
          break

        case 38: // up arrow
          e.preventDefault()
          this.prev()
          break

        case 40: // down arrow
          e.preventDefault()
          this.next()
          break
      }

      e.stopPropagation()
    }

  , keydown: function (e) {
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40,38,9,13,27])
      this.move(e)
    }

  , keypress: function (e) {
      if (this.suppressKeyPressRepeat) return
      this.move(e)
    }

  , keyup: function (e) {
      switch(e.keyCode) {
        case 40: // down arrow
        case 38: // up arrow
        case 16: // shift
        case 17: // ctrl
        case 18: // alt
          break

        case 9: // tab
        case 13: // enter
          if (!this.shown) return
          this.select()
          break

        case 27: // escape
          if (!this.shown) return
          this.hide()
          break

        default:
          this.lookup()
      }

      e.stopPropagation()
      e.preventDefault()
  }

  , blur: function (e) {
      var that = this
      setTimeout(function () { that.hide() }, 150)
    }

  , click: function (e) {
      e.stopPropagation()
      e.preventDefault()
      this.select()
    }

  , mouseenter: function (e) {
      this.$menu.find('.active').removeClass('active')
      $(e.currentTarget).addClass('active')
    }

  }


  /* TYPEAHEAD PLUGIN DEFINITION
   * =========================== */

  var old = $.fn.typeahead

  $.fn.typeahead = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('typeahead')
        , options = typeof option == 'object' && option
      if (!data) $this.data('typeahead', (data = new Typeahead(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.typeahead.defaults = {
    source: []
  , items: 8
  , menu: '<ul class="typeahead dropdown-menu"></ul>'
  , item: '<li><a href="#"></a></li>'
  , minLength: 1
  }

  $.fn.typeahead.Constructor = Typeahead


 /* TYPEAHEAD NO CONFLICT
  * =================== */

  $.fn.typeahead.noConflict = function () {
    $.fn.typeahead = old
    return this
  }


 /* TYPEAHEAD DATA-API
  * ================== */

  $(document).on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
    var $this = $(this)
    if ($this.data('typeahead')) return
    e.preventDefault()
    $this.typeahead($this.data())
  })

}(window.jQuery);
/* ==========================================================
 * bootstrap-affix.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#affix
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* AFFIX CLASS DEFINITION
  * ====================== */

  var Affix = function (element, options) {
    this.options = $.extend({}, $.fn.affix.defaults, options)
    this.$window = $(window)
      .on('scroll.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.affix.data-api',  $.proxy(function () { setTimeout($.proxy(this.checkPosition, this), 1) }, this))
    this.$element = $(element)
    this.checkPosition()
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
      , scrollTop = this.$window.scrollTop()
      , position = this.$element.offset()
      , offset = this.options.offset
      , offsetBottom = offset.bottom
      , offsetTop = offset.top
      , reset = 'affix affix-top affix-bottom'
      , affix

    if (typeof offset != 'object') offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function') offsetTop = offset.top()
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom()

    affix = this.unpin != null && (scrollTop + this.unpin <= position.top) ?
      false    : offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ?
      'bottom' : offsetTop != null && scrollTop <= offsetTop ?
      'top'    : false

    if (this.affixed === affix) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? position.top - scrollTop : null

    this.$element.removeClass(reset).addClass('affix' + (affix ? '-' + affix : ''))
  }


 /* AFFIX PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('affix')
        , options = typeof option == 'object' && option
      if (!data) $this.data('affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix

  $.fn.affix.defaults = {
    offset: 0
  }


 /* AFFIX NO CONFLICT
  * ================= */

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


 /* AFFIX DATA-API
  * ============== */

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
        , data = $spy.data()

      data.offset = data.offset || {}

      data.offsetBottom && (data.offset.bottom = data.offsetBottom)
      data.offsetTop && (data.offset.top = data.offsetTop)

      $spy.affix(data)
    })
  })


}(window.jQuery);
define("bootstrap", ["jquery"], function(){});

define('app/GeneratorEditorView',['require','exports','module','app/Generator','backbone','bootstrap'],function(require, exports, module) {

    'use strict';

    var Generator = require('app/Generator');
    require('backbone');
    require('bootstrap');

    var GeneratorEditorView = Backbone.View.extend({
        el: null,
        tagName: 'div',
        collection: null,
        parentName: "",
        className: 'code-view',
        subviews: [],

        events: {
            'click .edit-current' : 'editCurrentGen',
            'click .fork-current' : 'forkCurrentGen',
            'click .clone-button' : 'cloneGenerator'
        },


        initialize: function(options) {
            _.bindAll(this);
            this.widgetModel = options.widgetModel;
            this.setupGenerator(options.generate);
        },

        setupGenerator: function(generatorPath) {
            this.generatorPath = generatorPath;
            this.generator = new Generator().getGenerator(this.generatorPath);
            this.widgetModel.setGenerator(generatorPath);
        },

        render: function() {
            this.el.innerHTML = _.template([
                '<div id="name-editor" style="height:60px; display: block; border-bottom:1px solid #ccc;">',
                    '<div style="line-height: 60px; display:inline-block;">Current Generator: <%= name %></div>',
                    '<div class="btn-group right">',
                        '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">',
                        'Edit Code <span class="caret"></span>',
                        '</button>',
                        '<ul class="dropdown-menu abs action-menu" role="menu">',
                            '<li><a href="#" class="edit-current">Edit Current Generator</a></li>',
                            '<li><a href="#" class="fork-current">Fork Current Generator</a></li>',
                            '<li class="divider"></li>',
                        '</ul>',
                    '</div>',
                '</div>',
                '<div id="current-code-editor" style="width:100%; height: 100%;"></div>'
            ].join('\n'), { name: this.generatorPath });


            this.$el.find('.dropdown-toggle').dropdown();

            if(this.generator._pristine) { 
                // disable that option.
                // this.$le.find('.edit-current').
            }

            this.renderCloneButtons();

            return this;
        },

        reRender :function() {
            this.el.innerHTML = '';
            this.render();
            this.setupAce();
        },

        setupAce: function() {
            this.editor = ace.edit("current-code-editor");
            this.editor.getSession().setMode("ace/mode/css");
            this.editor.setValue(String(this.generator.code), -1);
            this.editor.on("change", this.keyup);
            this.makeEditorUneditable();
        },

        makeEditorEditable: function() {
            this.editor.setReadOnly(false);  // false to make it editable
        },

        makeEditorUneditable: function() {
            this.editor.setReadOnly(true);  // false to make it editable
            this.editor.setHighlightActiveLine(false);
            this.editor.setHighlightGutterLine(false);
            this.editor.renderer.$cursorLayer.element.style.opacity=0;
        },

        renderCloneButtons: function() {
            
            var currentModule = util.packageModuleName(this.generatorPath).module;
            // e.g. if module == uielements, it can only clone uielements
            var generators = v1State.get('generators').getGeneratorsWithModule(currentModule);
            
            generators = _.reject(generators, function(generator) {

                var genPath = [util.packageModuleName(this.generatorPath).package, currentModule, generator.name].join('.');
                return genPath == this.generatorPath;
            }, this);

            _.each(generators, function(generator) {
                var genPath = [generator.package, currentModule, generator.name].join('.');
                this.$el.find('.action-menu').append('<li class="clone-button" id="'+ genPath +'"><a href="#">Switch Generator to '+  generator.name +'X</a></li>');
            }, this);
        },

        editCurrentGen: function() {
            // if is not pristine, shoudl give a warning. waiting for that functionality.
            if(this.generator._pristine) { return; }
            else {
                this.makeEditorEditable();
            }
        },

        forkCurrentGen: function() {
            
            var self = this;

            var newName = window.prompt("What do you want to name the new generator?", util.packageModuleName(self.generatorPath) + "_edited");
            
            if (newName!=null) {
                
                var newPackageModuleName = util.packageModuleName(self.generatorPath);
                newPackageModuleName.name = newName;
                
                if(!v1State.get('generators').isNameUnique(newPackageModuleName)) { self.forkCurrentGen(); } 
                
                var genObj = _.clone(this.generator);
                var newGenPath = v1State.get('generators').fork(this.generator, this.generatorName, newName);
                self.setupGenerator(newGenPath);
                self.reRender();
                self.makeEditorEditable();
            }
            else {
                self.forkCurrentGen();
            }
        },

        cloneGenerator: function(e) {
            var genPath = String(e.currentTarget.id);
            this.widgetModel.setGenerator(genPath);
            
            // changes data related to this view and rerenders
            this.generatorName = genPath;
            this.generator = new Generator().getGenerator(this.generatorName);

            this.reRender();
        },

        keyup: function() {
            var newCode = this.editor.getValue(String(this.generator.code), -1);
            this.generator.code = newCode;
        }

    });

    return GeneratorEditorView;
});

define('app/TemplatesEditorView',['require','exports','module','app/Generator','backbone','bootstrap'],function(require, exports, module) {

    'use strict';

    var Generator = require('app/Generator');
    require('backbone');
    require('bootstrap');

    var funcTemplate = [
        '<div class="code-chunk">',
            '<span class="title"><%= name %></span>',
            '<div class="code-editor" id="template-editor-<%= name %>"></div>',
        '</div>'
    ].join('\n');

    var TemplatesEditorView = Backbone.View.extend({
        el: null,
        tagName: 'div',
        collection: null,
        parentName: "",
        className: 'code-view',
        subviews: [],

        events: {
            'click .edit-current' : 'editCurrentGen',
            'click .clone-button' : 'cloneGenerator'
        },


        initialize: function(options) {
            _.bindAll(this);
            this.widgetModel = options.widgetModel;
            this.generatorName = options.generate;
            this.generator = new Generator().getGenerator(this.generatorName);
        },

        render: function() {
            var strHTML = _.template([
                '<div id="name-editor" style="height:60px; display: block; border-bottom:1px solid #ccc;">',
                    '<div style="line-height: 60px; display:inline-block;">Current Generator: <%= name %></div>',
                    '<div class="btn-group right">',
                        '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">',
                        'Edit Code <span class="caret"></span>',
                        '</button>',
                        '<ul class="dropdown-menu abs action-menu" role="menu">',
                            '<li><a href="#" class="edit-current">Edit Current Code</a></li>',
                            '<li class="divider"></li>',
                        '</ul>',
                    '</div>',
                '</div>'
            ].join('\n'), { name: this.generatorName });
            
            strHTML += '<div class="instance sect">';
            _.each(this.generator.templates, function(val, key) {
                strHTML += _.template(funcTemplate, { name: key });
            });

            strHTML += [
                    '<div id="add-template-box">',
                        '<form style="display:none;">',
                            '<input type="text" class="property-name-input" placeholder="Template Name...">',
                            '<input type="submit" class="done-btn" value="Done">',
                        '</form>',
                        '<div class="add-button box-button">+ Create a New Template</div>',
                    '</div>'
                ].join('\n');

            strHTML += '</div>';

            this.el.innerHTML = strHTML;

            this.$el.find('.dropdown-toggle').dropdown();
            this.addPropertyBox = new Backbone.NameBox({}).setElement(this.$el.find('#add-template-box')).render();
            this.addPropertyBox.on('submit', this.createTemplate);
            
            this.renderCloneButtons();
            return this;
        },

        reRender :function() {
            this.el.innerHTML = '';
            this.render();
            this.setupAce();
        },

        renderCloneButtons: function() {
            
            var packageModuleName = expanderfactory(function(code, globals) { }).parseGenID(this.generatorName);
            var generators = [];

            if (packageModuleName.package != "local" &&
                appState.generators[packageModuleName.package] &&
                appState.generators[packageModuleName.package][packageModuleName.module]) {
                generators = _.map(appState.generators[packageModuleName.package][packageModuleName.module], function(obj) { obj.package = packageModuleName.package; return obj; });
            }

            if (appState.generators["local"] &&
                appState.generators["local"][packageModuleName.module]) {
                var localGens = _.map(appState.generators["local"][packageModuleName.module], function(obj) { obj.package = "local"; return obj; });
                generators = _.union(generators, localGens);
            }

            generators = _.reject(generators, function(generator) {
                var genName = [packageModuleName.package, packageModuleName.module, generator.name].join('.');
                return genName == this.generatorName;
            }, this);

            _.each(generators, function(generator) {
                var genName = [generator.package, packageModuleName.module, generator.name].join('.');
                this.$el.find('.action-menu').append('<li class="clone-button" id="'+ genName +'"><a href="#">Clone '+  generator.name +'X</a></li>');
            }, this);
        },

        setupAce: function() {
            
            var packageModuleName = expanderfactory(function(code, globals) { }).parseGenID(this.generatorName);

            _.each(this.generator.templates, function(val, key) {

                var self = this;
                var editor = ace.edit("template-editor-" + key);
                editor.getSession().setMode("ace/mode/html");
                editor.setValue(String(val), -1);
                editor.on("change", function() {
                    self.keyup(editor, key);
                });

                if(packageModuleName.package != "local") {
                    
                    editor.setReadOnly(true);  // false to make it editable
                    editor.setHighlightActiveLine(false);
                    editor.setHighlightGutterLine(false);
                    editor.renderer.$cursorLayer.element.style.opacity=0;

                }
                else {
                    editor.setReadOnly(false);  // false to make it editable
                }

            }, this);

        },

        editCurrentGen: function() {
            var genObj = _.clone(this.generator);

            var gensWrapper = v1.currentApp.model.get('generators');
            var packageModuleName = expanderfactory(function(code, globals) { }).parseGenID(this.generatorName);
            packageModuleName.package = 'local';
            gensWrapper.local = gensWrapper.local || {};
            gensWrapper.local[packageModuleName.module] = gensWrapper.local[packageModuleName.module] || [];


            var i = 2;
            var newName = packageModuleName.name + '_v' + i;
            while(!this.isUnique(packageModuleName, newName)) { i++; newName =  packageModuleName.name + '_v' + i;  }

            packageModuleName.name = newName;

            this.generatorName = [  packageModuleName.package,
                                    packageModuleName.module,
                                    packageModuleName.name].join('.');
            
            this.widgetModel.generate = this.generatorName;
            genObj.name = packageModuleName.name;
            this.generator = genObj;

            gensWrapper.local[packageModuleName.module].push(this.generator);
            this.reRender();
        },

        isUnique: function(packageModuleName, name) {
            var gensWrapper = v1.currentApp.model.get('generators');
            var isUnique = true;
            var gens = gensWrapper.local[packageModuleName.module];
            _.each(gens, function(gen) {
                if(gen.name == name) isUnique = false;
            }, this);

            return isUnique;
        },

        createTemplate: function(name) {
            this.generator.templates[name] = "";
            this.reRender();
        },

        cloneGenerator: function(e) {
            var genPath = String(e.currentTarget.id);
            this.widgetModel.generate = genPath;
            this.generatorName = genPath;
            this.generator = new Generator().getGenerator(this.generatorName);

            this.reRender();
        },

        keyup: function(editor, key) {
            this.generator.templates[key] = editor.getValue();
        }

    });

    return TemplatesEditorView;
});
define('app/ModelEditorView',['require','exports','module','backbone'],function(require, exports, module) {

    'use strict';

    require('backbone');

    var ModelEditorView = Backbone.View.extend({

        className: 'model-editor-table',
        subviews: [],

        tagName: 'table',

        events: {
            'change .attribs'     : 'changedAttribs',
            'click .right-icon'   : 'tabClicked',
            'keyup .attr-input'   : 'attributeChanged',
            'click .remove-attr'  : 'removeAttribute'
        },


        initialize: function(model) {
            _.bindAll(this);
            this.model = model;
            this.listenTo(this.model, 'change', this.changed);
        },

        render: function (argument) {
        	

            _.each(this.model.attributes, function(val, key) {
                if(Backbone.isModel(val) || Backbone.isCollection(val)) return;
                this.createRow(val, key);
            }, this);

            this.el.insertRow(-1).innerHTML =['<tr><td colspan="3">',
            			'<div id="add-attribute-box">',
                        '<form style="display:none;">',
                            '<input type="text" class="property-name-input" placeholder="Template Name...">',
                            '<input type="submit" class="done-btn" value="Done">',
                        '</form>',
                        '<div class="add-button box-button">+ Add New Attribute</div>',
                    '</div>',
                    '</td></tr>'].join('\n');


            this.addAttributeBox = new Backbone.NameBox({}).setElement(this.$el.find('#add-attribute-box')).render();
            this.addAttributeBox.on('submit', this.createAttribute);

            return this;
        },

        createRow: function (val, key, ind) {
            console.log(ind);

            ind = ind || -1;
            console.log(ind);
            var row = this.el.insertRow(ind);
            row.id = "attr-" + key;
            row.innerHTML = ['<td>' + key + '</td>',
                    '<td><input type="text" class="attr-input" id="inp-'+ key +'" value="' + val +'"></td>',
                    '<td class="settings"><span class="remove-attr">-</span></td>'].join('\n');

            return row;
        },

        changed: function (e) {

            var changedAttrib = e.changedAttributes();

            _.each(changedAttrib, function(val, key) {

                // Key is Removed
                if (!val && val != "") {
                    this.$el.find('#attr-'+key).remove();
                }
                // Key is New
                else if (this.$el.find('#attr-'+key).length == 0) {
                    var nmrRows = this.el.getElementsByTagName("tr").length;
                    this.createRow(val, key, nmrRows-1);                   
                }

            }, this);

        },

        attributeChanged: function(e) {
            var attributeKey = String(e.currentTarget.id).replace('inp-','');
            this.model.set(attributeKey, e.currentTarget.value);
        },

        createAttribute: function(name) {
            this.model.set(name, '');
        },

        removeAttribute: function (e) {
            var attributeKey = String(e.currentTarget.parentNode.parentNode.id).replace('attr-','');
            this.model.unset(attributeKey);
        }
    });

    return ModelEditorView;

});
define('editor/WidgetSettingsView',['require','exports','module','backbone','mixins/BackboneCardView','app/GeneratorEditorView','app/TemplatesEditorView','app/ModelEditorView'],function(require, exports, module) {

    'use strict';

    require('backbone');
    require('mixins/BackboneCardView');

    var GeneratorEditorView = require('app/GeneratorEditorView');
    var TemplatesEditorView = require('app/TemplatesEditorView');
    var ModelEditorView = require('app/ModelEditorView');

    var tableTemplate = [
            '<div class="header">',
                '<div>',
                '<h2>Widget Settings Editor</h2>',
                '<div class="q-mark-circle"></div>',
                '</div>',
                '<ul class="tabs">',
                    '<li class="attributes-li right-icon">',
                    '<span>Attributes</span>',
                    '</li><li class="templates-li right-icon">',
                    '<span>Templates</span>',
                    '</li><li class="code-li right-icon">',
                    '<span>Code</span>',
                    '</li>',
                '</ul>',
            '</div>',
            '<div class="current-content"></div>',
    ].join('\n');

    var TableView = Backbone.CardView.extend({

        className: 'widget-settings-pane',
        subviews: [],

        events: {
            'change .attribs'     : 'changedAttribs',
            'click .q-mark-circle': 'showTableTutorial',
            'click .right-icon'   : 'tabClicked',
            'keyup .attr-input'   : 'attributeChanged'
        },


        initialize: function(widgetModel) {
            _.bindAll(this);
            this.model = widgetModel;
        },

        render: function() {
            this.el.innerHTML = _.template(tableTemplate, this.model.serialize());
            this.el.id = 'table-' + this.model.cid;
            this.currentContentPane = this.$el.find('.current-content');
            this.renderAttributes();

            return this;
        },

        reRender: function() {
            this.el.innerHTML = '';
            this.render();
        },

        renderAttributes: function() {
            
            this.$el.find('.current-content').html('');
            var modelEditorView = new ModelEditorView(this.model);
            this.currentContentPane.append(modelEditorView.render().el);

            // var strHTML = '<div class="code-view"><div class="instance sect">';

            // strHTML += '<table style="margin: 15px auto;">';
            // _.each(this.model.attributes, function(val, key) {
            //     if(key == 'layout') return;
            //     if(Backbone.isModel(val) || Backbone.isCollection(val)) return;

            //     strHTML += '<tr><td>' + key + '</td><td><input type="text" class="attr-input" id="attr-'+key+'" value="' + val +'"></td></tr>';
            // });
            // strHTML += '</table>';

            // strHTML += [
            //         '<div id="add-attribute-box">',
            //             '<form style="display:none;">',
            //                 '<input type="text" class="property-name-input" placeholder="Template Name...">',
            //                 '<input type="submit" class="done-btn" value="Done">',
            //             '</form>',
            //             '<div class="add-button box-button">+ Create a New Attribute</div>',
            //         '</div>'
            //     ].join('\n');

            // strHTML += '</div></div>';

            // this.currentContentPane.html(strHTML);
            // this.addAttributeBox = new Backbone.NameBox({}).setElement(this.$el.find('#add-attribute-box')).render();
            // this.addAttributeBox.on('submit', this.createAttribute);

            this.$el.find('.attributes-li').addClass('active');
        },

        renderCode: function() {
            var tableCodeView = new GeneratorEditorView({ generate: this.model.generate, widgetModel: this.model });
            this.$el.find('.current-content').html('');
            this.$el.find('.current-content').append(tableCodeView.render().el);
            tableCodeView.setupAce();
            this.$el.find('.code-li').addClass('active');
        },

        renderTemplates: function() {
            var templatesView = new TemplatesEditorView({ generate: this.model.generate, widgetModel: this.model });
            this.$el.find('.current-content').html('');
            this.$el.find('.current-content').append(templatesView.render().el);
            templatesView.setupAce();
            this.$el.find('.templates-li').addClass('active');
        },

        tabClicked: function(e) {
            this.$el.find('.active').removeClass('active');

            if($(e.currentTarget).hasClass('templates-li')) {
                this.renderTemplates();
            }
            else if($(e.currentTarget).hasClass('attributes-li')) {
                this.renderAttributes();
            }
            else if($(e.currentTarget).hasClass('code-li')) {
                this.renderCode();
            }
        },

        onClose: function() {
            this.model.trigger('rerender');
        }

    });

    return TableView;
});
define('mixins/SelectView',[
  'backbone'
],

function(Backbone) {

  SelectView = Backbone.View.extend({
    tagName: 'div',
    className : 'select-view',
    expanded: false,

    events: {
      'click'                : 'expand',
      'click li'             : 'select',
      'click .updown-handle' : 'toggle'
    },

    initialize: function(list, currentVal, isNameVal, options) {
      _.bindAll(this, 'render',
                      'expand',
                      'shrink',
                      'toggle',
                      'select');

      this.list = list;
      this.currentVal = currentVal;
      this.isNameVal = isNameVal || false;
      this.options = (options||{});
      this.render();
      return this;
    },

    render: function() {
      var self = this;
      var list = document.createElement('ul');

      if(this.currentVal) {
        var currentLi = document.createElement('li');
        currentLi.innerText = this.currentVal;
        if(self.isNameVal) { currentLi.innerText = this.currentVal.name; }
        currentLi.className = 'selected';
        list.appendChild(currentLi);
      }

      _(this.list).each(function(val, ind) {
        if(val == self.currentVal || _.isEqual(val, self.currentVal)) return;
        var li = document.createElement('li');
        li.id = 'li-' + self.cid + '-' + ind;
        val = val;
        if(self.isNameVal) { val = val.name; }
        li.innerHTML = val;
        list.appendChild(li);
      });

      var handle = document.createElement('div');
      handle.className = "updown-handle";
      this.handle = handle;

      this.el.appendChild(handle);
      this.el.appendChild(list);

      return this;
    },

    expand: function(e) {
      var length = this.list.length;

      if(this.currentVal && !_.contains(this.list, this.currentVal)) {
        length += 1;
      }

      if(this.options.maxHeight && length > this.options.maxHeight) length = this.options.maxHeight;

      this.el.style.height = length * 40 + 'px';
      this.expanded = true;
      if(e) e.stopPropagation();
    },

    shrink : function(e) {
      this.el.style.height = 40 + 'px';
      this.expanded = false;
      e.stopPropagation();
    },

    select: function(e) {
      this.shrink(e);
      if(e.target.className == "selected") return;
      var ind = String(e.target.id).replace('li-' + this.cid + '-', '');
      this.trigger('change', this.list[ind].val);
    },

    selectCurrent: function() {
      this.trigger('change', this.currentVal);
    },

    toggle: function(e) {
      if(this.expanded) this.shrink(e);
      else this.expand(e);
    }

  });

  return SelectView;

});

define('util.filepicker',[
        'https://api.filepicker.io/v1/filepicker.js',
        'util'
    ],
    function() {


        util.filepicker = {
            openFilePick: function(callback, success, appId) {

                filepicker.setKey("AAO81GwtTTec7D8nH9SaTz");

                filepicker.pickMultiple({
                        mimetypes: ['image/*'],
                        container: 'modal',
                        services: ['COMPUTER', 'GMAIL', 'DROPBOX', 'INSTAGRAM', 'IMAGE_SEARCH', 'URL', 'FACEBOOK']
                    }, function(FPFiles) {

                        for (var i = 0; i < FPFiles.length; i++) {
                            var f = FPFiles[i];
                            /* f has the following properties:
              url, filename, mimetype, size, isWriteable */
                            $.post('/app/' + appId + '/static/', {
                                name: f.filename,
                                url: f.url,
                                type: f.mimetype,
                                error: function(d) {
                                    //alert("Something went wrong with the file upload! Data: "+f);
                                }
                            });
                        }

                        callback(FPFiles, success);
                    },
                    function(FPError) {
                        console.log(FPError.toString());
                    }
                );
            },

            openSinglePick: function(callback) {

                filepicker.setKey("AAO81GwtTTec7D8nH9SaTz");

                filepicker.pick({
                        mimetypes: ['image/*'],
                        container: 'modal',
                        services: ['COMPUTER', 'GMAIL', 'DROPBOX', 'INSTAGRAM', 'IMAGE_SEARCH', 'URL', 'FACEBOOK']
                    }, function(FPFiles) {
                        callback.call(this, FPFiles);
                    },
                    function(FPError) {
                        console.log(FPError.toString());
                    }
                );
            },

            openThemeFilePick: function(callback, success, themeId) {
                filepicker.setKey("AAO81GwtTTec7D8nH9SaTz");
                filepicker.pickMultiple({
                    mimetypes: ['image/*'],
                    container: 'modal',
                    services: ['COMPUTER', 'GMAIL', 'DROPBOX', 'INSTAGRAM', 'IMAGE_SEARCH', 'URL', 'FACEBOOK']
                }, function(FPFiles) {
                    var createNewStatic = function(f, isLastFile, cb) {
                        /* f has the following properties:
            url, filename, mimetype, size, isWriteable */
                        $.ajax({
                            type: 'POST',
                            url: '/theme/' + themeId + '/static/',
                            data: {
                                name: f.filename,
                                url: f.url,
                                type: f.mimetype,
                            },
                            error: function(d) {
                                alert("Something went wrong with the file upload! Data: " + d);
                            },
                            success: function(data) {
                                if (data.id) {
                                    f.id = data.id;
                                }
                                if (isLastFile) {
                                    cb();
                                }
                            }
                        });
                    };
                    var numFiles = FPFiles.length
                    for (var i = 0; i < numFiles; i++) {
                        createNewStatic(FPFiles[i], (i === numFiles - 1), function() {
                            callback(FPFiles, success);
                        });
                    }
                }, function(FPError) {
                    console.log(FPError.toString());
                });
            }
        };

    });

define('editor/WidgetContentEditorView',['require','exports','module','mixins/SelectView','util','util.filepicker'],function(require, exports, module) {

    'use strict';

    var SelectView = require('mixins/SelectView');
    require('util');
    require('util.filepicker');

    var WidgetContentEditorView = Backbone.View.extend({
        el: document.getElementById('content-editor'),
        className: 'content-editor w-section',
        tagName: 'ul',
        events: {
            'keyup .content-editor': 'changedContent',
            'click #toggle-bold': 'toggleBold',
            'click .change-src-btn': 'clickedChangeSrc',
            'click .change-link-btn': 'clickedChangeHref',
            'change .font-picker': 'changeFont',
            'change .statics': 'changeSrc',
            'change .select-href': 'changeHref',
            'submit #external-link-form': 'addExternalLink'
        },

        initialize: function(widgetModel, parentView) {
            _.bindAll(this);

            this.model = widgetModel;
            this.parentView = parentView;
            this.render();
        },

        render: function() {
            var self = this;
            // if (this.model.get('data').has('content') && this.model.get('data').get('content') !== null && !this.model.get('data').get('content_attribs').has('src') &&
            //     this.model.get('type') != "images" &&
            //     this.model.get('type') != "buttons") {

            //     //this.el.appendChild(this.renderFontPicker());
            // }

            if (this.model.has('src')) {
                this.el.appendChild(this.renderSrcInfo());
            }
            if (this.model.has('href') || this.model.generate == "uielements.design-button") {
                this.el.appendChild(this.renderHrefInfo());
            }
        },

        renderHrefInfo: function() {


            // return this.hrefLi;

            var href = (this.model.get('href') || null);
            var li = document.createElement('li');
            li.className = "w-section change-link-btn";
            if (href) {
                li.innerHTML = "Change Link Target";
            } else {
                li.innerHTML = "Add Link";
            }
            return li;
        },

        renderSrcInfo: function() {
            // var li = document.createElement('li');
            // li.appendChild(new comp().div('Image Source').classN('header-div').el);


            // li.appendChild(selecView.el);
            // 

            var li = document.createElement('li');
            li.className = "w-section change-src-btn";
            li.innerHTML = "Change Image Source";
            return li;
        },


        // renderFontPicker: function() {
        //     var li = document.createElement('li');
        //     var curStyle = (this.model.get('data').get('content_attribs').get('style') || 'font-size:default;');

        //     var currentFont;
        //     if (/font-size:([^]+);/g.exec(curStyle)) {
        //         currentFont = /font-size:([^]+);/g.exec(curStyle)[1];
        //     } else {
        //         currentFont = "font-size:default;";
        //     }

        //     var sizeDiv = document.createElement('div');
        //     sizeDiv.className = 'size-picker';
        //     var hash = 'content_attribs' + '-' + 'style';
        //     var sizeSelect = new comp().select('').id(hash).classN('font-picker');

        //     _(['default', '10px', '14px', '16px', '18px', '20px', '32px', '36px', '48px', '72px']).each(function(val) {
        //         sizeSelect.el.innerHTML += '<option value="font-size:' + val + ';">' + val + '</option>';
        //     });

        //     sizeDiv.innerHTML = '<span class="key">Font Size</span>';
        //     sizeDiv.appendChild(sizeSelect.el);
        //     var optionsDiv = document.createElement('div');
        //     optionsDiv.className = 'font-options';
        //     optionsDiv.innerHTML = '<span id="toggle-bold" class="option-button"><strong>B</strong></span>';

        //     // li.appendChild(sizeDiv);
        //     // li.appendChild(optionsDiv);

        //     $(sizeDiv).find('option[value="font-size:' + currentFont + ';"]').prop('selected', true);
        //     return li;
        // },

        inputChanged: function(e) {
            e.stopPropagation();
            var hash = e.target.id.replace('prop-', '');
            var info = hash.split('-');

            if (info.length == 2) {
                this.model.get('data').get(info[0]).set(info[1], e.target.value);
            } else if (info.length == 1) {
                this.model.get('data').set(info[0], e.target.value);
            }
        },

        changedContent: function(e) {
            this.model.get('data').set("content", e.target.value);
        },

        changeFont: function(e) {
            if (!this.model.get('data').get('content_attribs').has('style')) {
                this.model.get('data').get('content_attribs').set('style', 'font-size:12px;');
            }
            var curStyle = this.model.get('data').get('content_attribs').get('style');

            if (/font-size:([^]+);/g.exec(curStyle)) {
                curStyle = curStyle.replace(/(font-size:)(.*?)(;)/gi, e.target.value);
            } else {
                curStyle = curStyle + ' ' + e.target.value;
            }

            this.model.get('data').get('content_attribs').set('style', curStyle);
            mouseDispatcher.isMousedownActive = false;
        },

        toggleBold: function(e) {
            var curStyle = (this.model.get('data').get('content_attribs').get('style') || '');
            if (curStyle.indexOf('font-weight:bold;') < 0) {
                $('#toggle-bold').addClass('selected');
                curStyle += 'font-weight:bold;';
                this.model.get('data').get('content_attribs').set('style', curStyle);
            } else {
                $('#toggle-bold').removeClass('selected');
                curStyle = curStyle.replace('font-weight:bold;', '');
                this.model.get('data').get('content_attribs').set('style', curStyle);
            }
        },

        staticsAdded: function(files, self) {
            _(files).each(function(file) {
                file.name = file.filename;
                statics.push(file);
            });
            self.model.set('src', _.last(files).url);
            // self.model.get('data').set('content', _.last(files).url);
        },

        clickedChangeSrc: function() {
            var self = this;

            var statics_list = _.map(statics, function(obj) {
                var newObj = {};
                newObj.val = obj.url;
                newObj.name = obj.name;
                return newObj;
            });

            statics_list = _.union({
                val: "new-image",
                name: "Upload New Image"
            }, statics_list);

            var curValName = this.model.get('src');
            if (this.model.has('src_content')) {
                curValName = this.model.get('data').get('content_attribs').get('src_content');
            }
            var curVal = {
                name: curValName,
                val: this.model.get('data').get('content_attribs').get('src')
            };

            var selectView = new SelectView(statics_list, curVal, true, {
                maxHeight: 5
            });

            this.parentView.setTempContent(selectView.el);

            selectView.bind('change', this.changeSrc);
            selectView.bind('change', function() {
                self.parentView.removeTempContent();
            });

            selectView.expand();
        },

        changeSrc: function(inp) {
            var self = this;
            if (inp == 'new-image') {
                top.util.filepicker.openFilePick(self.staticsAdded, self, appId);
            } else {
                this.model.set('src', inp);
                //this.model.set('content', inp);
            }
        },

        clickedChangeHref: function() {
            var self = this;
            var listOfPages = v1.currentApp.model.get('routes').map(function(routeModel) {
                return { name: routeModel.get('name'), val: routeModel.getUrlString() };
            });

            var href = (this.model.get('href') || null);

            if (href === null) {
                href = {
                    name: "Currently no Target",
                    val: null
                };
            } else {
                href = {
                    name: href,
                    val: href
                };
            }

            var selectView = new SelectView(listOfPages, href, true, {
                maxHeight: 5
            });

            this.parentView.setTempContent(selectView.el);

            selectView.bind('change', this.changeHref);
            selectView.bind('change', function() {
                self.parentView.removeTempContent();
            });

            selectView.expand();
        },

        changeHref: function(inp) {
            console.log(inp);

            var self = this;
            var target = inp;
            if (target == "External Link") {
                self.hrefLi.innerHTML = '<form id="external-link-form"><input id="external-link-input" type="text" placeholder="http://"></form>';
                $('#external-link-input').focus();
                return;
            }
            // else if (this.model.get('context')) {
            //     target = 'internal://' + target;
            //     target += ('/' + this.model.get('data').get('context'));
            // }
            this.model.set('href', target);
            this.renderHrefInfo();
        },

        addExternalLink: function(e) {
            e.preventDefault();
            var page_link = util.get('external-link-input').value;
            this.model.set('href', page_link);
            $('#external-link-form').remove();
            this.hrefOptions.unshift(page_link);
            this.renderHrefInfo();
        },

        clear: function() {
            this.el.innerHTML = '';
            this.model = null;
            this.remove();
        }
    });

    return WidgetContentEditorView;
});
define('editor/WidgetClassPickerView',['require','exports','module','mixins/SelectView'],function(require, exports, module) {

    'use strict';

    var SelectView = require('mixins/SelectView');

    var WidgetClassPickerView = SelectView.extend({
        className: 'class-picker select-view',
        id: 'class-editor',
        tagName: 'div',
        css: 'widget-editor',

        events: {
            'click li'                : 'select',
            'click .updown-handle'    : 'selectCurrent',
            'mouseover li'            : 'hovered',
            'mouseover .updown-handle': 'hovered'
        },

        initialize: function(widgetModel) {
            _.bindAll(this);

            this.model = widgetModel;
            var type = this.model.get('type');
            var currentClass = this.model.get('className');
            var currentVal = -1;

            if (widgetModel.hasForm()) { type = "forms"; }
            if (widgetModel.isList()) { type = "lists"; }

            var els = top.v1UIEState.getUIEVals(type).toJSON();

            this.list = _.map(els, function(obj, key) {
                if (obj.class_name == currentClass) {
                    currentVal = key;
                }
                return {
                    name: obj.class_name,
                    val: key
                };
            });

            this.uieVals = els;
            //top.v1UIEState.getUIEVals(type);
            
            this.isNameVal = true;
            this.currentVal = {
                name: currentClass,
                val: currentVal
            };
            this.render();
        },

        render: function() {
            WidgetClassPickerView.__super__.render.call(this);
            this.expand();
            this.hide();
        },

        hovered: function(e) {
            if (e.currentTarget.className == "updown-handle" && this.uieVals[this.currentVal.val]) {
                this.model.set('tagName',   this.uieVals[this.currentVal.val].tagName);
                this.model.set('className', this.uieVals[this.currentVal.val].class_name);
                return;
            }
            var ind = String(e.currentTarget.id).replace('li-' + this.cid + '-', '');
            this.model.set('tagName', this.uieVals[this.list[ind].val].tagName);
            this.model.set('className', this.uieVals[this.list[ind].val].class_name);
        },

        show: function() {
            this.$el.fadeIn();
        },

        hide: function() {
            this.$el.hide();
        }
    });

    return WidgetClassPickerView;
});
define('editor/WidgetLayoutEditorView',[
        'editor/WidgetClassPickerView'
    ],
    function(WidgetClassPickerView) {

        var ToolTipHints = {
            "a-left": "Align left",
            "a-center": "Align center",
            "a-right": "Align right",
            "padding-tb": "Top-Bottom Padding",
            "padding-lr": "Left-Right Padding",
            "pick-style": "Click to add a style"
        };


        var WidgetLayoutEditorView = Backbone.View.extend({
            el: document.getElementById('layout-editor'),
            className: 'w-section layout-editor',
            events: {
                'click .a-pick': 'changeAlignment',
                'click .padding': 'changePadding',
                'click #delete-widget': 'deleteWidget',
                'mouseover .tt': 'showToolTip',
                'mouseout .tt': 'hideToolTip'
            },

            initialize: function(widgetModel) {
                _.bindAll(this);

                this.model = widgetModel;
                this.render();
            },


            changeAlignment: function(e) {
                $('.selected', '.alignment-picker').removeClass('selected');
                var direction = (e.target.className).replace(' a-pick', '');
                direction = direction.replace(' tt', '');
                direction = direction.replace('a-', '');

                this.model.get('layout').set('alignment', direction);
                e.target.className += ' selected';
            },

            changePadding: function(e) {
                var padding = (e.target.id).replace('padding-', '');
                $(e.target).toggleClass('selected');


                if (padding == "tb") {
                    if ($(e.target).hasClass('selected')) {
                        this.model.get('layout').set('t_padding', 15);
                        this.model.get('layout').set('b_padding', 15);
                    } else {
                        this.model.get('layout').set('t_padding', 0);
                        this.model.get('layout').set('b_padding', 0);
                    }
                } else {
                    if ($(e.target).hasClass('selected')) {
                        this.model.get('layout').set('r_padding', 15);
                        this.model.get('layout').set('l_padding', 15);
                    } else {
                        this.model.get('layout').set('r_padding', 0);
                        this.model.get('layout').set('l_padding', 0);
                    }
                }
            },

            render: function() {
                var self = this;
                this.el.appendChild(this.renderPaddingInfo());
                this.el.appendChild(this.renderLayoutInfo());
            },

            renderLayoutInfo: function() {
                var aLeft = this.model.get('layout').get('alignment') == "left" ? " selected" : "";
                var aCenter = this.model.get('layout').get('alignment') == "center" ? " selected" : "";
                var aRight = this.model.get('layout').get('alignment') == "right" ? " selected" : "";

                var div = document.createElement('div');
                div.className = "alignment-picker";
                div.innerHTML += '<div class="a-left a-pick tt' + aLeft + '" id="a-left"></div><div class="a-center a-pick tt' + aCenter + '" id="a-center"></div><div class="a-right a-pick tt' + aRight + '" id="a-right"></div>';
                return div;
            },

            renderPaddingInfo: function() {
                var paddingLR = this.model.get('layout').get('r_padding') > 0 ? "selected" : "";
                var paddingTB = this.model.get('layout').get('b_padding') > 0 ? "selected" : "";

                var div = document.createElement('div');
                div.className = "padding-picker right";
                div.innerHTML += '<div class="padding tb tt ' + paddingTB + '" id="padding-tb"></div><div class="padding lr tt ' + paddingLR + '" id="padding-lr"></div>';
                return div;
            },

            showToolTip: function(e) {
                if (this.toolTip) {
                    $(this.toolTip).remove();
                }

                var div = document.createElement('div');
                div.className = "tool-tip-box fadeIn";
                var text = ToolTipHints[e.target.id];
                if (text) {
                    div.innerHTML = text;
                    this.toolTip = div;
                    this.el.appendChild(div);
                }

            },

            hideToolTip: function(e) {
                if (this.toolTip) {
                    $(this.toolTip).remove();
                }
            },

            deleteWidget: function() {
                this.model.remove();
            },

            clear: function() {
                this.el.innerHTML = '';
                this.model = null;
                this.remove();
            }
        });

        return WidgetLayoutEditorView;
    });
define('editor/ImageSliderEditorView',[
  'mixins/BackboneModal',
  'util.filepicker'
],
function() {

  var ImageSliderEditorView = Backbone.ModalView.extend({
    el     : document.getElementById('class-picker'),
    className : 'modal image-slider-editor',
    width  : 800,
    height: 600,
    padding: 0,
    title: 'Image Slider Editor',
    doneButton: true,

    events : {
      'click li.add-image' : 'clickedAddImage',
      'click li .remove'   : 'clickedRemove',
      'keyup li textarea'  : 'changedCaption'
    },

    initialize: function(widgetModel){
      _.bindAll(this);

      this.model = widgetModel;
      this.collection = this.model.get('data').get('container_info').get('slides');
      this.render();
    },

    render: function() {
      var self = this;
      this.el.innerHTML = _.template(Templates.sliderEditorTemp, {});
      this.collection.each(this.appendImage);
      // render 'add image' button
      var addImageTempl = [
        '<li class="add-image pane span10 offset1 hoff1" style="height: 246px; text-align: center;">',
          '<h3 class="hoff2">Add Image</h3>',
          '<img src="/static/img/add.png" class="span3 add-img">',
        '</li>'
      ].join('\n');
      this.$el.find('.slider-images').append(addImageTempl);

      return this;
    },

    renderNode: function(uie) {
      var temp = Templates.tempNode;
      var el = _.template(temp, { element: uie});
      return el;
    },

    clickedAddImage: function(e) {
      util.filepicker.openFilePick(this.imageAdded, this, appId);
    },

    imageAdded: function(files, self) {
      _(files).each(function(file){
        file.name = file.filename;
        statics.push(file);
        self.collection.push({
          image: file.url,
          text: 'Add a caption...'
        });
        self.appendImage(self.collection.last());
      });
    },

    clickedRemove: function(e) {
      var cid = e.currentTarget.id.replace("remove-", "");
      this.collection.remove(this.collection.get(cid));
      this.$('#image-editor-'+cid).remove();
    },

    appendImage: function(image) {
      var tmpl = _.template(Templates.sliderImageEditorTemp, {
        cid: image.cid,
        image: image.get('image'),
        text: image.get('text')
      });
      if(this.$('.add-image').length > 0) {
        this.$('.add-image').before(tmpl);
      }
      else {
        this.$('.slider-images').append(tmpl);
      }
    },

    changedCaption: function(e) {
      if(e.keyCode === 13) {
        return false;
      }
      var cid = e.currentTarget.id.replace('edit-', '');
      this.collection.get(cid).set('text', e.currentTarget.value);
    },

    clear: function() {
      this.el.innerHTML = '';
      this.model = null;
    }
  });

  return ImageSliderEditorView;
});

define('editor/SearchEditorView',[
  'mixins/BackboneModal',
  'backbone'
], function() {

    var SearchEditorView = Backbone.ModalView.extend({
        events: {
          'click .done-btn'       : 'closeModal',
          'change .field'         : 'fieldChanged',
          'change .search-direct' : 'searchPageChanged'
        },
        title: "Search Editor",
        doneButton: true,
        className: "search-editor",
        css: 'searc-editor',

        padding: 0,
        height: 400,

        initialize: function(searchModel) {
          _.bindAll(this);
          this.model = searchModel;
          this.entity = v1State.getTableModelWithName(searchModel.get('searchOn'));
          this.render();
        },

        render: function() {
          this.$el.append('<div class="row well well-small">' +
            '<p class="span24 offset2 hoff1"><strong>Goes to: </strong><select class="search-direct"></select></p>' +
            '</div>');

          v1State.get('pages').each(function(pageM) {
            var selected = (String(this.model.get('searchPage')).indexOf("internal://" + pageM.get('name')) === 0)? 'selected' : '';
            this.$el.find('.search-direct').append('<option value="internal://'+ pageM.get('name') +'" '+selected+'>'+ pageM.get('name') +'</option>');
          }, this);

          var fieldsList = document.createElement('div');
          fieldsList.className = 'fields-list';

          this.entity.get('fields').each(function(fieldM) {
            if(fieldM.get('type') !== 'fk') {
              fieldsList.innerHTML += '<div class="field"><input type="checkbox" value="'+ fieldM.cid +'" id="search-for-'+ fieldM.get('name') +'"><label for="search-for-'+ fieldM.get('name') +'">'+fieldM.get('name')+'</label></div>';
            }
          }, this);

          this.$el.append(fieldsList);

          this.model.get('searchFields').each(function(field) {
            var box = document.getElementById('search-for-' + field.get('value'));
            if(box) box.checked = true;
          });

          return this;
        },

        fieldChanged: function(e) {
          var checkbox = e.target;
          var fieldCid = e.target.value;

          var fieldM = this.entity.get('fields').get(fieldCid);

          if(e.target.checked) {
            this.model.get('searchFields').push({ value : fieldM.get('name')});
          }
          else {
            this.model.removeFieldWithName(fieldM.get('name'));
          }
        },

        searchPageChanged: function(e) {
          var value = e.target.value;
          this.model.set('searchPage', value);
        }

    });

    return SearchEditorView;
});

/**
 * React v0.4.1
 *
 * Copyright 2013 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
!function(e){if("function"==typeof bootstrap)bootstrap("react",e);else if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define('react',e);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeReact=e}else"undefined"!=typeof window?window.React=e():global.React=e()}(function(){return function(e,t,n){function r(n,i){if(!t[n]){if(!e[n]){var a="function"==typeof require&&require;if(!i&&a)return a(n,!0);if(o)return o(n,!0);throw new Error("Cannot find module '"+n+"'")}var s=t[n]={exports:{}};e[n][0].call(s.exports,function(t){var o=e[n][1][t];return r(o?o:t)},s,s.exports)}return t[n].exports}for(var o="function"==typeof require&&require,i=0;i<n.length;i++)r(n[i]);return r}({1:[function(e,t){function n(e){var t=r(e);if(!t)throw new Error(o('Tried to get element with id of "%s" but it is not present on the page.',e));return t}var r=e("./ge"),o=e("./ex");t.exports=n},{"./ex":68,"./ge":71}],2:[function(e,t){"use strict";var n={fillOpacity:!0,fontWeight:!0,opacity:!0,orphans:!0,zIndex:!0,zoom:!0},r={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},o={isUnitlessNumber:n,shorthandPropertyExpansions:r};t.exports=o},{}],3:[function(e,t){"use strict";var n=e("./CSSProperty"),r=e("./dangerousStyleValue"),o=e("./escapeTextForBrowser"),i=e("./hyphenate"),a=e("./memoizeStringOnly"),s=a(function(e){return o(i(e))}),u={createMarkupForStyles:function(e){var t="";for(var n in e)if(e.hasOwnProperty(n)){var o=e[n];null!=o&&(t+=s(n)+":",t+=r(n,o)+";")}return t||null},setValueForStyles:function(e,t){var o=e.style;for(var i in t)if(t.hasOwnProperty(i)){var a=r(i,t[i]);if(a)o[i]=a;else{var s=n.shorthandPropertyExpansions[i];if(s)for(var u in s)o[u]="";else o[i]=""}}}};t.exports=u},{"./CSSProperty":2,"./dangerousStyleValue":65,"./escapeTextForBrowser":67,"./hyphenate":76,"./memoizeStringOnly":83}],4:[function(e,t){"use strict";var n={},r={putListener:function(e,t,r){var o=n[t]||(n[t]={});o[e]=r},getListener:function(e,t){var r=n[t];return r&&r[e]},deleteListener:function(e,t){var r=n[t];r&&delete r[e]},deleteAllListeners:function(e){for(var t in n)delete n[t][e]},__purge:function(){n={}}};t.exports=r},{}],5:[function(e,t){!function(){"use strict";function n(e){return"SELECT"===e.nodeName||"INPUT"===e.nodeName&&"file"===e.type}function r(e){var t=M.getPooled(O.change,I,e);C.accumulateTwoPhaseDispatches(t),y.enqueueEvents(t),y.processEventQueue()}function o(e,t){P=e,I=t,P.attachEvent("onchange",r)}function i(){P&&(P.detachEvent("onchange",r),P=null,I=null)}function a(e,t,n){return e===b.topChange?n:void 0}function s(e,t,n){e===b.topFocus?(i(),o(t,n)):e===b.topBlur&&i()}function u(e){return"INPUT"===e.nodeName&&x[e.type]||"TEXTAREA"===e.nodeName}function l(e,t){P=e,I=t,T=e.value,N=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(P,"value",A),P.attachEvent("onpropertychange",p)}function c(){P&&(delete P.value,P.detachEvent("onpropertychange",p),P=null,I=null,T=null,N=null)}function p(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==T&&(T=t,r(e))}}function d(e,t,n){return e===b.topInput?n:void 0}function h(e,t,n){e===b.topFocus?(c(),l(t,n)):e===b.topBlur&&c()}function f(e){return e!==b.topSelectionChange&&e!==b.topKeyUp&&e!==b.topKeyDown||!P||P.value===T?void 0:(T=P.value,I)}function v(e){return"INPUT"===e.nodeName&&("checkbox"===e.type||"radio"===e.type)}function m(e,t,n){return e===b.topClick?n:void 0}var g=e("./EventConstants"),y=e("./EventPluginHub"),C=e("./EventPropagators"),E=e("./ExecutionEnvironment"),M=e("./SyntheticEvent"),D=e("./isEventSupported"),R=e("./keyOf"),b=g.topLevelTypes,O={change:{phasedRegistrationNames:{bubbled:R({onChange:null}),captured:R({onChangeCapture:null})}}},P=null,I=null,T=null,N=null,S=!1;E.canUseDOM&&(S=D("change")&&(!("documentMode"in document)||document.documentMode>8));var _=!1;E.canUseDOM&&(_=D("input")&&(!("documentMode"in document)||document.documentMode>9));var x={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},A={get:function(){return N.get.call(this)},set:function(e){T=""+e,N.set.call(this,e)}},w={eventTypes:O,extractEvents:function(e,t,r,o){var i,l;if(n(t)?S?i=a:l=s:u(t)?_?i=d:(i=f,l=h):v(t)&&(i=m),i){var c=i(e,t,r);if(c){var p=M.getPooled(O.change,c,o);return C.accumulateTwoPhaseDispatches(p),p}}l&&l(e,t,r)}};t.exports=w}()},{"./EventConstants":13,"./EventPluginHub":15,"./EventPropagators":18,"./ExecutionEnvironment":19,"./SyntheticEvent":51,"./isEventSupported":79,"./keyOf":82}],6:[function(e,t){!function(){"use strict";var n=e("./Danger"),r=e("./insertNodeAt"),o=e("./keyOf");e("./throwIf");var i=o({moveFrom:null}),a=o({insertMarkup:null}),s=o({removeAt:null}),u=function(e,t){for(var n,r,o,a=0;a<t.length;a++)r=t[a],i in r?(n=n||[],o=r.moveFrom,n[o]=e.childNodes[o]):s in r&&(n=n||[],o=r.removeAt,n[o]=e.childNodes[o]);return n},l=function(e,t){for(var n=0;n<t.length;n++){var r=t[n];r&&e.removeChild(t[n])}},c=function(e,t,o){for(var u,l,c,p=0;p<t.length;p++)if(c=t[p],i in c)u=o[c.moveFrom],l=c.finalIndex,r(e,u,l);else if(s in c);else if(a in c){l=c.finalIndex;var d=c.insertMarkup;n.dangerouslyInsertMarkupAt(e,d,l)}},p=function(e,t){var n=u(e,t);n&&l(e,n),c(e,t,n)},d={dangerouslyReplaceNodeWithMarkup:n.dangerouslyReplaceNodeWithMarkup,manageChildren:p};t.exports=d}()},{"./Danger":9,"./insertNodeAt":77,"./keyOf":82,"./throwIf":89}],7:[function(e,t){"use strict";var n=e("./invariant"),r={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_BOOLEAN_VALUE:4,HAS_SIDE_EFFECTS:8,injectDOMPropertyConfig:function(e){var t=e.Properties||{},o=e.DOMAttributeNames||{},a=e.DOMPropertyNames||{},s=e.DOMMutationMethods||{};e.isCustomAttribute&&i._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var u in t){n(!i.isStandardName[u]),i.isStandardName[u]=!0,i.getAttributeName[u]=o[u]||u.toLowerCase(),i.getPropertyName[u]=a[u]||u;var l=s[u];l&&(i.getMutationMethod[u]=l);var c=t[u];i.mustUseAttribute[u]=c&r.MUST_USE_ATTRIBUTE,i.mustUseProperty[u]=c&r.MUST_USE_PROPERTY,i.hasBooleanValue[u]=c&r.HAS_BOOLEAN_VALUE,i.hasSideEffects[u]=c&r.HAS_SIDE_EFFECTS,n(!i.mustUseAttribute[u]||!i.mustUseProperty[u]),n(i.mustUseProperty[u]||!i.hasSideEffects[u])}}},o={},i={isStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasBooleanValue:{},hasSideEffects:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(e){return i._isCustomAttributeFunctions.some(function(t){return t.call(null,e)})},getDefaultValueForProperty:function(e,t){var n,r=o[e];return r||(o[e]=r={}),t in r||(n=document.createElement(e),r[t]=n[t]),r[t]},injection:r};t.exports=i},{"./invariant":78}],8:[function(e,t){"use strict";var n=e("./DOMProperty"),r=e("./escapeTextForBrowser"),o=e("./memoizeStringOnly"),i=o(function(e){return r(e)+'="'}),a={createMarkupForProperty:function(e,t){if(n.isStandardName[e]){if(null==t||n.hasBooleanValue[e]&&!t)return"";var o=n.getAttributeName[e];return i(o)+r(t)+'"'}return n.isCustomAttribute(e)?null==t?"":i(e)+r(t)+'"':null},setValueForProperty:function(e,t,r){if(n.isStandardName[t]){var o=n.getMutationMethod[t];if(o)o(e,r);else if(n.mustUseAttribute[t])n.hasBooleanValue[t]&&!r?e.removeAttribute(n.getAttributeName[t]):e.setAttribute(n.getAttributeName[t],r);else{var i=n.getPropertyName[t];n.hasSideEffects[t]&&e[i]===r||(e[i]=r)}}else n.isCustomAttribute(t)&&e.setAttribute(t,r)},deleteValueForProperty:function(e,t){if(n.isStandardName[t]){var r=n.getMutationMethod[t];if(r)r(e,void 0);else if(n.mustUseAttribute[t])e.removeAttribute(n.getAttributeName[t]);else{var o=n.getPropertyName[t];e[o]=n.getDefaultValueForProperty(e.nodeName,t)}}else n.isCustomAttribute(t)&&e.removeAttribute(t)}};t.exports=a},{"./DOMProperty":7,"./escapeTextForBrowser":67,"./memoizeStringOnly":83}],9:[function(e,t){"use strict";function n(e){var t=u,n=e.substring(1,e.indexOf(" ")),r=l[n.toLowerCase()]||c;if(r){t.innerHTML=r[1]+e+r[2];for(var o=r[0];o--;)t=t.lastChild}else t.innerHTML=e;return t.childNodes}function r(e,t,n){return n?n.nextSibling?e.insertBefore(t,n.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild)}function o(e,t,n){for(var o,i=t.length,a=0;i>a;a++)o=r(e,t[0],o||n)}function i(e,t,r){var i=n(t),a=r?e.childNodes[r-1]:null;o(e,i,a)}function a(e,t){var r=e.parentNode,o=n(t);r.replaceChild(o[0],e)}var s=e("./ExecutionEnvironment");e("./throwIf");var u=s.canUseDOM?document.createElement("div"):null,l={option:[1,'<select multiple="true">',"</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"]};l.optgroup=l.option,l.tbody=l.thead,l.tfoot=l.thead,l.colgroup=l.thead,l.caption=l.thead,l.th=l.td;var c=[1,"?<div>","</div>"];if(u){for(var p in l)l.hasOwnProperty(p)&&(u.innerHTML="<"+p+"></"+p+">",u.firstChild&&(l[p]=null));u.innerHTML="<link />",u.firstChild&&(c=null)}var d={dangerouslyInsertMarkupAt:i,dangerouslyReplaceNodeWithMarkup:a};t.exports=d},{"./ExecutionEnvironment":19,"./throwIf":89}],10:[function(e,t){"use strict";var n=e("./DOMProperty"),r=n.injection.MUST_USE_ATTRIBUTE,o=n.injection.MUST_USE_PROPERTY,i=n.injection.HAS_BOOLEAN_VALUE,a=n.injection.HAS_SIDE_EFFECTS,s={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accessKey:null,accept:null,action:null,ajaxify:r,allowFullScreen:r|i,allowTransparency:r,alt:null,autoComplete:null,autoFocus:i,autoPlay:i,cellPadding:null,cellSpacing:null,checked:o|i,className:o,colSpan:null,contentEditable:null,contextMenu:r,controls:o|i,data:null,dateTime:r,dir:null,disabled:o|i,draggable:null,encType:null,frameBorder:r,height:r,hidden:r|i,href:null,htmlFor:null,icon:null,id:o,label:null,lang:null,list:null,max:null,maxLength:r,method:null,min:null,multiple:o|i,name:null,pattern:null,poster:null,preload:null,placeholder:null,radioGroup:null,rel:null,readOnly:o|i,required:i,role:r,scrollLeft:o,scrollTop:o,selected:o|i,size:null,spellCheck:null,src:null,step:null,style:null,tabIndex:null,target:null,title:null,type:null,value:o|a,width:r,wmode:r,cx:o,cy:o,d:o,fill:o,fx:o,fy:o,points:o,r:o,stroke:o,strokeLinecap:o,strokeWidth:o,transform:o,x:o,x1:o,x2:o,version:o,viewBox:o,y:o,y1:o,y2:o,spreadMethod:o,offset:o,stopColor:o,stopOpacity:o,gradientUnits:o,gradientTransform:o},DOMAttributeNames:{className:"class",htmlFor:"for",strokeLinecap:"stroke-linecap",strokeWidth:"stroke-width",stopColor:"stop-color",stopOpacity:"stop-opacity"},DOMPropertyNames:{autoComplete:"autocomplete",autoFocus:"autofocus",autoPlay:"autoplay",encType:"enctype",radioGroup:"radiogroup",spellCheck:"spellcheck"},DOMMutationMethods:{className:function(e,t){e.className=t||""}}};t.exports=s},{"./DOMProperty":7}],11:[function(e,t){"use strict";var n=e("./keyOf"),r=[n({ResponderEventPlugin:null}),n({SimpleEventPlugin:null}),n({TapEventPlugin:null}),n({EnterLeaveEventPlugin:null}),n({ChangeEventPlugin:null}),n({AnalyticsEventPlugin:null}),n({MobileSafariClickEventPlugin:null})];t.exports=r},{"./keyOf":82}],12:[function(e,t){!function(){"use strict";var n=e("./EventConstants"),r=e("./EventPropagators"),o=e("./ExecutionEnvironment"),i=e("./SyntheticMouseEvent"),a=e("./ReactMount"),s=e("./keyOf"),u=n.topLevelTypes,l=a.getFirstReactDOM,c={mouseEnter:{registrationName:s({onMouseEnter:null})},mouseLeave:{registrationName:s({onMouseLeave:null})}},p={eventTypes:c,extractEvents:function(e,t,n,s){if(e===u.topMouseOver&&(s.relatedTarget||s.fromElement))return null;if(e!==u.topMouseOut&&e!==u.topMouseOver)return null;var p,d;if(e===u.topMouseOut?(p=t,d=l(s.relatedTarget||s.toElement)||o.global):(p=o.global,d=t),p===d)return null;var h=p?a.getID(p):"",f=d?a.getID(d):"",v=i.getPooled(c.mouseLeave,h,s),m=i.getPooled(c.mouseEnter,f,s);return r.accumulateEnterLeaveDispatches(v,m,h,f),[v,m]}};t.exports=p}()},{"./EventConstants":13,"./EventPropagators":18,"./ExecutionEnvironment":19,"./ReactMount":39,"./SyntheticMouseEvent":54,"./keyOf":82}],13:[function(e,t){"use strict";var n=e("./keyMirror"),r=n({bubbled:null,captured:null}),o=n({topBlur:null,topChange:null,topClick:null,topDOMCharacterDataModified:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),i={topLevelTypes:o,PropagationPhases:r};t.exports=i},{"./keyMirror":81}],14:[function(e,t){var n={listen:function(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent&&e.attachEvent("on"+t,n)},capture:function(e,t,n){e.addEventListener&&e.addEventListener(t,n,!0)}};t.exports=n},{}],15:[function(e,t){"use strict";var n=e("./CallbackRegistry"),r=e("./EventPluginRegistry"),o=e("./EventPluginUtils"),i=e("./EventPropagators"),a=e("./ExecutionEnvironment"),s=e("./accumulate"),u=e("./forEachAccumulated"),l=e("./invariant"),c=null,p=function(e){if(e){var t=o.executeDispatch,n=r.getPluginModuleForEvent(e);n&&n.executeDispatch&&(t=n.executeDispatch),o.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e)}},d={injection:{injectInstanceHandle:i.injection.injectInstanceHandle,injectEventPluginOrder:r.injectEventPluginOrder,injectEventPluginsByName:r.injectEventPluginsByName},registrationNames:r.registrationNames,putListener:n.putListener,getListener:n.getListener,deleteListener:n.deleteListener,deleteAllListeners:n.deleteAllListeners,extractEvents:function(e,t,n,o){for(var i,a=r.plugins,u=0,l=a.length;l>u;u++){var c=a[u];if(c){var p=c.extractEvents(e,t,n,o);p&&(i=s(i,p))}}return i},enqueueEvents:function(e){e&&(c=s(c,e))},processEventQueue:function(){var e=c;c=null,u(e,p),l(!c)}};a.canUseDOM&&(window.EventPluginHub=d),t.exports=d},{"./CallbackRegistry":4,"./EventPluginRegistry":16,"./EventPluginUtils":17,"./EventPropagators":18,"./ExecutionEnvironment":19,"./accumulate":61,"./forEachAccumulated":70,"./invariant":78}],16:[function(e,t){"use strict";function n(){if(a)for(var e in s){var t=s[e],n=a.indexOf(e);if(i(n>-1),!u.plugins[n]){i(t.extractEvents),u.plugins[n]=t;var o=t.eventTypes;for(var l in o)i(r(o[l],t))}}}function r(e,t){var n=e.phasedRegistrationNames;if(n){for(var r in n)if(n.hasOwnProperty(r)){var i=n[r];o(i,t)}return!0}return e.registrationName?(o(e.registrationName,t),!0):!1}function o(e,t){i(!u.registrationNames[e]),u.registrationNames[e]=t,u.registrationNamesKeys.push(e)}var i=e("./invariant"),a=null,s={},u={plugins:[],registrationNames:{},registrationNamesKeys:[],injectEventPluginOrder:function(e){i(!a),a=Array.prototype.slice.call(e),n()},injectEventPluginsByName:function(e){var t=!1;for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];s[r]!==o&&(i(!s[r]),s[r]=o,t=!0)}t&&n()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return u.registrationNames[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var r=u.registrationNames[t.phasedRegistrationNames[n]];if(r)return r}return null},_resetEventPlugins:function(){a=null;for(var e in s)s.hasOwnProperty(e)&&delete s[e];u.plugins.length=0;var t=u.registrationNames;for(var n in t)t.hasOwnProperty(n)&&delete t[n];u.registrationNamesKeys.length=0}};t.exports=u},{"./invariant":78}],17:[function(e,t){"use strict";function n(e){return e===h.topMouseUp||e===h.topTouchEnd||e===h.topTouchCancel}function r(e){return e===h.topMouseMove||e===h.topTouchMove}function o(e){return e===h.topMouseDown||e===h.topTouchStart}function i(e,t){var n=e._dispatchListeners,r=e._dispatchIDs;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)t(e,n[o],r[o]);else n&&t(e,n,r)}function a(e,t,n){t(e,n)}function s(e,t){i(e,t),e._dispatchListeners=null,e._dispatchIDs=null}function u(e){var t=e._dispatchListeners,n=e._dispatchIDs;if(Array.isArray(t)){for(var r=0;r<t.length&&!e.isPropagationStopped();r++)if(t[r](e,n[r]))return n[r]}else if(t&&t(e,n))return n;return null}function l(e){var t=e._dispatchListeners,n=e._dispatchIDs;d(!Array.isArray(t));var r=t?t(e,n):null;return e._dispatchListeners=null,e._dispatchIDs=null,r}function c(e){return!!e._dispatchListeners}var p=e("./EventConstants"),d=e("./invariant"),h=p.topLevelTypes,f={isEndish:n,isMoveish:r,isStartish:o,executeDispatchesInOrder:s,executeDispatchesInOrderStopAtTrue:u,executeDirectDispatch:l,hasDispatches:c,executeDispatch:a};t.exports=f},{"./EventConstants":13,"./invariant":78}],18:[function(e,t){"use strict";function n(e,t,n){var r=t.dispatchConfig.phasedRegistrationNames[n];return f(e,r)}function r(e,t,r){var o=t?v.bubbled:v.captured,i=n(e,r,o);i&&(r._dispatchListeners=d(r._dispatchListeners,i),r._dispatchIDs=d(r._dispatchIDs,e))}function o(e){e&&e.dispatchConfig.phasedRegistrationNames&&m.InstanceHandle.traverseTwoPhase(e.dispatchMarker,r,e)}function i(e,t,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=f(e,r);o&&(n._dispatchListeners=d(n._dispatchListeners,o),n._dispatchIDs=d(n._dispatchIDs,e))}}function a(e){e&&e.dispatchConfig.registrationName&&i(e.dispatchMarker,null,e)}function s(e){h(e,o)}function u(e,t,n,r){m.InstanceHandle.traverseEnterLeave(n,r,i,e,t)}function l(e){h(e,a)}var c=e("./CallbackRegistry"),p=e("./EventConstants"),d=e("./accumulate"),h=e("./forEachAccumulated"),f=c.getListener,v=p.PropagationPhases,m={InstanceHandle:null,injectInstanceHandle:function(e){m.InstanceHandle=e},validate:function(){var e=!m.InstanceHandle||!m.InstanceHandle.traverseTwoPhase||!m.InstanceHandle.traverseEnterLeave;if(e)throw new Error("InstanceHandle not injected before use!")}},g={accumulateTwoPhaseDispatches:s,accumulateDirectDispatches:l,accumulateEnterLeaveDispatches:u,injection:m};t.exports=g},{"./CallbackRegistry":4,"./EventConstants":13,"./accumulate":61,"./forEachAccumulated":70}],19:[function(e,t){!function(){"use strict";var e="undefined"!=typeof window,n={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,isInWorker:!e,global:new Function("return this;")()};t.exports=n}()},{}],20:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./emptyFunction"),o=n.topLevelTypes,i={eventTypes:null,extractEvents:function(e,t,n,i){if(e===o.topTouchStart){var a=i.target;a&&!a.onclick&&(a.onclick=r)}}};t.exports=i},{"./EventConstants":13,"./emptyFunction":66}],21:[function(e,t){"use strict";var n=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},r=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},o=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},i=function(e,t,n,r,o){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,e,t,n,r,o),a}return new i(e,t,n,r,o)},a=function(e){var t=this;e.destructor&&e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},s=10,u=n,l=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||u,n.poolSize||(n.poolSize=s),n.release=a,n},c={addPoolingTo:l,oneArgumentPooler:n,twoArgumentPooler:r,threeArgumentPooler:o,fiveArgumentPooler:i};t.exports=c},{}],22:[function(e,t){"use strict";var n=e("./ReactCompositeComponent"),r=e("./ReactComponent"),o=e("./ReactDOM"),i=e("./ReactMount"),a=e("./ReactPropTypes"),s=e("./ReactServerRendering"),u=e("./ReactDefaultInjection");u.inject();var l={DOM:o,PropTypes:a,initializeTouchEvents:function(e){i.useTouchEvents=e},autoBind:n.autoBind,createClass:n.createClass,constructAndRenderComponent:i.constructAndRenderComponent,constructAndRenderComponentByID:i.constructAndRenderComponentByID,renderComponent:i.renderComponent,renderComponentToString:s.renderComponentToString,unmountAndReleaseReactRootNode:i.unmountAndReleaseReactRootNode,isValidComponent:r.isValidComponent};t.exports=l},{"./ReactComponent":23,"./ReactCompositeComponent":24,"./ReactDOM":26,"./ReactDefaultInjection":33,"./ReactMount":39,"./ReactPropTypes":45,"./ReactServerRendering":47}],23:[function(e,t){"use strict";var n=e("./getReactRootElementInContainer"),r=e("./ReactCurrentOwner"),o=e("./ReactDOMIDOperations"),i=e("./ReactMarkupChecksum"),a=e("./ReactMount"),s=e("./ReactOwner"),u=e("./ReactReconcileTransaction"),l=e("./ReactUpdates"),c=e("./invariant"),p=e("./keyMirror"),d=e("./merge"),h="{owner}",f=p({MOUNTED:null,UNMOUNTED:null}),v={isValidComponent:function(e){return!(!e||"function"!=typeof e.mountComponentIntoNode||"function"!=typeof e.receiveProps)},getKey:function(e,t){return e&&e.props&&null!=e.props.key?""+e.props.key:""+t},LifeCycle:f,DOMIDOperations:o,ReactReconcileTransaction:u,setDOMOperations:function(e){v.DOMIDOperations=e},setReactReconcileTransaction:function(e){v.ReactReconcileTransaction=e},Mixin:{isMounted:function(){return this._lifeCycleState===f.MOUNTED},getDOMNode:function(){return c(this.isMounted()),a.getNode(this._rootNodeID)},setProps:function(e,t){this.replaceProps(d(this._pendingProps||this.props,e),t)},replaceProps:function(e,t){c(!this.props[h]),this._pendingProps=e,l.enqueueUpdate(this,t)},construct:function(e,t){this.props=e||{},this.props[h]=r.current,this._lifeCycleState=f.UNMOUNTED,this._pendingProps=null,this._pendingCallbacks=null;var n=arguments.length-1;if(1===n)this.props.children=t;else if(n>1){for(var o=Array(n),i=0;n>i;i++)o[i]=arguments[i+1];this.props.children=o}},mountComponent:function(e){c(!this.isMounted());var t=this.props;null!=t.ref&&s.addComponentAsRefTo(this,t.ref,t[h]),this._rootNodeID=e,this._lifeCycleState=f.MOUNTED},unmountComponent:function(){c(this.isMounted());var e=this.props;null!=e.ref&&s.removeComponentAsRefFrom(this,e.ref,e[h]),a.purgeID(this._rootNodeID),this._rootNodeID=null,this._lifeCycleState=f.UNMOUNTED},receiveProps:function(e,t){c(this.isMounted()),this._pendingProps=e,this._performUpdateIfNecessary(t)},performUpdateIfNecessary:function(){var e=v.ReactReconcileTransaction.getPooled();e.perform(this._performUpdateIfNecessary,this,e),v.ReactReconcileTransaction.release(e)},_performUpdateIfNecessary:function(e){if(null!=this._pendingProps){var t=this.props;this.props=this._pendingProps,this._pendingProps=null,this.updateComponent(e,t)}},updateComponent:function(e,t){var n=this.props;(n[h]!==t[h]||n.ref!==t.ref)&&(null!=t.ref&&s.removeComponentAsRefFrom(this,t.ref,t[h]),null!=n.ref&&s.addComponentAsRefTo(this,n.ref,n[h]))},mountComponentIntoNode:function(e,t,n){var r=v.ReactReconcileTransaction.getPooled();r.perform(this._mountComponentIntoNode,this,e,t,r,n),v.ReactReconcileTransaction.release(r)},_mountComponentIntoNode:function(e,t,r,o){c(t&&1===t.nodeType);var a=this.mountComponent(e,r);if(!o||!i.canReuseMarkup(a,n(t))){var s=t.parentNode;if(s){var u=t.nextSibling;s.removeChild(t),t.innerHTML=a,u?s.insertBefore(t,u):s.appendChild(t)}else t.innerHTML=a}},unmountComponentFromNode:function(e){for(this.unmountComponent();e.lastChild;)e.removeChild(e.lastChild)},isOwnedBy:function(e){return this.props[h]===e},getSiblingByRef:function(e){var t=this.props[h];return t&&t.refs?t.refs[e]:null}}};t.exports=v},{"./ReactCurrentOwner":25,"./ReactDOMIDOperations":28,"./ReactMarkupChecksum":38,"./ReactMount":39,"./ReactOwner":43,"./ReactReconcileTransaction":46,"./ReactUpdates":49,"./getReactRootElementInContainer":73,"./invariant":78,"./keyMirror":81,"./merge":84}],24:[function(e,t){!function(){"use strict";function n(e,t){var n=m[t];C.hasOwnProperty(t)&&p(n===v.OVERRIDE_BASE),e.hasOwnProperty(t)&&p(n===v.DEFINE_MANY)}function r(e){var t=e._compositeLifeCycleState;p(e.isMounted()||t===y.MOUNTING),p(t!==y.RECEIVING_STATE&&t!==y.UNMOUNTING)}function o(e,t){var r=e.prototype;for(var o in t){var a=t[o];if(t.hasOwnProperty(o)&&a)if(n(r,o),g.hasOwnProperty(o))g[o](e,a);else{var s=o in m,u=o in r,l=a.__reactDontBind,c="function"==typeof a,p=c&&!s&&!u&&!l;p?(r.__reactAutoBindMap||(r.__reactAutoBindMap={}),r.__reactAutoBindMap[o]=a,r[o]=a):r[o]=u?i(r[o],a):a}}}function i(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}var a=e("./ReactComponent"),s=e("./ReactCurrentOwner"),u=e("./ReactOwner"),l=e("./ReactPropTransferer"),c=e("./ReactUpdates"),p=e("./invariant"),d=e("./keyMirror"),h=e("./merge"),f=e("./mixInto"),v=d({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null}),m={mixins:v.DEFINE_MANY,propTypes:v.DEFINE_ONCE,getDefaultProps:v.DEFINE_ONCE,getInitialState:v.DEFINE_ONCE,render:v.DEFINE_ONCE,componentWillMount:v.DEFINE_MANY,componentDidMount:v.DEFINE_MANY,componentWillReceiveProps:v.DEFINE_MANY,shouldComponentUpdate:v.DEFINE_ONCE,componentWillUpdate:v.DEFINE_MANY,componentDidUpdate:v.DEFINE_MANY,componentWillUnmount:v.DEFINE_MANY,updateComponent:v.OVERRIDE_BASE},g={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)o(e,t[n])},propTypes:function(e,t){e.propTypes=t}},y=d({MOUNTING:null,UNMOUNTING:null,RECEIVING_PROPS:null,RECEIVING_STATE:null}),C={construct:function(){a.Mixin.construct.apply(this,arguments),this.state=null,this._pendingState=null,this._compositeLifeCycleState=null},isMounted:function(){return a.Mixin.isMounted.call(this)&&this._compositeLifeCycleState!==y.MOUNTING},mountComponent:function(e,t){a.Mixin.mountComponent.call(this,e,t),this._compositeLifeCycleState=y.MOUNTING,this._defaultProps=this.getDefaultProps?this.getDefaultProps():null,this._processProps(this.props),this.__reactAutoBindMap&&this._bindAutoBindMethods(),this.state=this.getInitialState?this.getInitialState():null,this._pendingState=null,this._pendingForceUpdate=!1,this.componentWillMount&&(this.componentWillMount(),this._pendingState&&(this.state=this._pendingState,this._pendingState=null)),this._renderedComponent=this._renderValidatedComponent(),this._compositeLifeCycleState=null;var n=this._renderedComponent.mountComponent(e,t);return this.componentDidMount&&t.getReactOnDOMReady().enqueue(this,this.componentDidMount),n},unmountComponent:function(){this._compositeLifeCycleState=y.UNMOUNTING,this.componentWillUnmount&&this.componentWillUnmount(),this._compositeLifeCycleState=null,this._defaultProps=null,a.Mixin.unmountComponent.call(this),this._renderedComponent.unmountComponent(),this._renderedComponent=null,this.refs&&(this.refs=null)},setState:function(e,t){this.replaceState(h(this._pendingState||this.state,e),t)},replaceState:function(e,t){r(this),this._pendingState=e,c.enqueueUpdate(this,t)},_processProps:function(e){var t,n=this._defaultProps;for(t in n)t in e||(e[t]=n[t]);var r=this.constructor.propTypes;if(r){var o=this.constructor.displayName;for(t in r){var i=r[t];i&&i(e,t,o)}}},performUpdateIfNecessary:function(){var e=this._compositeLifeCycleState;e!==y.MOUNTING&&e!==y.RECEIVING_PROPS&&a.Mixin.performUpdateIfNecessary.call(this)},_performUpdateIfNecessary:function(e){if(null!=this._pendingProps||null!=this._pendingState||this._pendingForceUpdate){var t=this.props;null!=this._pendingProps&&(t=this._pendingProps,this._processProps(t),this._pendingProps=null,this._compositeLifeCycleState=y.RECEIVING_PROPS,this.componentWillReceiveProps&&this.componentWillReceiveProps(t,e)),this._compositeLifeCycleState=y.RECEIVING_STATE;var n=this._pendingState||this.state;this._pendingState=null,this._pendingForceUpdate||!this.shouldComponentUpdate||this.shouldComponentUpdate(t,n)?(this._pendingForceUpdate=!1,this._performComponentUpdate(t,n,e)):(this.props=t,this.state=n),this._compositeLifeCycleState=null}},_performComponentUpdate:function(e,t,n){var r=this.props,o=this.state;this.componentWillUpdate&&this.componentWillUpdate(e,t,n),this.props=e,this.state=t,this.updateComponent(n,r,o),this.componentDidUpdate&&n.getReactOnDOMReady().enqueue(this,this.componentDidUpdate.bind(this,r,o))},updateComponent:function(e,t){a.Mixin.updateComponent.call(this,e,t);var n=this._renderedComponent,r=this._renderValidatedComponent();if(n.constructor===r.constructor)n.receiveProps(r.props,e);else{var o=this._rootNodeID,i=n._rootNodeID;n.unmountComponent();var s=r.mountComponent(o,e);a.DOMIDOperations.dangerouslyReplaceNodeWithMarkupByID(i,s),this._renderedComponent=r}},forceUpdate:function(e){var t=this._compositeLifeCycleState;p(this.isMounted()||t===y.MOUNTING),p(t!==y.RECEIVING_STATE&&t!==y.UNMOUNTING),this._pendingForceUpdate=!0,c.enqueueUpdate(this,e)},_renderValidatedComponent:function(){var e;s.current=this;try{e=this.render()}catch(t){throw t}finally{s.current=null}return p(a.isValidComponent(e)),e},_bindAutoBindMethods:function(){for(var e in this.__reactAutoBindMap)if(this.__reactAutoBindMap.hasOwnProperty(e)){var t=this.__reactAutoBindMap[e];this[e]=this._bindAutoBindMethod(t)}},_bindAutoBindMethod:function(e){var t=this,n=function(){return e.apply(t,arguments)};return n}},E=function(){};f(E,a.Mixin),f(E,u.Mixin),f(E,l.Mixin),f(E,C);var M={LifeCycle:y,Base:E,createClass:function(e){var t=function(){};t.prototype=new E,t.prototype.constructor=t,o(t,e),p(t.prototype.render);for(var n in m)t.prototype[n]||(t.prototype[n]=null);var r=function(){var e=new t;return e.construct.apply(e,arguments),e};return r.componentConstructor=t,r.originalSpec=e,r},autoBind:function(e){return e}};t.exports=M}()},{"./ReactComponent":23,"./ReactCurrentOwner":25,"./ReactOwner":43,"./ReactPropTransferer":44,"./ReactUpdates":49,"./invariant":78,"./keyMirror":81,"./merge":84,"./mixInto":87}],25:[function(e,t){"use strict";var n={current:null};t.exports=n},{}],26:[function(e,t){"use strict";function n(e,t){var n=function(){};n.prototype=new r(e,t),n.prototype.constructor=n;var o=function(){var e=new n;return e.construct.apply(e,arguments),e};return o.componentConstructor=n,o}var r=e("./ReactNativeComponent"),o=e("./mergeInto"),i=e("./objMapKeyVal"),a=i({a:!1,abbr:!1,address:!1,area:!1,article:!1,aside:!1,audio:!1,b:!1,base:!1,bdi:!1,bdo:!1,big:!1,blockquote:!1,body:!1,br:!0,button:!1,canvas:!1,caption:!1,cite:!1,code:!1,col:!0,colgroup:!1,data:!1,datalist:!1,dd:!1,del:!1,details:!1,dfn:!1,div:!1,dl:!1,dt:!1,em:!1,embed:!0,fieldset:!1,figcaption:!1,figure:!1,footer:!1,form:!1,h1:!1,h2:!1,h3:!1,h4:!1,h5:!1,h6:!1,head:!1,header:!1,hr:!0,html:!1,i:!1,iframe:!1,img:!0,input:!0,ins:!1,kbd:!1,keygen:!0,label:!1,legend:!1,li:!1,link:!1,main:!1,map:!1,mark:!1,menu:!1,menuitem:!1,meta:!0,meter:!1,nav:!1,noscript:!1,object:!1,ol:!1,optgroup:!1,option:!1,output:!1,p:!1,param:!0,pre:!1,progress:!1,q:!1,rp:!1,rt:!1,ruby:!1,s:!1,samp:!1,script:!1,section:!1,select:!1,small:!1,source:!1,span:!1,strong:!1,style:!1,sub:!1,summary:!1,sup:!1,table:!1,tbody:!1,td:!1,textarea:!1,tfoot:!1,th:!1,thead:!1,time:!1,title:!1,tr:!1,track:!0,u:!1,ul:!1,"var":!1,video:!1,wbr:!1,circle:!1,g:!1,line:!1,path:!1,polyline:!1,rect:!1,svg:!1,text:!1},n),s={injectComponentClasses:function(e){o(a,e)}};a.injection=s,t.exports=a},{"./ReactNativeComponent":41,"./mergeInto":86,"./objMapKeyVal":88}],27:[function(e,t){"use strict";var n=e("./ReactCompositeComponent"),r=e("./ReactDOM"),o=e("./ReactEventEmitter"),i=e("./EventConstants"),a=r.form,s=n.createClass({render:function(){return this.transferPropsTo(a(null,this.props.children))},componentDidMount:function(e){o.trapBubbledEvent(i.topLevelTypes.topSubmit,"submit",e)}});t.exports=s},{"./EventConstants":13,"./ReactCompositeComponent":24,"./ReactDOM":26,"./ReactEventEmitter":34}],28:[function(e,t){!function(){"use strict";
var n=e("./CSSPropertyOperations"),r=e("./DOMChildrenOperations"),o=e("./DOMPropertyOperations"),i=e("./ReactMount"),a=e("./getTextContentAccessor"),s=e("./invariant"),u={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},l=a()||"NA",c={updatePropertyByID:function(e,t,n){var r=i.getNode(e);s(!u.hasOwnProperty(t)),null!=n?o.setValueForProperty(r,t,n):o.deleteValueForProperty(r,t)},deletePropertyByID:function(e,t,n){var r=i.getNode(e);s(!u.hasOwnProperty(t)),o.deleteValueForProperty(r,t,n)},updatePropertiesByID:function(e,t){for(var n in t)t.hasOwnProperty(n)&&c.updatePropertiesByID(e,n,t[n])},updateStylesByID:function(e,t){var r=i.getNode(e);n.setValueForStyles(r,t)},updateInnerHTMLByID:function(e,t){var n=i.getNode(e);n.innerHTML=(t&&t.__html||"").replace(/^ /g,"&nbsp;")},updateTextContentByID:function(e,t){var n=i.getNode(e);n[l]=t},dangerouslyReplaceNodeWithMarkupByID:function(e,t){var n=i.getNode(e);r.dangerouslyReplaceNodeWithMarkup(n,t)},manageChildrenByParentID:function(e,t){var n=i.getNode(e);r.manageChildren(n,t)}};t.exports=c}()},{"./CSSPropertyOperations":3,"./DOMChildrenOperations":6,"./DOMPropertyOperations":8,"./ReactMount":39,"./getTextContentAccessor":74,"./invariant":78}],29:[function(e,t){"use strict";var n=e("./DOMPropertyOperations"),r=e("./ReactCompositeComponent"),o=e("./ReactDOM"),i=e("./merge"),a=o.input,s=r.createClass({getInitialState:function(){return{checked:this.props.defaultChecked||!1,value:this.props.defaultValue||""}},shouldComponentUpdate:function(){return!this._isChanging},getChecked:function(){return null!=this.props.checked?this.props.checked:this.state.checked},getValue:function(){return null!=this.props.value?""+this.props.value:this.state.value},render:function(){var e=i(this.props);return e.checked=this.getChecked(),e.value=this.getValue(),e.onChange=this.handleChange,a(e,this.props.children)},componentDidUpdate:function(e,t,r){null!=this.props.checked&&n.setValueForProperty(r,"checked",this.props.checked||!1),null!=this.props.value&&n.setValueForProperty(r,"value",""+this.props.value||"")},handleChange:function(e){var t;return this.props.onChange&&(this._isChanging=!0,t=this.props.onChange(e),this._isChanging=!1),this.setState({checked:e.target.checked,value:e.target.value}),t}});t.exports=s},{"./DOMPropertyOperations":8,"./ReactCompositeComponent":24,"./ReactDOM":26,"./merge":84}],30:[function(e,t){"use strict";var n=e("./ReactCompositeComponent"),r=e("./ReactDOM"),o=r.option,i=n.createClass({componentWillMount:function(){null!=this.props.selected},render:function(){return o(this.props,this.props.children)}});t.exports=i},{"./ReactCompositeComponent":24,"./ReactDOM":26}],31:[function(e,t){"use strict";function n(e,t){null!=e[t]&&(e.multiple?a(Array.isArray(e[t])):a(!Array.isArray(e[t])))}function r(){if(null!=this.props.value)for(var e=this.getDOMNode().options,t=""+this.props.value,n=0,r=e.length;r>n;n++){var o=this.props.multiple?t.indexOf(e[n].value)>=0:o=e[n].value===t;o!==e[n].selected&&(e[n].selected=o)}}var o=e("./ReactCompositeComponent"),i=e("./ReactDOM"),a=e("./invariant"),s=e("./merge"),u=i.select,l=o.createClass({propTypes:{defaultValue:n,value:n},getInitialState:function(){return{value:this.props.defaultValue||(this.props.multiple?[]:"")}},componentWillReceiveProps:function(e){!this.props.multiple&&e.multiple?this.setState({value:[this.state.value]}):this.props.multiple&&!e.multiple&&this.setState({value:this.state.value[0]})},shouldComponentUpdate:function(){return!this._isChanging},render:function(){var e=s(this.props);return e.onChange=this.handleChange,e.value=null,u(e,this.props.children)},componentDidMount:r,componentDidUpdate:r,handleChange:function(e){var t;this.props.onChange&&(this._isChanging=!0,t=this.props.onChange(e),this._isChanging=!1);var n;if(this.props.multiple){n=[];for(var r=e.target.options,o=0,i=r.length;i>o;o++)r[o].selected&&n.push(r[o].value)}else n=e.target.value;return this.setState({value:n}),t}});t.exports=l},{"./ReactCompositeComponent":24,"./ReactDOM":26,"./invariant":78,"./merge":84}],32:[function(e,t){"use strict";var n=e("./DOMPropertyOperations"),r=e("./ReactCompositeComponent"),o=e("./ReactDOM"),i=e("./invariant"),a=e("./merge"),s=o.textarea,u={string:!0,number:!0},l=r.createClass({getInitialState:function(){var e=this.props.defaultValue,t=this.props.children;return null!=t&&(i(null==e),Array.isArray(t)&&(i(t.length<=1),t=t[0]),i(u[typeof t]),e=""+t),e=e||"",{initialValue:null!=this.props.value?this.props.value:e,value:e}},shouldComponentUpdate:function(){return!this._isChanging},getValue:function(){return null!=this.props.value?this.props.value:this.state.value},render:function(){var e=a(this.props);return i(null==e.dangerouslySetInnerHTML),e.value=this.getValue(),e.onChange=this.handleChange,s(e,this.state.initialValue)},componentDidUpdate:function(e,t,r){null!=this.props.value&&n.setValueForProperty(r,"value",this.props.value||"")},handleChange:function(e){var t;return this.props.onChange&&(this._isChanging=!0,t=this.props.onChange(e),this._isChanging=!1),this.setState({value:e.target.value}),t}});t.exports=l},{"./DOMPropertyOperations":8,"./ReactCompositeComponent":24,"./ReactDOM":26,"./invariant":78,"./merge":84}],33:[function(e,t){"use strict";function n(){l.TopLevelCallbackCreator=c,m.injection.injectEventPluginOrder(h),m.injection.injectInstanceHandle(g),m.injection.injectEventPluginsByName({SimpleEventPlugin:y,EnterLeaveEventPlugin:f,ChangeEventPlugin:v,MobileSafariClickEventPlugin:C}),r.injection.injectComponentClasses({form:o,input:i,option:a,select:s,textarea:u}),d.injection.injectDOMPropertyConfig(p)}var r=e("./ReactDOM"),o=e("./ReactDOMForm"),i=e("./ReactDOMInput"),a=e("./ReactDOMOption"),s=e("./ReactDOMSelect"),u=e("./ReactDOMTextarea"),l=e("./ReactEventEmitter"),c=e("./ReactEventTopLevelCallback"),p=e("./DefaultDOMPropertyConfig"),d=e("./DOMProperty"),h=e("./DefaultEventPluginOrder"),f=e("./EnterLeaveEventPlugin"),v=e("./ChangeEventPlugin"),m=e("./EventPluginHub"),g=e("./ReactInstanceHandles"),y=e("./SimpleEventPlugin"),C=e("./MobileSafariClickEventPlugin");t.exports={inject:n}},{"./ChangeEventPlugin":5,"./DOMProperty":7,"./DefaultDOMPropertyConfig":10,"./DefaultEventPluginOrder":11,"./EnterLeaveEventPlugin":12,"./EventPluginHub":15,"./MobileSafariClickEventPlugin":20,"./ReactDOM":26,"./ReactDOMForm":27,"./ReactDOMInput":29,"./ReactDOMOption":30,"./ReactDOMSelect":31,"./ReactDOMTextarea":32,"./ReactEventEmitter":34,"./ReactEventTopLevelCallback":35,"./ReactInstanceHandles":37,"./SimpleEventPlugin":50}],34:[function(e,t){!function(){"use strict";function n(e,t,n){s.listen(n,t,v.TopLevelCallbackCreator.createTopLevelCallback(e))}function r(e,t,n){s.capture(n,t,v.TopLevelCallbackCreator.createTopLevelCallback(e))}function o(){var e=p.refreshScrollValues;s.listen(window,"scroll",e),s.listen(window,"resize",e)}function i(e){d(!f);var t=a.topLevelTypes,i=document;o(),n(t.topMouseOver,"mouseover",i),n(t.topMouseDown,"mousedown",i),n(t.topMouseUp,"mouseup",i),n(t.topMouseMove,"mousemove",i),n(t.topMouseOut,"mouseout",i),n(t.topClick,"click",i),n(t.topDoubleClick,"dblclick",i),e&&(n(t.topTouchStart,"touchstart",i),n(t.topTouchEnd,"touchend",i),n(t.topTouchMove,"touchmove",i),n(t.topTouchCancel,"touchcancel",i)),n(t.topKeyUp,"keyup",i),n(t.topKeyPress,"keypress",i),n(t.topKeyDown,"keydown",i),n(t.topInput,"input",i),n(t.topChange,"change",i),n(t.topSelectionChange,"selectionchange",i),n(t.topDOMCharacterDataModified,"DOMCharacterDataModified",i),h("drag")&&(n(t.topDrag,"drag",i),n(t.topDragEnd,"dragend",i),n(t.topDragEnter,"dragenter",i),n(t.topDragExit,"dragexit",i),n(t.topDragLeave,"dragleave",i),n(t.topDragOver,"dragover",i),n(t.topDragStart,"dragstart",i),n(t.topDrop,"drop",i)),h("wheel")?n(t.topWheel,"wheel",i):h("mousewheel")?n(t.topWheel,"mousewheel",i):n(t.topWheel,"DOMMouseScroll",i),h("scroll",!0)?r(t.topScroll,"scroll",i):n(t.topScroll,"scroll",window),h("focus",!0)?(r(t.topFocus,"focus",i),r(t.topBlur,"blur",i)):h("focusin")&&(n(t.topFocus,"focusin",i),n(t.topBlur,"focusout",i))}var a=e("./EventConstants"),s=e("./EventListener"),u=e("./EventPluginHub"),l=e("./ExecutionEnvironment"),c=e("./ReactUpdates"),p=e("./ViewportMetrics"),d=e("./invariant"),h=e("./isEventSupported"),f=!1,v={TopLevelCallbackCreator:null,ensureListening:function(e){d(l.canUseDOM),d(v.TopLevelCallbackCreator),f||(i(e),f=!0)},setEnabled:function(e){d(l.canUseDOM),v.TopLevelCallbackCreator&&v.TopLevelCallbackCreator.setEnabled(e)},isEnabled:function(){return!(!v.TopLevelCallbackCreator||!v.TopLevelCallbackCreator.isEnabled())},handleTopLevel:function(e,t,n,r){var o=u.extractEvents(e,t,n,r);c.batchedUpdates(function(){u.enqueueEvents(o),u.processEventQueue()})},registrationNames:u.registrationNames,putListener:u.putListener,getListener:u.getListener,deleteListener:u.deleteListener,deleteAllListeners:u.deleteAllListeners,trapBubbledEvent:n,trapCapturedEvent:r};t.exports=v}()},{"./EventConstants":13,"./EventListener":14,"./EventPluginHub":15,"./ExecutionEnvironment":19,"./ReactUpdates":49,"./ViewportMetrics":60,"./invariant":78,"./isEventSupported":79}],35:[function(e,t){!function(){"use strict";var n=e("./ExecutionEnvironment"),r=e("./ReactEventEmitter"),o=e("./ReactMount"),i=e("./getEventTarget"),a=!0,s={setEnabled:function(e){a=!!e},isEnabled:function(){return a},createTopLevelCallback:function(e){return function(t){if(a){t.srcElement&&t.srcElement!==t.target&&(t.target=t.srcElement);var s=o.getFirstReactDOM(i(t))||n.global,u=o.getID(s)||"";r.handleTopLevel(e,s,u,t)}}}};t.exports=s}()},{"./ExecutionEnvironment":19,"./ReactEventEmitter":34,"./ReactMount":39,"./getEventTarget":72}],36:[function(e,t){"use strict";function n(){try{return document.activeElement}catch(e){}}function r(e){return document.documentElement.contains(e)}var o={hasSelectionCapabilities:function(e){return e&&("INPUT"===e.nodeName&&"text"===e.type||"TEXTAREA"===e.nodeName||"true"===e.contentEditable)},getSelectionInformation:function(){var e=n();return{focusedElem:e,selectionRange:o.hasSelectionCapabilities(e)?o.getSelection(e):null}},restoreSelection:function(e){var t=n(),i=e.focusedElem,a=e.selectionRange;t!==i&&r(i)&&(o.hasSelectionCapabilities(i)&&o.setSelection(i,a),i.focus())},getSelection:function(e){var t;if("true"===e.contentEditable&&window.getSelection){t=window.getSelection().getRangeAt(0);var n=t.commonAncestorContainer;return n&&3===n.nodeType&&(n=n.parentNode),n!==e?{start:0,end:0}:{start:t.startOffset,end:t.endOffset}}if(!document.selection)return{start:e.selectionStart,end:e.selectionEnd};if(t=document.selection.createRange(),t.parentElement()!==e)return{start:0,end:0};var r=e.value.length;if("INPUT"===e.nodeName)return{start:-t.moveStart("character",-r),end:-t.moveEnd("character",-r)};var o=t.duplicate();o.moveToElementText(e),o.setEndPoint("StartToEnd",t);var i=r-o.text.length;return o.setEndPoint("StartToStart",t),{start:r-o.text.length,end:i}},setSelection:function(e,t){var n,r=t.start,o=t.end;if("undefined"==typeof o&&(o=r),document.selection){if("TEXTAREA"===e.tagName){var i=(e.value.slice(0,r).match(/\r/g)||[]).length,a=(e.value.slice(r,o).match(/\r/g)||[]).length;r-=i,o-=i+a}n=e.createTextRange(),n.collapse(!0),n.moveStart("character",r),n.moveEnd("character",o-r),n.select()}else if("true"===e.contentEditable){if(1===e.childNodes.length){n=document.createRange(),n.setStart(e.childNodes[0],r),n.setEnd(e.childNodes[0],o);var s=window.getSelection();s.removeAllRanges(),s.addRange(n)}}else e.selectionStart=r,e.selectionEnd=Math.min(o,e.value.length),e.focus()}};t.exports=o},{}],37:[function(e,t){"use strict";function n(e){return p+"r["+e.toString(36)+"]"}function r(e,t){return e.charAt(t)===p||t===e.length}function o(e){return""===e||e.charAt(0)===p&&e.charAt(e.length-1)!==p}function i(e,t){return 0===t.indexOf(e)&&r(t,e.length)}function a(e){return e?e.substr(0,e.lastIndexOf(p)):""}function s(e,t){if(c(o(e)&&o(t)),c(i(e,t)),e===t)return e;for(var n=e.length+d,a=n;a<t.length&&!r(t,a);a++);return t.substr(0,a)}function u(e,t){var n=Math.min(e.length,t.length);if(0===n)return"";for(var i=0,a=0;n>=a;a++)if(r(e,a)&&r(t,a))i=a;else if(e.charAt(a)!==t.charAt(a))break;var s=e.substr(0,i);return c(o(s)),s}function l(e,t,n,r,o,u){e=e||"",t=t||"",c(e!==t);var l=i(t,e);c(l||i(e,t));for(var p=0,d=l?a:s,f=e;o&&f===e||u&&f===t||n(f,l,r),f!==t;f=d(f,t))c(p++<h)}var c=e("./invariant"),p=".",d=p.length,h=100,f=9999999,v={separator:p,createReactRootID:function(){return n(Math.ceil(Math.random()*f))},getReactRootIDFromNodeID:function(e){var t=/\.r\[[^\]]+\]/.exec(e);return t&&t[0]},traverseEnterLeave:function(e,t,n,r,o){var i=u(e,t);i!==e&&l(e,i,n,r,!1,!0),i!==t&&l(i,t,n,o,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(l("",e,t,n,!0,!1),l(e,"",t,n,!1,!0))},_getFirstCommonAncestorID:u,_getNextDescendantID:s,isAncestorIDOf:i,SEPARATOR:p};t.exports=v},{"./invariant":78}],38:[function(e,t){"use strict";var n=e("./adler32"),r={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=n(e);return e.replace(">"," "+r.CHECKSUM_ATTR_NAME+'="'+t+'">')},canReuseMarkup:function(e,t){var o=t.getAttribute(r.CHECKSUM_ATTR_NAME);o=o&&parseInt(o,10);var i=n(e);return i===o}};t.exports=r},{"./adler32":62}],39:[function(e,t){!function(){"use strict";function n(e){var t=p(e);return t&&E.getID(t)}function r(e){var t=o(e);if(t)if(m.hasOwnProperty(t)){var n=m[t];n!==e&&(c(!s(n,t)),m[t]=e)}else m[t]=e;return t}function o(e){return e&&e.getAttribute&&e.getAttribute(v)||""}function i(e,t){var n=o(e);n!==t&&delete m[n],e.setAttribute(v,t),m[t]=e}function a(e){return m.hasOwnProperty(e)&&s(m[e],e)||(m[e]=E.findReactNodeByID(e)),m[e]}function s(e,t){if(e){c(o(e)===t);var n=E.findReactContainerForID(t);if(n&&u(n,e))return!0}return!1}function u(e,t){if(e.contains)return e.contains(t);if(t===e)return!0;for(3===t.nodeType&&(t=t.parentNode);t&&1===t.nodeType;){if(t===e)return!0;t=t.parentNode}return!1}function l(e){delete m[e]}var c=e("./invariant"),p=e("./getReactRootElementInContainer"),d=e("./ReactEventEmitter"),h=e("./ReactInstanceHandles"),f=h.SEPARATOR,v="data-reactid",m={},g=e("./$"),y={},C={},E={totalInstantiationTime:0,totalInjectionTime:0,useTouchEvents:!1,scrollMonitor:function(e,t){t()},prepareTopLevelEvents:function(){d.ensureListening(E.useTouchEvents)},_updateRootComponent:function(e,t,n,r){var o=t.props;return E.scrollMonitor(n,function(){e.replaceProps(o,r)}),e},_registerComponent:function(e,t){E.prepareTopLevelEvents();var n=E.registerContainer(t);return y[n]=e,n},_renderNewRootComponent:function(e,t,n){var r=E._registerComponent(e,t);return e.mountComponentIntoNode(r,t,n),e},renderComponent:function(e,t,r){var o=y[n(t)];if(o){if(o.constructor===e.constructor)return E._updateRootComponent(o,e,t,r);E.unmountAndReleaseReactRootNode(t)}var i=p(t),a=i&&E.isRenderedByReact(i),s=a&&!o,u=E._renderNewRootComponent(e,t,s);return r&&r(),u},constructAndRenderComponent:function(e,t,n){return E.renderComponent(e(t),n)},constructAndRenderComponentByID:function(e,t,n){return E.constructAndRenderComponent(e,t,g(n))},registerContainer:function(e){var t=n(e);return t&&(t=h.getReactRootIDFromNodeID(t)),t||(t=h.createReactRootID()),C[t]=e,t},unmountAndReleaseReactRootNode:function(e){var t=n(e),r=y[t];return r?(r.unmountComponentFromNode(e),delete y[t],delete C[t],!0):!1},findReactContainerForID:function(e){var t=h.getReactRootIDFromNodeID(e),n=C[t];return n},findReactNodeByID:function(e){var t=E.findReactContainerForID(e);return E.findComponentRoot(t,e)},isRenderedByReact:function(e){if(1!==e.nodeType)return!1;var t=E.getID(e);return t?t.charAt(0)===f:!1},getFirstReactDOM:function(e){for(var t=e;t&&t.parentNode!==t;){if(E.isRenderedByReact(t))return t;t=t.parentNode}return null},findComponentRoot:function(e,t){for(var n=[e.firstChild],r=0;r<n.length;)for(var o=n[r++];o;){var i=E.getID(o);if(i){if(t===i)return o;if(h.isAncestorIDOf(i,t)){n.length=r=0,n.push(o.firstChild);break}n.push(o.firstChild)}else n.push(o.firstChild);o=o.nextSibling}c(!1)},ATTR_NAME:v,getID:r,setID:i,getNode:a,purgeID:l,injection:{}};t.exports=E}()},{"./$":1,"./ReactEventEmitter":34,"./ReactInstanceHandles":37,"./getReactRootElementInContainer":73,"./invariant":78}],40:[function(e,t){!function(){"use strict";function n(e,t){return e&&t&&e.constructor===t.constructor}var r=e("./ReactComponent"),o={enqueueMarkupAt:function(e,t){this.domOperations=this.domOperations||[],this.domOperations.push({insertMarkup:e,finalIndex:t})},enqueueMove:function(e,t){this.domOperations=this.domOperations||[],this.domOperations.push({moveFrom:e,finalIndex:t})},enqueueUnmountChildByName:function(e,t){r.isValidComponent(t)&&(this.domOperations=this.domOperations||[],this.domOperations.push({removeAt:t._domIndex}),t.unmountComponent&&t.unmountComponent(),delete this._renderedChildren[e])},processChildDOMOperationsQueue:function(){this.domOperations&&(r.DOMIDOperations.manageChildrenByParentID(this._rootNodeID,this.domOperations),this.domOperations=null)},unmountMultiChild:function(){var e=this._renderedChildren;for(var t in e)if(e.hasOwnProperty(t)&&e[t]){var n=e[t];n.unmountComponent&&n.unmountComponent()}this._renderedChildren=null},mountMultiChild:function(e,t){var n="",r=0;for(var o in e){var i=e[o];e.hasOwnProperty(o)&&i&&(n+=i.mountComponent(this._rootNodeID+"."+o,t),i._domIndex=r,r++)}return this._renderedChildren=e,this.domOperations=null,n},updateMultiChild:function(e,t){if(e||this._renderedChildren){e&&!this._renderedChildren?this._renderedChildren={}:!e&&this._renderedChildren&&(e={});var r=this._rootNodeID+".",o=null,i=0,a=0,s=0;for(var u in e)if(e.hasOwnProperty(u)){var l=this._renderedChildren[u],c=e[u];if(n(l,c))o&&(this.enqueueMarkupAt(o,a-i),o=null),i=0,l._domIndex<s&&this.enqueueMove(l._domIndex,a),s=Math.max(l._domIndex,s),l.receiveProps(c.props,t),l._domIndex=a;else if(l&&(this.enqueueUnmountChildByName(u,l),s=Math.max(l._domIndex,s)),c){this._renderedChildren[u]=c;var p=c.mountComponent(r+u,t);o=o?o+p:p,i++,c._domIndex=a}a=c?a+1:a}o&&this.enqueueMarkupAt(o,a-i);for(var d in this._renderedChildren)if(this._renderedChildren.hasOwnProperty(d)){var h=this._renderedChildren[d];h&&!e[d]&&this.enqueueUnmountChildByName(d,h)}this.processChildDOMOperationsQueue()}}},i={Mixin:o};t.exports=i}()},{"./ReactComponent":23}],41:[function(e,t){"use strict";function n(e){e&&(h(null==e.children||null==e.dangerouslySetInnerHTML),h(null==e.style||"object"==typeof e.style))}function r(e,t){this._tagOpen="<"+e,this._tagClose=t?"":"</"+e+">",this.tagName=e.toUpperCase()}var o=e("./CSSPropertyOperations"),i=e("./DOMProperty"),a=e("./DOMPropertyOperations"),s=e("./ReactComponent"),u=e("./ReactEventEmitter"),l=e("./ReactMultiChild"),c=e("./ReactMount"),p=e("./escapeTextForBrowser"),d=e("./flattenChildren"),h=e("./invariant"),f=e("./keyOf"),v=e("./merge"),m=e("./mixInto"),g=u.putListener,y=u.deleteListener,C=u.registrationNames,E={string:!0,number:!0},M=f({dangerouslySetInnerHTML:null}),D=f({style:null});r.Mixin={mountComponent:function(e,t){return s.Mixin.mountComponent.call(this,e,t),n(this.props),this._createOpenTagMarkup()+this._createContentMarkup(t)+this._tagClose},_createOpenTagMarkup:function(){var e=this.props,t=this._tagOpen;for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];if(null!=r)if(C[n])g(this._rootNodeID,n,r);else{n===D&&(r&&(r=e.style=v(e.style)),r=o.createMarkupForStyles(r));var i=a.createMarkupForProperty(n,r);i&&(t+=" "+i)}}var s=p(this._rootNodeID);return t+" "+c.ATTR_NAME+'="'+s+'">'},_createContentMarkup:function(e){var t=this.props.dangerouslySetInnerHTML;if(null!=t){if(null!=t.__html)return t.__html}else{var n=E[typeof this.props.children]?this.props.children:null,r=null!=n?null:this.props.children;if(null!=n)return p(n);if(null!=r)return this.mountMultiChild(d(r),e)}return""},receiveProps:function(e,t){n(e),s.Mixin.receiveProps.call(this,e,t)},updateComponent:function(e,t){s.Mixin.updateComponent.call(this,e,t),this._updateDOMProperties(t),this._updateDOMChildren(t,e)},_updateDOMProperties:function(e){var t,n,r,o=this.props;for(t in e)if(!o.hasOwnProperty(t)&&e.hasOwnProperty(t))if(t===D){var a=e[t];for(n in a)a.hasOwnProperty(n)&&(r=r||{},r[n]="")}else t===M?s.DOMIDOperations.updateTextContentByID(this._rootNodeID,""):C[t]?y(this._rootNodeID,t):s.DOMIDOperations.deletePropertyByID(this._rootNodeID,t);for(t in o){var u=o[t],l=e[t];if(o.hasOwnProperty(t)&&u!==l)if(t===D)if(u&&(u=o.style=v(u)),l){for(n in l)l.hasOwnProperty(n)&&!u.hasOwnProperty(n)&&(r=r||{},r[n]="");for(n in u)u.hasOwnProperty(n)&&l[n]!==u[n]&&(r=r||{},r[n]=u[n])}else r=u;else if(t===M){var c=l&&l.__html,p=u&&u.__html;c!==p&&s.DOMIDOperations.updateInnerHTMLByID(this._rootNodeID,u)}else C[t]?g(this._rootNodeID,t,u):(i.isStandardName[t]||i.isCustomAttribute(t))&&s.DOMIDOperations.updatePropertyByID(this._rootNodeID,t,u)}r&&s.DOMIDOperations.updateStylesByID(this._rootNodeID,r)},_updateDOMChildren:function(e,t){var n=this.props,r=E[typeof e.children]?e.children:null,o=E[typeof n.children]?n.children:null,i=null!=r?null:e.children,a=null!=o?null:n.children;if(null!=o){var u=null!=i&&null==a;u&&this.updateMultiChild(null,t),r!==o&&s.DOMIDOperations.updateTextContentByID(this._rootNodeID,""+o)}else{var l=null!=r&&null==o;l&&s.DOMIDOperations.updateTextContentByID(this._rootNodeID,""),this.updateMultiChild(d(n.children),t)}},unmountComponent:function(){u.deleteAllListeners(this._rootNodeID),s.Mixin.unmountComponent.call(this),this.unmountMultiChild()}},m(r,s.Mixin),m(r,r.Mixin),m(r,l.Mixin),t.exports=r},{"./CSSPropertyOperations":3,"./DOMProperty":7,"./DOMPropertyOperations":8,"./ReactComponent":23,"./ReactEventEmitter":34,"./ReactMount":39,"./ReactMultiChild":40,"./escapeTextForBrowser":67,"./flattenChildren":69,"./invariant":78,"./keyOf":82,"./merge":84,"./mixInto":87}],42:[function(e,t){"use strict";function n(e){this._queue=e||null}var r=e("./PooledClass"),o=e("./mixInto");o(n,{enqueue:function(e,t){this._queue=this._queue||[],this._queue.push({component:e,callback:t})},notifyAll:function(){var e=this._queue;if(e){this._queue=null;for(var t=0,n=e.length;n>t;t++){var r=e[t].component,o=e[t].callback;o.call(r,r.getDOMNode())}e.length=0}},reset:function(){this._queue=null},destructor:function(){this.reset()}}),r.addPoolingTo(n),t.exports=n},{"./PooledClass":21,"./mixInto":87}],43:[function(e,t){"use strict";var n=e("./invariant"),r={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,o){n(r.isValidOwner(o)),o.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,o){n(r.isValidOwner(o)),o.refs[t]===e&&o.detachRef(t)},Mixin:{attachRef:function(e,t){n(t.isOwnedBy(this));var r=this.refs||(this.refs={});r[e]=t},detachRef:function(e){delete this.refs[e]}}};t.exports=r},{"./invariant":78}],44:[function(e,t){"use strict";function n(e){return function(t,n,r){t[n]=t.hasOwnProperty(n)?e(t[n],r):r}}var r=e("./emptyFunction"),o=e("./joinClasses"),i=e("./merge"),a={children:r,className:n(o),ref:r,style:n(i)},s={TransferStrategies:a,Mixin:{transferPropsTo:function(e){var t={};for(var n in e.props)e.props.hasOwnProperty(n)&&(t[n]=e.props[n]);for(var r in this.props)if(this.props.hasOwnProperty(r)){var o=a[r];o?o(t,r,this.props[r]):t.hasOwnProperty(r)||(t[r]=this.props[r])}return e.props=t,e}}};t.exports=s},{"./emptyFunction":66,"./joinClasses":80,"./merge":84}],45:[function(e,t){"use strict";function n(e){function t(t){var n=typeof t;"object"===n&&Array.isArray(t)&&(n="array"),s(n===e)}return i(t)}function r(e){function t(e){s(n[e])}var n=a(e);return i(t)}function o(e){function t(t){s(t instanceof e)}return i(t)}function i(e){function t(n){function r(t,r,o){var i=t[r];null!=i?e(i,r,o||l):s(!n)}return n||(r.isRequired=t(!0)),r}return t(!1)}var a=e("./createObjectFrom"),s=e("./invariant"),u={array:n("array"),bool:n("boolean"),func:n("function"),number:n("number"),object:n("object"),string:n("string"),oneOf:r,instanceOf:o},l="<<anonymous>>";t.exports=u},{"./createObjectFrom":64,"./invariant":78}],46:[function(e,t){"use strict";function n(){this.reinitializeTransaction(),this.reactOnDOMReady=s.getPooled(null)}var r=e("./ExecutionEnvironment"),o=e("./PooledClass"),i=e("./ReactEventEmitter"),a=e("./ReactInputSelection"),s=e("./ReactOnDOMReady"),u=e("./Transaction"),l=e("./mixInto"),c={initialize:a.getSelectionInformation,close:a.restoreSelection},p={initialize:function(){var e=i.isEnabled();return i.setEnabled(!1),e},close:function(e){i.setEnabled(e)}},d={initialize:function(){this.reactOnDOMReady.reset()},close:function(){this.reactOnDOMReady.notifyAll()}},h=[c,p,d],f={getTransactionWrappers:function(){return r.canUseDOM?h:[]},getReactOnDOMReady:function(){return this.reactOnDOMReady},destructor:function(){s.release(this.reactOnDOMReady),this.reactOnDOMReady=null}};l(n,u.Mixin),l(n,f),o.addPoolingTo(n),t.exports=n},{"./ExecutionEnvironment":19,"./PooledClass":21,"./ReactEventEmitter":34,"./ReactInputSelection":36,"./ReactOnDOMReady":42,"./Transaction":59,"./mixInto":87}],47:[function(e,t){"use strict";function n(e,t){var n=i.createReactRootID(),a=o.getPooled();a.reinitializeTransaction();try{a.perform(function(){var o=e.mountComponent(n,a);o=r.addChecksumToMarkup(o),t(o)},null)}finally{o.release(a)}}var r=e("./ReactMarkupChecksum"),o=e("./ReactReconcileTransaction"),i=e("./ReactInstanceHandles");t.exports={renderComponentToString:n}},{"./ReactInstanceHandles":37,"./ReactMarkupChecksum":38,"./ReactReconcileTransaction":46}],48:[function(e,t){"use strict";var n=e("./ReactComponent"),r=e("./ReactMount"),o=e("./escapeTextForBrowser"),i=e("./mixInto"),a=function(e){this.construct({text:e})};i(a,n.Mixin),i(a,{mountComponent:function(e){return n.Mixin.mountComponent.call(this,e),"<span "+r.ATTR_NAME+'="'+e+'">'+o(this.props.text)+"</span>"},receiveProps:function(e){e.text!==this.props.text&&(this.props.text=e.text,n.DOMIDOperations.updateTextContentByID(this._rootNodeID,e.text))}}),t.exports=a},{"./ReactComponent":23,"./ReactMount":39,"./escapeTextForBrowser":67,"./mixInto":87}],49:[function(e,t){"use strict";function n(e){if(i)return e(),void 0;i=!0;try{e();for(var t=0;t<a.length;t++){var n=a[t];if(n.isMounted()){var r=n._pendingCallbacks;if(n._pendingCallbacks=null,n.performUpdateIfNecessary(),r)for(var o=0;o<r.length;o++)r[o].call(n)}}}catch(s){throw s}finally{a.length=0,i=!1}}function r(e,t){return o(!t||"function"==typeof t),i?(a.push(e),t&&(e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t]),void 0):(e.performUpdateIfNecessary(),t&&t(),void 0)}var o=e("./invariant"),i=!1,a=[],s={batchedUpdates:n,enqueueUpdate:r};t.exports=s},{"./invariant":78}],50:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./EventPropagators"),o=e("./SyntheticEvent"),i=e("./SyntheticFocusEvent"),a=e("./SyntheticKeyboardEvent"),s=e("./SyntheticMouseEvent"),u=e("./SyntheticMutationEvent"),l=e("./SyntheticTouchEvent"),c=e("./SyntheticUIEvent"),p=e("./SyntheticWheelEvent"),d=e("./invariant"),h=e("./keyOf"),f=n.topLevelTypes,v={blur:{phasedRegistrationNames:{bubbled:h({onBlur:!0}),captured:h({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:h({onClick:!0}),captured:h({onClickCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:h({onDoubleClick:!0}),captured:h({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:h({onDrag:!0}),captured:h({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:h({onDragEnd:!0}),captured:h({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:h({onDragEnter:!0}),captured:h({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:h({onDragExit:!0}),captured:h({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:h({onDragLeave:!0}),captured:h({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:h({onDragOver:!0}),captured:h({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:h({onDragStart:!0}),captured:h({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:h({onDrop:!0}),captured:h({onDropCapture:!0})}},DOMCharacterDataModified:{phasedRegistrationNames:{bubbled:h({onDOMCharacterDataModified:!0}),captured:h({onDOMCharacterDataModifiedCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:h({onFocus:!0}),captured:h({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:h({onInput:!0}),captured:h({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:h({onKeyDown:!0}),captured:h({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:h({onKeyPress:!0}),captured:h({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:h({onKeyUp:!0}),captured:h({onKeyUpCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:h({onMouseDown:!0}),captured:h({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:h({onMouseMove:!0}),captured:h({onMouseMoveCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:h({onMouseUp:!0}),captured:h({onMouseUpCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:h({onScroll:!0}),captured:h({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:h({onSubmit:!0}),captured:h({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:h({onTouchCancel:!0}),captured:h({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:h({onTouchEnd:!0}),captured:h({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:h({onTouchMove:!0}),captured:h({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:h({onTouchStart:!0}),captured:h({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:h({onWheel:!0}),captured:h({onWheelCapture:!0})}}},m={topBlur:v.blur,topClick:v.click,topDoubleClick:v.doubleClick,topDOMCharacterDataModified:v.DOMCharacterDataModified,topDrag:v.drag,topDragEnd:v.dragEnd,topDragEnter:v.dragEnter,topDragExit:v.dragExit,topDragLeave:v.dragLeave,topDragOver:v.dragOver,topDragStart:v.dragStart,topDrop:v.drop,topFocus:v.focus,topInput:v.input,topKeyDown:v.keyDown,topKeyPress:v.keyPress,topKeyUp:v.keyUp,topMouseDown:v.mouseDown,topMouseMove:v.mouseMove,topMouseUp:v.mouseUp,topScroll:v.scroll,topSubmit:v.submit,topTouchCancel:v.touchCancel,topTouchEnd:v.touchEnd,topTouchMove:v.touchMove,topTouchStart:v.touchStart,topWheel:v.wheel},g={eventTypes:v,executeDispatch:function(e,t,n){var r=t(e,n);r===!1&&(e.stopPropagation(),e.preventDefault())},extractEvents:function(e,t,n,h){var v=m[e];if(!v)return null;var g;switch(e){case f.topInput:case f.topSubmit:g=o;break;case f.topKeyDown:case f.topKeyPress:case f.topKeyUp:g=a;break;case f.topBlur:case f.topFocus:g=i;break;case f.topClick:case f.topDoubleClick:case f.topDrag:case f.topDragEnd:case f.topDragEnter:case f.topDragExit:case f.topDragLeave:case f.topDragOver:case f.topDragStart:case f.topDrop:case f.topMouseDown:case f.topMouseMove:case f.topMouseUp:g=s;break;case f.topDOMCharacterDataModified:g=u;break;case f.topTouchCancel:case f.topTouchEnd:case f.topTouchMove:case f.topTouchStart:g=l;break;case f.topScroll:g=c;break;case f.topWheel:g=p}d(g);var y=g.getPooled(v,n,h);return r.accumulateTwoPhaseDispatches(y),y}};t.exports=g},{"./EventConstants":13,"./EventPropagators":18,"./SyntheticEvent":51,"./SyntheticFocusEvent":52,"./SyntheticKeyboardEvent":53,"./SyntheticMouseEvent":54,"./SyntheticMutationEvent":55,"./SyntheticTouchEvent":56,"./SyntheticUIEvent":57,"./SyntheticWheelEvent":58,"./invariant":78,"./keyOf":82}],51:[function(e,t){"use strict";function n(e,t,n){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n;var r=this.constructor.Interface;for(var i in r)if(r.hasOwnProperty(i)){var a=r[i];this[i]=a?a(n):n[i]}this.isDefaultPrevented=n.defaultPrevented||n.returnValue===!1?o.thatReturnsTrue:o.thatReturnsFalse,this.isPropagationStopped=o.thatReturnsFalse}var r=e("./PooledClass"),o=e("./emptyFunction"),i=e("./getEventTarget"),a=e("./merge"),s=e("./mergeInto"),u={type:null,target:i,currentTarget:null,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()
},defaultPrevented:null,isTrusted:null};s(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=o.thatReturnsTrue},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=o.thatReturnsTrue},persist:function(){this.isPersistent=o.thatReturnsTrue},isPersistent:o.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),n.Interface=u,n.augmentClass=function(e,t){var n=this,o=Object.create(n.prototype);s(o,e.prototype),e.prototype=o,e.prototype.constructor=e,e.Interface=a(n.Interface,t),e.augmentClass=n.augmentClass,r.addPoolingTo(e,r.threeArgumentPooler)},r.addPoolingTo(n,r.threeArgumentPooler),t.exports=n},{"./PooledClass":21,"./emptyFunction":66,"./getEventTarget":72,"./merge":84,"./mergeInto":86}],52:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o={relatedTarget:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticUIEvent":57}],53:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o={"char":null,key:null,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,charCode:null,keyCode:null,which:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticUIEvent":57}],54:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o=e("./ViewportMetrics"),i={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+o.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+o.currentScrollTop}};r.augmentClass(n,i),t.exports=n},{"./SyntheticUIEvent":57,"./ViewportMetrics":60}],55:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={relatedNode:null,prevValue:null,newValue:null,attrName:null,attrChange:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":51}],56:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticUIEvent":57}],57:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={view:null,detail:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":51}],58:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticMouseEvent"),o={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?-e.deltaY:"wheelDeltaY"in e?e.wheelDeltaY:"wheelDelta"in e?e.wheelData:0},deltaZ:null,deltaMode:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticMouseEvent":54}],59:[function(e,t){!function(){"use strict";var n=e("./invariant"),r={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this.timingMetrics||(this.timingMetrics={}),this.timingMetrics.methodInvocationTime=0,this.timingMetrics.wrapperInitTimes?this.timingMetrics.wrapperInitTimes.length=0:this.timingMetrics.wrapperInitTimes=[],this.timingMetrics.wrapperCloseTimes?this.timingMetrics.wrapperCloseTimes.length=0:this.timingMetrics.wrapperCloseTimes=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,r,o,i,a,s,u){n(!this.isInTransaction());var l,c=Date.now(),p=null;try{this.initializeAll(),l=e.call(t,r,o,i,a,s,u)}catch(d){p=d}finally{var h=Date.now();this.methodInvocationTime+=h-c;try{this.closeAll()}catch(f){p=p||f}}if(p)throw p;return l},initializeAll:function(){this._isInTransaction=!0;for(var e=this.transactionWrappers,t=this.timingMetrics.wrapperInitTimes,n=null,r=0;r<e.length;r++){var i=Date.now(),a=e[r];try{this.wrapperInitData[r]=a.initialize?a.initialize.call(this):null}catch(s){n=n||s,this.wrapperInitData[r]=o.OBSERVED_ERROR}finally{var u=t[r],l=Date.now();t[r]=(u||0)+(l-i)}}if(n)throw n},closeAll:function(){n(this.isInTransaction());for(var e=this.transactionWrappers,t=this.timingMetrics.wrapperCloseTimes,r=null,i=0;i<e.length;i++){var a=e[i],s=Date.now(),u=this.wrapperInitData[i];try{u!==o.OBSERVED_ERROR&&a.close&&a.close.call(this,u)}catch(l){r=r||l}finally{var c=Date.now(),p=t[i];t[i]=(p||0)+(c-s)}}if(this.wrapperInitData.length=0,this._isInTransaction=!1,r)throw r}},o={Mixin:r,OBSERVED_ERROR:{}};t.exports=o}()},{"./invariant":78}],60:[function(e,t){"use strict";var n={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(){n.currentScrollLeft=document.body.scrollLeft+document.documentElement.scrollLeft,n.currentScrollTop=document.body.scrollTop+document.documentElement.scrollTop}};t.exports=n},{}],61:[function(e,t){"use strict";function n(e,t){if(r(null!=t),null==e)return t;var n=Array.isArray(e),o=Array.isArray(t);return n?e.concat(t):o?[e].concat(t):[e,t]}var r=e("./invariant");t.exports=n},{"./invariant":78}],62:[function(e,t){"use strict";function n(e){for(var t=1,n=0,o=0;o<e.length;o++)t=(t+e.charCodeAt(o))%r,n=(n+t)%r;return t|n<<16}var r=65521;t.exports=n},{}],63:[function(e,t){function n(e,t,n,r,o,i){e=e||{};for(var a,s=[t,n,r,o,i],u=0;s[u];){a=s[u++];for(var l in a)e[l]=a[l];a.hasOwnProperty&&a.hasOwnProperty("toString")&&"undefined"!=typeof a.toString&&e.toString!==a.toString&&(e.toString=a.toString)}return e}t.exports=n},{}],64:[function(e,t){function n(e,t){var n={},o=r(t);"undefined"==typeof t&&(t=!0);for(var i=e.length;i--;)n[e[i]]=o?t[i]:t;return n}var r=e("./hasArrayNature");t.exports=n},{"./hasArrayNature":75}],65:[function(e,t){"use strict";function n(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var o=isNaN(t);return o||0===t||r.isUnitlessNumber[e]?""+t:t+"px"}var r=e("./CSSProperty");t.exports=n},{"./CSSProperty":2}],66:[function(e,t){function n(e){return function(){return e}}function r(){}var o=e("./copyProperties");o(r,{thatReturns:n,thatReturnsFalse:n(!1),thatReturnsTrue:n(!0),thatReturnsNull:n(null),thatReturnsThis:function(){return this},thatReturnsArgument:function(e){return e}}),t.exports=r},{"./copyProperties":63}],67:[function(e,t){"use strict";function n(e){return i[e]}function r(e){var t=typeof e;return o("object"!==t),""===e?"":"string"===t?e.replace(/[&><"'\/]/g,n):(""+e).replace(/[&><"'\/]/g,n)}var o=e("./invariant"),i={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;","/":"&#x2f;"};t.exports=r},{"./invariant":78}],68:[function(e,t){var n=function(e){var t=Array.prototype.slice.call(arguments).map(function(e){return String(e)}),r=e.split("%s").length-1;return r!==t.length-1?n("ex args number mismatch: %s",JSON.stringify(t)):n._prefix+JSON.stringify(t)+n._suffix};n._prefix="<![EX[",n._suffix="]]>",t.exports=n},{}],69:[function(e,t){"use strict";function n(e,t,n){var r=e;o(!r.hasOwnProperty(n)),r[n]=t}function r(e){if(null==e)return e;var t={};return i(e,n,t),t}var o=e("./invariant"),i=e("./traverseAllChildren");t.exports=r},{"./invariant":78,"./traverseAllChildren":90}],70:[function(e,t){"use strict";var n=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=n},{}],71:[function(e,t){function n(e,t,n){return"string"!=typeof e?e:t?r(e,t,n):document.getElementById(e)}function r(e,t,n){var i,a,s;if(o(t)==e)return t;if(t.getElementsByTagName){for(a=t.getElementsByTagName(n||"*"),s=0;s<a.length;s++)if(o(a[s])==e)return a[s]}else for(a=t.childNodes,s=0;s<a.length;s++)if(i=r(e,a[s]))return i;return null}function o(e){var t=e.getAttributeNode&&e.getAttributeNode("id");return t?t.value:null}t.exports=n},{}],72:[function(e,t){!function(){"use strict";function n(e){var t=e.target||e.srcElement||r.global;return 3===t.nodeType?t.parentNode:t}var r=e("./ExecutionEnvironment");t.exports=n}()},{"./ExecutionEnvironment":19}],73:[function(e,t){"use strict";function n(e){return e&&e.firstChild}t.exports=n},{}],74:[function(e,t){"use strict";function n(){return!o&&r.canUseDOM&&(o="innerText"in document.createElement("div")?"innerText":"textContent"),o}var r=e("./ExecutionEnvironment"),o=null;t.exports=n},{"./ExecutionEnvironment":19}],75:[function(e,t){function n(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}t.exports=n},{}],76:[function(e,t){function n(e){return e.replace(r,"-$1").toLowerCase()}var r=/([A-Z])/g;t.exports=n},{}],77:[function(e,t){"use strict";function n(e,t,n){var r=e.childNodes,o=e.childNodes[n];return o===t?t:(t.parentNode&&t.parentNode.removeChild(t),n>=r.length?e.appendChild(t):e.insertBefore(t,r[n]),t)}t.exports=n},{}],78:[function(e,t){function n(e){if(!e)throw new Error("Invariant Violation")}t.exports=n},{}],79:[function(e,t){"use strict";function n(e,t){if(!r||t&&!r.addEventListener)return!1;var n=document.createElement("div"),i="on"+e,a=i in n;return a||(n.setAttribute(i,""),a="function"==typeof n[i],"undefined"!=typeof n[i]&&(n[i]=void 0),n.removeAttribute(i)),!a&&o&&"wheel"===e&&(a=document.implementation.hasFeature("Events.wheel","3.0")),n=null,a}var r,o,i=e("./ExecutionEnvironment");i.canUseDOM&&(r=document.createElement("div"),o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=n},{"./ExecutionEnvironment":19}],80:[function(e,t){"use strict";function n(e){e||(e="");var t,n=arguments.length;if(n>1)for(var r=1;n>r;r++)t=arguments[r],t&&(e+=" "+t);return e}t.exports=n},{}],81:[function(e,t){"use strict";var n=e("./invariant"),r=function(e){var t,r={};n(e instanceof Object&&!Array.isArray(e));for(t in e)e.hasOwnProperty(t)&&(r[t]=t);return r};t.exports=r},{"./invariant":78}],82:[function(e,t){var n=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=n},{}],83:[function(e,t){"use strict";function n(e){var t={};return function(n){return t.hasOwnProperty(n)?t[n]:t[n]=e.call(this,n)}}t.exports=n},{}],84:[function(e,t){"use strict";var n=e("./mergeInto"),r=function(e,t){var r={};return n(r,e),n(r,t),r};t.exports=r},{"./mergeInto":86}],85:[function(e,t){"use strict";var n=e("./invariant"),r=e("./keyMirror"),o=36,i=function(e){return"object"!=typeof e||null===e},a={MAX_MERGE_DEPTH:o,isTerminal:i,normalizeMergeArg:function(e){return void 0===e||null===e?{}:e},checkMergeArrayArgs:function(e,t){n(Array.isArray(e)&&Array.isArray(t))},checkMergeObjectArgs:function(e,t){a.checkMergeObjectArg(e),a.checkMergeObjectArg(t)},checkMergeObjectArg:function(e){n(!i(e)&&!Array.isArray(e))},checkMergeLevel:function(e){n(o>e)},checkArrayStrategy:function(e){n(void 0===e||e in a.ArrayStrategies)},ArrayStrategies:r({Clobber:!0,IndexByIndex:!0})};t.exports=a},{"./invariant":78,"./keyMirror":81}],86:[function(e,t){"use strict";function n(e,t){if(o(e),null!=t){o(t);for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}}var r=e("./mergeHelpers"),o=r.checkMergeObjectArg;t.exports=n},{"./mergeHelpers":85}],87:[function(e,t){"use strict";var n=function(e,t){var n;for(n in t)t.hasOwnProperty(n)&&(e.prototype[n]=t[n])};t.exports=n},{}],88:[function(e,t){"use strict";function n(e,t,n){if(!e)return null;var r=0,o={};for(var i in e)e.hasOwnProperty(i)&&(o[i]=t.call(n,i,e[i],r++));return o}t.exports=n},{}],89:[function(e,t){"use strict";var n=function(e,t){if(e)throw new Error(t)};t.exports=n},{}],90:[function(e,t){!function(){"use strict";function n(e,t,n){null!==e&&void 0!==e&&a(e,"",0,t,n)}var r=e("./ReactComponent"),o=e("./ReactTextComponent"),i=e("./invariant"),a=function(e,t,n,s,u){var l=0;if(Array.isArray(e))for(var c=0;c<e.length;c++){var p=e[c],d=t+"["+r.getKey(p,c)+"]",h=n+l;l+=a(p,d,h,s,u)}else{var f=typeof e,v=""===t,m=v?"["+r.getKey(e,0)+"]":t;if(null===e||void 0===e||"boolean"===f)s(u,null,m,n),l=1;else if(e.mountComponentIntoNode)s(u,e,m,n),l=1;else if("object"===f){i(e||1!==e.nodeType);for(var g in e)e.hasOwnProperty(g)&&(l+=a(e[g],t+"{"+g+"}",n+l,s,u))}else if("string"===f){var y=new o(e);s(u,y,m,n),l+=1}else if("number"===f){var C=new o(""+e);s(u,C,m,n),l+=1}}return l};t.exports=n}()},{"./ReactComponent":23,"./ReactTextComponent":48,"./invariant":78}]},{},[22])(22)});
define('editor/FacebookShareEditor',[
  'react',
  'mixins/BackboneModal',
],
function(React) {

    var FacebookShareEditor = Backbone.ModalView.extend({
        className : 'modal image-slider-editor',
        width  : 600,
        height: 400,
        padding: 0,
        title: 'Facebook Share Editor',
        doneButton: true,

        initialize: function(widgetModel){
          _.bindAll(this);
          this.model = widgetModel;
          this.render();
        },

        render: function() {
            var model = this.model;
            var Component = React.createClass({

                getInitialState: function() {
                    return { hasLink: model.get('data').get('container_info').has('pageLink'),
                             link: (model.get('data').get('container_info').get('pageLink')||"")};
                },

                handleChange: function(event) {
                    this.setState({hasLink: true});
                    this.setState({link: event.target.value});
                    model.get('data').get('container_info').set('pageLink', event.target.value);
                },

                unsetLink: function() {
                    this.setState({hasLink: false});
                    model.get('data').get('container_info').unset('pageLink');
                },

                setLink: function() {
                    this.setState({hasLink: true});
                    model.get('data').get('container_info').set('pageLink', this.state.link);
                },

                render: function() {
                    return React.DOM.div({
                        className: "facebook-share-editor padding1",
                        children:[
                            React.DOM.div({children:"Please add the link of your Facebook Page if you would like to connect it to the Facebook button.", className:"full-width"}),
                            React.DOM.ul({className:"no-bullets", children: [
                                React.DOM.li({className: "full-width", children:[
                                    React.DOM.input({type: "radio", checked: this.state.hasLink, onChange: this.setLink}),
                                    React.DOM.input({type: "text", value: this.state.link, onChange: this.handleChange, onFocus: this.setLink, className:"span24", placeholder: "Copy Paste the link here..."})
                                ]}),
                                React.DOM.li({className: "full-width", children:[
                                    React.DOM.input({type: "radio", checked: !this.state.hasLink, onChange: this.unsetLink}),
                                ]}),
                            ]})
                        ]
                    });
                }
            });

            React.renderComponent(Component({}), this.el);

            return this;
        }
    });

  return FacebookShareEditor;
});

define('editor/VideoEmbedEditor',[
  'react',
  'mixins/BackboneModal',
],
function(React) {

  var VideoEmbedEditor = Backbone.ModalView.extend({
    className : 'modal image-slider-editor',
    width  : 600,
    height: 400,
    padding: 0,
    title: 'Vide Embed Editor',
    doneButton: true,

    events : {

    },

    initialize: function(widgetModel){
        _.bindAll(this);
        this.model = widgetModel;
        this.render();
    },

    render: function() {
        var model = this.model;

        var URLInput = React.createClass({

            getInitialState: function() {
                return {value: model.get('data').get('container_info').get('youtubeURL')};
            },

            handleChange: function(event) {
                this.setState({value: event.target.value});
                model.get('data').get('container_info').set('youtubeURL', event.target.value);
            },

            render: function() {
                return React.DOM.div({
                    className: "padding1",
                    children:[
                        React.DOM.div({children:"Please copy paste the link of your video to the text box below.", className:"full-width"}),
                        React.DOM.input({type: "text", value: this.state.value, onChange: this.handleChange, className:"full-width", placeholder: "Example: http://www.youtube.com/watch?v=31AhaWyY1y4"})
                    ]
                });
            }
        });

        React.renderComponent(URLInput({}), this.el);
        return this;
    }

  });

  return VideoEmbedEditor;
});

define('models/WidgetContainerModel',[
        'models/WidgetModel',
        'collections/LoginRouteCollection'
    ],
    function(WidgetModel,
        LoginRouteCollection) {

        var WidgetContainerModel = WidgetModel.extend({

            initialize: function(bone, isNew) {
                WidgetContainerModel.__super__.initialize.call(this, bone, isNew);
            },

            createLoginRoutes: function() {
                this.get('data').set('loginRoutes', new LoginRouteCollection());
                v1State.get('users').each(function(userModel) {
                    this.get('data').get('loginRoutes').push({
                        role: userModel.get('name'),
                        redirect: "internal://Homepage"
                    });
                }, this);
            },

            createSearchTarget: function() {
                v1State.get('pages').each(function(pageM) {
                    console.log(pageM.hasSearchList());
                    if (pageM.hasSearchList(this.get('data').get('searchQuery').get('searchOn')) && pageM.isContextFree()) {
                        this.get('data').get('searchQuery').set('searchPage', pageM.getDataLang());
                    }
                }, this);
            },

            serialize: function() {
                var json = _.clone(this.attributes);

                json.layout = this.get('layout').serialize();
                json.data = this.get('data').serialize();
                if (json.context) delete json.context;

                return json;
            }
        });

        return WidgetContainerModel;
    });
var defaultElements = [
  {
    text: "Button",
    className : "button",
    el : "<div class='btn'>Default Button</div>"
  },

  {
    text: "Image",
    className : "image",
    el : "<img class='span16' src='/static/img/placeholder.png'>"
  },

  {
    text: "Header",
    className : "header",
    el : "<h1>Default Header</h1>"
  },

  {
    text: "Text",
    className : "text",
    el : "<did>Default text!</div>"
  },

  {
    text: "Link",
    className : "link",
    el : "<a href='#'>Default Link</div>"
  },

  {
    text: "Line",
    className : "line",
    el : "<hr class='span20'>"
  },

  {
    text: "Box",
    className : "box",
    el : "<div style='background-color:#ccc;height:120px' class='span20'></div>"
  },

  {
    text: "Image Slider",
    className : "imageslider",
    el : "<img class='span24' src='/static/img/placeholder.png'>"
  },

  {
    text: "FB Share",
    className : "fbshare",
    el : "<img src='/static/img/fb-share-sample.png'>"
  },

  {
    text: "Embed Video",
    className : "embedvideo",
    el : "<img src='/static/img/youtube-static.png'>"
  }
];

define("dicts/default-uielements", function(){});

define('editor/EditorGallerySectionView',['require','exports','module','models/WidgetContainerModel','models/WidgetModel','dicts/default-uielements','dicts/constant-containers','jquery-ui'],function(require, exports, module) {

    'use strict';

    var WidgetContainerModel = require('models/WidgetContainerModel');
    var WidgetModel = require('models/WidgetModel');

    require('dicts/default-uielements');
    require('dicts/constant-containers');
    require('jquery-ui');

    var EditorGallerySectionView = Backbone.View.extend({

        events: {
            'click .gallery-header .qmark': 'showSectionTutorial',
            'click .gallery-header': 'toggle'
        },

        className: 'gallery-section',
        isExpanded: true,
        timer: null,

        initialize: function(options) {
            _.bindAll(this);
            this.parentView = options.parentView;
            this.options = options;
            return this;
        },

        render: function() {
            if (this.el) {
                this.el.innerHTML = '';
            }
            var sectionName = this.name.replace(/ /g, '-');
            this.header = this.addHeaderItem(this.name);
            this.listWrapper = document.createElement('div');
            this.listWrapper.className = "elements-panel ";

            this.list = document.createElement('ul');
            if (this.options.index > -1) {
                this.listWrapper.className += 'top' + this.options.index;
            }

            this.listWrapper.appendChild(this.list);
            this.list.style = '';
            this.el.appendChild(this.listWrapper);


            // MONKEY PATCH TO SAY "COMING SOON"
            if (this.options.notYetImplementedFlag) {
                var li = document.createElement('li');
                li.innerHTML = '<p>Coming soon...</p>';
                li.className = 'full-width';
                this.list.appendChild(li);
                this.list.appendChild = function(){};
            }
            return this;
        },

        // TODO : reduce this
        addFullWidthItem: function(id, className, text, icon, generatorIdentifier) {
            var li = document.createElement('li');
            li.className = className + ' full-width';
            li.id = id;
            var tempLi = '<span class="icon <%= icon %>"></span><span class="name"><%= text %></span>';
            li.innerHTML = _.template(tempLi, {
                text: text,
                icon: icon
            });

            if(generatorIdentifier) {
                $(li).data('genpath', generatorIdentifier);
            }

            this.list.appendChild(li);

            if (this.searcher) {
                this.searcher.register(id, className, text, icon);
            }

            return li;
        },

        addHalfWidthItem: function(id, className, text, icon, generatorIdentifier) {
            var li = document.createElement('li');
            li.className = className + ' half-width';
            li.id = id;
            var tempLi = '<span class="icon <%= icon %>"></span><span class="name"><%= text %></span>';
            li.innerHTML = _.template(tempLi, {
                text: text,
                icon: icon
            });

            if(generatorIdentifier) {
                $(li).data('genpath', generatorIdentifier);
            }

            this.list.appendChild(li);

            if (this.searcher) {
                this.searcher.register(id, className, text, icon);
            }

            return li;
        },

        addHeaderItem: function(text, target) {
            var li = document.createElement('div');
            li.className = 'gallery-header open';
            li.innerHTML = '<span>' + text + '</span>';
            // + '<span class="qmark">?</span>';
            var icon = document.createElement('img');
            icon.className = "icon";
            icon.src = "/static/img/right-arrow.png";
            // li.appendChild(icon);
            this.el.appendChild(li);
            return li;
        },

        toggle: function() {
            if (this.isExpanded) this.hide();
            else {
                this.parentView.hideAllSections();
                this.expand();
            }
        },

        expand: function() {
            this.header.className += ' open';
            this.listWrapper.className += ' open';

            this.isExpanded = true;
            $(window).on('mouseup', this.clickedOutsideHide);
        },

        hide: function() {
            $(this.header).removeClass('open');
            $(this.listWrapper).removeClass('open');
            this.isExpanded = false;
            $(window).off('mouseup', this.clickedOutsideHide);
        },

/* Dead code as of 2/10/14
        mouseleave: function(e) {
            if (this.timer) clearTimeout(this.timer);
            var self = this;
            this.timer = setTimeout(this.checkToHide, 130);
        },
        */
        clickedOutsideHide: function(e) {
            var container = this.$el;
            // if the target of the click isn't the container
            // ... nor a descendant of the container
            if (!container.is(e.target) && container.has(e.target).length === 0) {
                this.hide();
            }
        },

        checkToHide: function() {
            if (this.timer) clearTimeout(this.timer);
            if (!this.parentView.dragActive && !this.parentView.slideDownActive) return this.hide();
            this.timer = setTimeout(this.checkToHide, 2000);
        },

        showSectionTutorial: function(e) {
            e.stopPropagation();
            v1.showTutorial(this.name);
        },

        addSearcher: function(searcherObj) {
            this.searcher = searcherObj;
        }

    });


    return EditorGallerySectionView;
});
define('editor/SearchGallerySectionView',['require','exports','module','editor/EditorGallerySectionView'],function(require, exports, module) {

    'use strict';

    var EditorGallerySectionView = require('editor/EditorGallerySectionView');

    var SearchGallerySectionView = EditorGallerySectionView.extend({

        className: 'search elements-panel',

        render: function() {
            if (this.el) {
                this.el.innerHTML = '';
            }
            this.list = document.createElement('ul');
            this.el.appendChild(this.list);
            this.list.style = '';

            return this;
        },

        expand: function() {
            if(this.isExpanded) return;
            this.$el.addClass("open");
            this.isExpanded = true;
        },

        hide: function() {
            if(!this.isExpanded) return;
            this.isExpanded = false;
            this.$el.removeClass("open");
        },

        clear: function() {
            this.list.innerHTML = '';
        }

    });


    return SearchGallerySectionView;
});
define('mixins/BackbonePickOneView',[
  'backbone',
  'jquery-ui'
],

function(Backbone) {

  Backbone.PickOneView = Backbone.View.extend({
    el: null,
    tagName: 'div',
    events: {
      'click .new-option'      : 'showNewOptionBox',
      'click .existing-option' : 'pickedAnswer',
      'submit #new-value-form' : 'createdAnswer'
    },

    initialize: function(list, doesAcceptNew, newLabel) {
      _.bindAll(this);

      this.list = list;
      this.doesAcceptNew = doesAcceptNew;
      this.newLabel = newLabel;

      return this;
    },

    render: function() {

      _(this.list).each(function (val, ind) {

        var input = document.createElement('input');
        input.id = "option-" + ind;
        input.className = "existing-option";
        input.setAttribute("type", "radio");
        input.setAttribute("name", this.cid);
        input.value = val.val;
        var label = document.createElement('label');
        label.innerHTML = val.name;
        label.setAttribute("for", "option-" + ind);

        var option = document.createElement('div');
        option.className = 'option';

        option.appendChild(input);
        option.appendChild(label);

        this.el.appendChild(option);
      }, this);


      if(this.doesAcceptNew) {
        var input = document.createElement('input');
        input.className = "new-option";
        input.id = "new-option";
        input.setAttribute("type", "radio");
        input.setAttribute("name", this.cid);
        var label = document.createElement('label');
        label.innerHTML = this.newLabel;
        label.setAttribute("for", "new-option");
        this.newLabelEl = label;
        this.el.appendChild(input);
        this.el.appendChild(label);
      }

      return this;
    },

    showNewOptionBox: function (argument) {
      this.newLabelEl.setAttribute("for", "");
      this.newLabelEl.innerHTML = '<form id="new-value-form"><input type="text" class="new-value-input" placeholder="Type the new value..."><input type="submit" class="done-btn" value="Add"></form>';
      $('.new-value-input').focus();
    },

    pickedAnswer: function (e) {
      var val = e.currentTarget.id.replace('option-','');
      this.trigger('submit', this.list[val].val);
    },

    createdAnswer: function (e) {
      e.preventDefault();
      var val= $('.new-value-input').val();
      this.trigger('answer', val);
    }

  });

  return Backbone;

});

define('editor/PickCreateFormEntityView',[
  'mixins/BackbonePickOneView',
  'mixins/BackboneModal',
  'util'
],
function() {

  var PickCreateFormEntityView = Backbone.ModalView.extend({
    className : 'navbar-editor-modal',
    width: 600,
    padding: 20,
    title: "New Create Form",

    events: {

    },
    initialize: function(layout, id) {
      _.bindAll(this);
      this.render();
      this.elLayout = layout;
      this.elId = id;
    },

    render: function() {
      var list = v1State.get('tables').map(function(table) {
        return {
          name: table.get('name'),
          val: table.cid
        };
      });

      this.pickOneFromList = new Backbone.PickOneView(list, true, "Add a new table.");
      this.el.innerHTML += "What should this form create?";
      this.el.appendChild(this.pickOneFromList.render().el);
      this.pickOneFromList.el.style.marginTop = '14px';
      this.pickOneFromList.on('submit', this.picked);
      this.pickOneFromList.on('answer', this.newAnswer);
      return this;
    },

    newAnswer: function (name) {
      var entity = v1State.get('tables').push({ name: name});
      if(!entity) return false;
      var elem = v1State.getCurrentPage().get('uielements').createCreateForm(this.elLayout, entity);
      this.closeModal();
      return elem;
    },

    picked: function(tableCid) {
      var entity = v1State.get('tables').get(tableCid);
      var elem = v1State.getCurrentPage().get('uielements').createCreateForm(this.elLayout, entity);
      this.closeModal();
      return elem;
    }

  });

  return PickCreateFormEntityView;
});

define('editor/LinkEditorView',[
    'backbone'
], function() {

    var LinkEditorView = Backbone.View.extend({
        tagName: 'li',
        className: 'well well-small',
        events: {
            'change .link-options': 'pageSelected',
            'keyup input.url': 'updateUrl',
            'keyup input.link-title': 'updateTitle',
            'click .remove': 'removeLink'
        },
        initialize: function(options) {
            _.bindAll(this);

            this.model = options.model;
            this.listenTo(this.model, 'change:url', this.renderUrl, this);

            // generate list of link options
            console.log(v1.currentApp.model.get('routes'));
            this.linkOptions = v1.currentApp.model.get('routes').map(function(routeModel) {
                console.log(routeModel.getUrlString());
                console.log(routeModel);
                return {
                    url: routeModel.getUrlString(),
                    title: routeModel.get('name')
                };
            });

            // if the current link is an external link,
            // we need to add it to the link options
            // if (!this.isInternalLink(this.model.get('url'))) {
            //     this.linkOptions.push(this.model.serialize());
            // }
        },

        render: function() {
            var self = this;
            this.$el.html(_.template(Templates.LinkEditor, this.model.serialize()));
            this.renderLinkOptions();

            this.$urlContainer = this.$el.find('.url-container');
            this.$select = this.$el.find('.select-container');

            this.el.id = 'link-' + this.model.cid;
            return this;
        },

        renderTitle: function() {
            this.$el.find('input.link-title').val(this.model.get('title'));
        },

        renderUrl: function(model, newUrl) {
            this.$el.find('input.url').val(newUrl);
        },

        renderLinkOptions: function() {
            var self = this;
            var select = this.$el.find('.link-options');
            var htmlString = '';
            _(this.linkOptions).each(function(link) {
                // if the link model doesn't have a URL,
                // 'Choose a Page' must be selected
                var selected = (link.url === self.model.get('url')) ? "selected" : "";
                htmlString += '<option value="' + link.url + '"' + selected + '>' + link.title + '</option>';

            });

            htmlString += '<option value="external">External Link...</option>';
            select.html(htmlString);
        },

        pageSelected: function(e) {
            var select = e.target;
            var selectedIndex = select.selectedIndex;
            var selectedItem = {
                title: select[selectedIndex].innerText,
                url: select[selectedIndex].value
            };

            this.model.set({
                url: selectedItem.url,
                title: selectedItem.title
            });


            if (selectedItem.url === 'external') {
                    var newLink = {
                        title: 'External Link Title',
                        url: 'http://'
                    };
                    this.model.set(newLink);
                    this.linkOptions.push(newLink);
                    this.renderLinkOptions();
                    this.$select.hide();
                    this.$urlContainer.show().find('input').focus();
            }

            this.renderTitle();

            // cancel if they chose the first option ('choose an option')
            if (selectedIndex === 0) {
                return false;
            }
        },

        updateUrl: function(e) {
            e.stopPropagation();
            // user can't modify internal urls
            if (this.model.get('url').indexOf('internal://') > -1) {
                return false;
            }

            var newUrl = e.target.value;
            this.model.set('url', newUrl);
        },

        updateTitle: function(e) {
            var newTitle = e.target.value;
            var oldAttrs = this.model.serialize();
            this.model.set({
                title: newTitle
            });
            var newAttrs = _.clone(oldAttrs);
            newAttrs.title = newTitle;
            // this.updateLinkOptions(oldAttrs, newAttrs);
            
            return false;
        },

        updateLinkOptions: function(oldAttrs, newAttrs) {
            for (var i = 0; i < this.linkOptions.length; i++) {
                if (_.isEqual(oldAttrs, this.linkOptions[i])) {
                    this.linkOptions[i] = newAttrs;
                    this.renderLinkOptions();
                }
            }
        },

        removeLink: function(e) {
            this.model.destroy();
            this.$el.remove();
        },

        isInternalLink: function(url) {
            url = url || this.model.get('url');
            return (url.indexOf('internal://') === 0);
        }
    });

    return LinkEditorView;
});
define('editor/NavbarEditorView',[
  'editor/LinkEditorView',
  'mixins/BackboneModal',
  'util'
],
function(LinkEditorView) {

  var NavbarEditorView = Backbone.ModalView.extend({
    className : 'navbar-editor-modal nav-editor',
    width: 600,
    height: 600,
    padding: 0,
    doneButton: true,
    title: 'Navbar Editor',

    events: {
      'click .done-btn'    : 'closeModal',
      'click .add-link'    : 'addLinkEditorClicked',
      'keyup #edit-brandname' : 'updateBrandName',
      'click .clone'       : 'showCloneOptions',
      'change .clone-page' : 'clonePage'
    },
    initialize: function(model) {
      var self = this;

      _.bindAll(this);
      this.subviews = [];

      this.model  = model;
      this.links = this.model.get('links');
      this.listenTo(this.links, 'reset', this.renderLinkEditorViews);
      this.listenTo(this.links, 'add', this.addLinkEditorView);

      this.render();
    },

    render: function() {
      var self = this;
      var brandName = this.model.get('brandName') || v1State.get('name');

      var editorDiv = document.createElement('div');
      editorDiv.id = 'navbar-editor';

      editorDiv.innerHTML = _.template(Templates.NavbarEditor, {
        brandName: brandName,
        items: this.model.get('links').serialize()
      });

      this.$linksList = this.$el.find('#link-editors');

      this.el.appendChild(editorDiv);
      // this.$el.append('<div class="bottom-sect"><div class="q-mark"></div><div class="btn done-btn">Done</div></div>');

      this.renderLinkEditorViews();

      this.$('#link-editors').sortable({
        stop: this.changedOrder,
        axis: 'y'
      });

      return this;
    },

    renderLinkEditorViews: function() {
      var self = this;
      this.$linksList = this.$el.find('#link-editors').empty();
      this.links.each(this.addLinkEditorView);
    },

    addLinkEditorClicked: function(e) {
      var newLink = {};
      if(this.model.get('links').last()) {
        _.clone(this.model.get('links').last().serialize());
      }
      else {
        newLink = {
          title: "Homepage",
          url: "internal://Homepage"
        };
      }
      this.model.get('links').push(newLink);
    },

    addLinkEditorView: function(linkModel) {
      // create new link (duplicate of homepage link)
      var newLink = linkModel;
      var newLinkEditor = new LinkEditorView({ model: newLink});
      this.subviews.push(newLinkEditor);
      this.$linksList.append(newLinkEditor.render().el);

      util.scrollToBottom($('.links-list'));
    },

    resized: function() {
      this.rowWidget.style.width = '';
      this.rowWidget.style.height ='';
      this.rowWidget.className = 'editor-window container-wrapper ';
      this.rowWidget.className += 'span' + this.rowModel.get('layout').get('width');
      this.rowWidget.style.height = (this.rowModel.get('layout').get('height') * GRID_HEIGHT) + 'px';
      this.rowWidget.style.position = "relative";
    },

    updateBrandName: function(e) {
      if(e.keyCode == 13) {
        return false;
      }
      var newBrandName = e.target.value;
      if(newBrandName) {
        this.model.set('brandName', newBrandName);
      }
    },

    changedOrder: function(e, ui) {
      var self = this;
      var sortedIDs = this.$('#link-editors').sortable("toArray");

      var newLinkEditors = _(sortedIDs).map(function(id) {
        return self.links.get(id.replace('link-',''));
      });

      this.links.reset(newLinkEditors);
    },

    showCloneOptions: function() {
      var select = document.createElement('select');
      select.className = 'clone-page';
      select.innerHTML += '<option value="pick-page">Choose a Page</option>';
      v1State.get('pages').each(function(pageM) {
        select.innerHTML += '<option value="page-'+pageM.cid+'">'+ pageM.get('name') +'</option>';
      });
      this.$el.find('.clone').html('Which page would you like to clone from?');
      this.$el.find('.clone').append(select);
    },

    clonePage: function(e) {
      if(e.currentTarget.value == 'pick-page') return;
      var cid = String(e.currentTarget.value).replace('page-','');
      var pageM = v1State.get('pages').get(cid);

      this.model.get('links').reset();
      this.model.get('links').add(pageM.get('navbar').get('links').serialize());
      this.model.set('brandName', pageM.get('navbar').get('brandName'));

      this.closeModal();
    },

    cancelSubmit: function() {
      return false;
    }
  });

  return NavbarEditorView;
});

define('editor/FooterEditorView',[
  'editor/NavbarEditorView',
  'editor/LinkEditorView',
  'mixins/BackboneModal',
  'util'
],
function(NavbarEditorView, LinkEditorView) {

  var FooterEditorView = NavbarEditorView.extend({
    className : 'footer-editor-modal nav-editor',
    width: 600,
    height: 600,
    padding: 0,
    doneButton: true,
    title: 'Footer Editor',

    events: {
      'click .done-btn' : 'closeModal',
      'click .add-link' : 'addLinkEditorClicked',
      'keyup #edit-customText' : 'updateCustomText',
      'click .clone'       : 'showCloneOptions',
      'change .clone-page' : 'clonePage'
    },

    render: function() {
      var self = this;
      var customText = this.model.get('customText');

      var editorDiv = document.createElement('div');
      editorDiv.id = 'footer-editor';

      editorDiv.innerHTML = _.template(Templates.FooterEditor, {
        customText: customText
      });

      this.$linksList = this.$el.find('#link-editors');

      this.el.appendChild(editorDiv);

      this.renderLinkEditorViews();

      this.$('#link-editors').sortable({
        stop: this.changedOrder,
        axis: 'y'
      });

      return this;
    },


    addLinkEditorView: function(linkModel) {
      // create new link (duplicate of homepage link)
      var newLink = linkModel;
      var newLinkEditor = new LinkEditorView({ model: newLink});
      this.subviews.push(newLinkEditor);
      this.$linksList.append(newLinkEditor.render().el);
      util.scrollToBottom($('.links-list'));
    },

    resized: function() {
      this.rowWidget.style.width = '';
      this.rowWidget.style.height ='';
      this.rowWidget.className = 'editor-window container-wrapper ';
      this.rowWidget.className += 'span' + this.rowModel.get('layout').get('width');
      this.rowWidget.style.height = (this.rowModel.get('layout').get('height') * this.positionVerticalGrid) + 'px';
      this.rowWidget.style.position = "relative";
    },

    updateCustomText: function(e) {
      var newCustomText = e.target.value;
      this.model.set('customText', newCustomText||"");
    },

    changedOrder: function(e, ui) {
      var self = this;
      var sortedIDs = this.$('#link-editors').sortable("toArray");

      var newLinkEditors = _(sortedIDs).map(function(id) {
        return self.links.get(id.replace('link-',''));
      });

      this.links.reset(newLinkEditors);
    },

    showCloneOptions: function() {
      var select = document.createElement('select');
      select.className = 'clone-page';
      select.innerHTML += '<option value="pick-page">Choose a Page</option>';
      v1State.get('pages').each(function(pageM) {
        select.innerHTML += '<option value="page-'+pageM.cid+'">'+ pageM.get('name') +'</option>';
      });
      this.$el.find('.clone').html('Which page would you like to clone from?');
      this.$el.find('.clone').append(select);
    },

    clonePage: function(e) {
      if(e.currentTarget.value == 'pick-page') return;

      var cid = String(e.currentTarget.value).replace('page-','');
      var pageM = v1State.get('pages').get(cid);

      this.model.get('links').reset();
      this.model.get('links').add(pageM.get('footer').get('links').serialize());
      this.model.set('customText', pageM.get('footer').get('customText'));

      this.closeModal();
    }

  });

  return FooterEditorView;
});

define('editor/Searcher',['require','exports','module','editor/FooterEditorView','backbone'],function(require, exports, module) {

    'use strict';

    var FooterEditorView = require('editor/FooterEditorView');
    require('backbone');

    function Searcher() {

        this.items = [];

        this.register = function(id, className, text, icon) {
            this.items.push({
                id: id,
                className: className,
                text: text,
                icon: icon
            });
        };

        this.search = function(str) {

            var results = [];
            _.each(this.items, function(item) {
                if (item.text.toLowerCase().indexOf(str.toLowerCase()) > -1) {
                    results.push(item);
                }
            });

            return results;
        };


    }

    return Searcher;
});
define('app/AutoFillHelper',['require','exports','module','backbone'],function(require, exports, module) {

    'use strict';

    require("backbone");

    var AutoFiller = {

        fillUIElement: function (model) {
            
            var extraData = {};

            var type = model.get('className');

            if(v1UIEState.getBaseClass(type)) {
                extraData.className = v1UIEState.getBaseClass(type);
            }

            if (type == "image") {
                extraData.src = this.stockPhotos[Math.floor(Math.random() * this.stockPhotos.length)];
            }

            if (type == "text") {
                extraData.content = this.loremIpsum();
            }

            return extraData;
        },

        stockPhotos: [
            "https://i.istockimg.com/file_thumbview_approve/19012355/2/stock-photo-19012355-world-globe-on-a-school-desk.jpg",
            "https://i.istockimg.com/file_thumbview_approve/21149086/2/stock-photo-21149086-futuristic-digital-tablet-in-the-hands.jpg",
            "https://i.istockimg.com/file_thumbview_approve/20571269/2/stock-illustration-20571269-school-grunge-pattern.jpg",
            "https://i.istockimg.com/file_thumbview_approve/18120560/2/stock-photo-18120560-students-at-computer-class.jpg",
            "https://i.istockimg.com/file_thumbview_approve/17096161/2/stock-photo-17096161-chalkboard-with-book.jpg",
            "https://i.istockimg.com/file_thumbview_approve/3516561/2/stock-photo-3516561-back-to-school-with-copyspace.jpg"
        ],

        loremIpsum: function() {
            var loremIpsumWordBank = new Array("lorem", "ipsum", "dolor", "sit", "amet,", "consectetur", "adipisicing", "elit,", "sed", "do", "eiusmod", "tempor", "incididunt", "ut", "labore", "et", "dolore", "magna", "aliqua.", "enim", "ad", "minim", "veniam,", "quis", "nostrud", "exercitation", "ullamco", "laboris", "nisi", "ut", "aliquip", "ex", "ea", "commodo", "consequat.", "duis", "aute", "irure", "dolor", "in", "reprehenderit", "in", "voluptate", "velit", "esse", "cillum", "dolore", "eu", "fugiat", "nulla", "pariatur.", "excepteur", "sint", "occaecat", "cupidatat", "non", "proident,", "sunt", "in", "culpa", "qui", "officia", "deserunt", "mollit", "anim", "id", "est", "laborum.", "sed", "ut", "perspiciatis,", "unde", "omnis", "iste", "natus", "error", "sit", "voluptatem", "accusantium", "doloremque", "laudantium,", "totam", "rem", "aperiam", "eaque", "ipsa,", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt,", "explicabo.", "nemo", "enim", "ipsam", "voluptatem,", "quia", "voluptas", "sit,", "aspernatur", "aut", "odit", "aut", "fugit,", "sed", "quia", "consequuntur", "magni", "dolores", "eos,", "qui", "ratione", "voluptatem", "sequi", "nesciunt,", "neque", "porro", "quisquam", "est,", "qui", "dolorem", "ipsum,", "quia", "dolor", "sit,", "amet,", "consectetur,", "adipisci", "velit,", "sed", "quia", "non", "numquam", "eius", "modi", "tempora", "incidunt,", "ut", "labore", "et", "dolore", "magnam", "aliquam", "quaerat", "voluptatem.", "ut", "enim", "ad", "minima", "veniam,", "quis", "nostrum", "exercitationem", "ullam", "corporis", "suscipit", "laboriosam,", "nisi", "ut", "aliquid", "ex", "ea", "commodi", "consequatur?", "quis", "autem", "vel", "eum", "iure", "reprehenderit,", "qui", "in", "ea", "voluptate", "velit", "esse,", "quam", "nihil", "molestiae", "consequatur,", "vel", "illum,", "qui", "dolorem", "eum", "fugiat,", "quo", "voluptas", "nulla", "pariatur?", "at", "vero", "eos", "et", "accusamus", "et", "iusto", "odio", "dignissimos", "ducimus,", "qui", "blanditiis", "praesentium", "voluptatum", "deleniti", "atque", "corrupti,", "quos", "dolores", "et", "quas", "molestias", "excepturi", "sint,", "obcaecati", "cupiditate", "non", "provident,", "similique", "sunt", "in", "culpa,", "qui", "officia", "deserunt", "mollitia", "animi,", "id", "est", "laborum", "et", "dolorum", "fuga.", "harum", "quidem", "rerum", "facilis", "est", "et", "expedita", "distinctio.", "Nam", "libero", "tempore,", "cum", "soluta", "nobis", "est", "eligendi", "optio,", "cumque", "nihil", "impedit,", "quo", "minus", "id,", "quod", "maxime", "placeat,", "facere", "possimus,", "omnis", "voluptas", "assumenda", "est,", "omnis", "dolor", "repellendus.", "temporibus", "autem", "quibusdam", "aut", "officiis", "debitis", "aut", "rerum", "necessitatibus", "saepe", "eveniet,", "ut", "et", "voluptates", "repudiandae", "sint", "molestiae", "non", "recusandae.", "itaque", "earum", "rerum", "hic", "tenetur", "a", "sapiente", "delectus,", "aut", "reiciendis", "voluptatibus", "maiores", "alias", "consequatur", "aut", "perferendis", "doloribus", "asperiores", "repellat");
            var minWordCount = 15;
            var maxWordCount = 100;

            var randy = Math.floor(Math.random() * (maxWordCount - minWordCount)) + minWordCount;
            var ret = "";
            for (var i = 0; i < randy; i++) {
                var newTxt = loremIpsumWordBank[Math.floor(Math.random() * (loremIpsumWordBank.length - 1))];
                if (ret.substring(ret.length - 1, ret.length) == "." || ret.substring(ret.length - 1, ret.length) == "?") {
                    newTxt = newTxt.substring(0, 1).toUpperCase() + newTxt.substring(1, newTxt.length);
                }
                ret += " " + newTxt;
            }
            return ret;
        },

        fillCreateForm: function (argument) {
            // body...
        }
    }

    return AutoFiller;

});
define('editor/EditorGalleryView',['require','exports','module','editor/EditorGallerySectionView','editor/SearchGallerySectionView','editor/PickCreateFormEntityView','models/WidgetContainerModel','models/WidgetModel','editor/Searcher','app/AutoFillHelper','dicts/default-uielements','dicts/constant-containers'],function(require, exports, module) {

    'use strict';

    var EditorGallerySectionView = require('editor/EditorGallerySectionView');
    var SearchGallerySectionView = require('editor/SearchGallerySectionView');
    var PickCreateFormEntityView = require('editor/PickCreateFormEntityView');
    var WidgetContainerModel = require('models/WidgetContainerModel');
    var WidgetModel = require('models/WidgetModel');
    var Searcher = require('editor/Searcher');
    var AutoFillHelper = require('app/AutoFillHelper');

    require('dicts/default-uielements');
    require('dicts/constant-containers');

    var EditorGalleryView = Backbone.View.extend({

        el: util.get('top-panel-bb'),
        allList: util.get('all-list'),

        curId: 'all-elements',
        dragActive: false,
        slideDownActive: false,


        positionHorizontalGrid: 80,
        positionVerticalGrid: 15,
        nmrSections: 0,

        sections: [],
        subviews: [],

        editorContext: "Page",

        events: {
            'change input.search'    : 'searchInputChage',
            'click .search-icon'     : 'searchToggle',
            'keyup input.search'     : 'searchInputChage',
            'click .search-cancel'   : 'searchCanceled'
        },

        initialize: function(sectionsCollection) {
            _.bindAll(this);

            this.sectionsCollection = sectionsCollection;

            this.searcher = new Searcher();

            this.sections = [];
            this.subviews = [];
        },

        render: function() {
            var self = this;
            this.setElement(util.get('top-panel-bb'));

            this.allList = util.get('all-list');
            this.allList.innerHTML = '';
            this.renderSearchPart();
            this.renderUIElementList(); // Basic UI Elements
            // TODO implement these in one fn call via plugins.
            // for now they're dummies
            this.renderAuthenticationForms(); // Authentication Forms
            this.renderCurrentUserElements(); // CurrentUser Elements
            this.renderCrudElements();
            this.renderEntityLists(); // All Create Forms, Tables, Lists
            this.renderContextEntityElements(); // Context Entity Elements and Update Forms
            this.renderPluginElements();

            // hide all sections except first
            this.hideAllSections();
            this.bindDraggable();


            // listen for changes to url to update context entity section
            // this.listenTo(v1State.getCurrentPage().get('url').get('urlparts'), 'add remove', this.renderContextEntityElements);
            this.listenTo(v1State.get('tables'), 'add remove', this.renderEntityFormsTablesLists);
            this.listenTo(v1State.get('generators'), 'change', this.renderPluginElements);
            this.listenTo(v1State.get('plugins'), 'change', this.renderPluginElements);

            return this;
        },

        bindDraggable: function() {
            var self = this;

            $(this.allList).find('li:not(.ui-draggable)').draggable({
                cursor: "move",
                helper: "clone",
                start: function(e) {
                    self.dragActive = true;
                    v1.currentApp.view.sectionShadowView.displayColumnShadows();
                },
                stop: function(e) {
                    self.dragActive = false;
                    v1.currentApp.view.sectionShadowView.hideColumnShadows();
                },
                iframeFix: true
            });

        },

        renderSearchPart: function() {

            var self = this;
            var sectionView = new SearchGallerySectionView({
                parentView: self
            });

            sectionView.name = name;
            this.searchSection = sectionView;

            this.subviews.push(sectionView);
            this.sections.push(sectionView);
            this.allList.appendChild(sectionView.render().el);
        },

        searchToggle: function() {
            if (this._search_expanded)
                this.searchCanceled();
            else
                this.searchHovered();
        },

        searchHovered: function() {
            $(".search-panel").addClass("hover");
            $('.search').focus();
            this._search_expanded = true;
        },

        searchCanceled: function() {
            $(".search-panel").removeClass("hover");
            $('.search').val('');
            $('.search').focusout();
            this._search_expanded = false;
        },

        searchInputChage: function(e) {
            
            var val = e.currentTarget.value;

            if (val === "") {
                this.searchSection.clear();
                $(".search-panel").removeClass("hover");
                return;
            }
            else {
                $(".search-panel").addClass("hover");
            }

            this.searchSection.clear();
            var results = this.searcher.search(val);
            
            if(results.length > 0) {
                this.searchSection.expand();
            }
            else {
                this.searchSection.hide();
            }

            _.each(results, function(result) {
                this.searchSection.addHalfWidthItem(result.id, result.className, result.text, result.icon);
            }, this);

        },

        renderUIElementList: function() {
            var self = this;
            var collection = new Backbone.Collection(defaultElements);
            this.uiElemsSection = this.addNewSection('Design Elements');

            collection.each(this.appendUIElement);

            self.appendLambdaCreate();
            self.appendCustomWidget();
        },

        appendUIElement: function(elementModel) {
            var className = 'uielement';
            var icon = 'icon ' + elementModel.get('className');
            var text = elementModel.get('text');

            var li = this.uiElemsSection.addHalfWidthItem(null, className, text, icon, 'uielements.design-' + elementModel.get('className'));
            $(li).data('extraData', AutoFillHelper.fillUIElement(elementModel));

        },

        appendLambdaCreate: function() {
            var className = 'lambda-create-form';
            var id = 'type-create-form';
            var icon = 'create-form-icon';
            var text = 'Create Form';

            var li = this.uiElemsSection.addHalfWidthItem(id, className, text, icon);
            var self = this;
        },

        appendCustomWidget: function() {
            var className = 'uielement';
            var icon = 'custom-widget';
            var text = 'Custom Widget';

            var li = this.uiElemsSection.addHalfWidthItem(null, className, text, icon, 'uielements.design-custom');
            $(li).data('type', 'custom-widget');
        },

        renderAuthenticationForms: function() {
            this.authSection = this.addNewSection('User Signin Forms', true);

            this.authSection.addFullWidthItem("entity-user-Local_Login", "login", "Login Form", "local-login");

            v1State.get('users').each(function(user) {
                this.authSection.addFullWidthItem("entity-user-" + user.get('name'), "signup", user.get('name') + " Sign Up", "local-signup");
            }, this);

            if (!v1State.isSingleUser()) {
                v1State.get('users').each(function(user) {
                    var name = user.get('name');
                    this.authSection.addFullWidthItem("entity-user-" + name, "facebooksignup", name + " Facebook Sign Up", "facebook");
                    // this.addFullWidthItem("entity-user-" + name, "twittersignup", name + " Twitter Sign Up", "twitter", authSection);
                    // this.addFullWidthItem("entity-user-" + name, "linkedinsignup", name + " LinkedIn Sign Up", "linkedin", authSection);
                }, this);
            }

            this.authSection.addFullWidthItem("entity-user-facebook", "thirdparty", "Facebook Login Button", "facebook");
            this.authSection.addFullWidthItem("entity-user-twitter", "thirdparty", "Twitter Login Button", "twitter");
            this.authSection.addFullWidthItem("entity-user-linkedin", "thirdparty", "LinkedIn Login Button", "linkedin");
        },

        renderCurrentUserElements: function() {
            this.currUserSection = this.addNewSection('Current User Views', true);
            // _(v1.currentApp.getCurrentPage().getFields()).each(function(field) {
            //     if (field.isRelatedField()) return;
            //     this.currUserSection.addFullWidthItem('current-user-' + field.cid, 'current-user', 'Current User ' + field.get('name'), 'current-user-icon');
            // }, this);

            // v1State.get('users').each(function(user) {
            //     this.currUserSection.addFullWidthItem('entity-user-' + user.cid, "entity-edit-form", 'Current ' + user.get('name') + ' Edit Form', 'create-form-icon');
            // }, this);
        },

        renderCrudElements: function (argument) {

            this.tableSection = this.addNewSection('Data Forms');
            v1State.get('tables').each(function(entityModel) {

                var li = this.tableSection.addFullWidthItem(null, "entity-create-form", entityModel.get('name') + ' Create Form', 'create-form-icon', 'crud.uielements.create');

                $(li).data('extraData', {
                    id: Math.floor(Math.random()*11),
                    tableName: entityModel.get('name')
                });

                $(li).data('type', 'create-form');

            }, this);
        
        },

        renderEntityLists: function() {
            // if (!this.tableSection) {
                this.tableSection = this.addNewSection('Data Views', true);
            // } else {
            //     this.tableSection.render();
            // }

            v1State.get('tables').each(function(entityModel) {
                var context = {
                    entity_id: entityModel.cid,
                    entity_name: entityModel.get('name')
                };
                var id = 'entity-' + entityModel.cid;
                //this.addFullWidthItem(id, "entity-table", entityModel.get('name') +' Table', 'table-icon', tableSection);
                this.tableSection.addFullWidthItem(id, "entity-list", entityModel.get('name') + ' List', 'list-icon');
                this.tableSection.addFullWidthItem(id, "entity-searchlist", entityModel.get('name') + ' Search Results', 'searchlist-icon');
            }, this);

            v1State.get('users').each(function(entityModel) {
                var context = {
                    entity_id: entityModel.cid,
                    entity_name: entityModel.get('name')
                };
                var id = 'entity-' + entityModel.cid;
                //this.addFullWidthItem(id, "entity-table", entityModel.get('name') +' Table', 'table-icon', tableSection);
                this.tableSection.addFullWidthItem(id, "entity-list", entityModel.get('name') + ' List', 'list-icon');
                this.tableSection.addFullWidthItem(id, "entity-searchlist", entityModel.get('name') + ' Search Results', 'searchlist-icon');
            }, this);

            this.bindDraggable();
        },

        renderContextEntityElements: function() {
            // var pageContext = v1State.getCurrentPage().getContextEntities();

            // // if there are no context entities, remove this section if it exists
            // if (!pageContext.length) {
            //     if (this.contextEntitySection) {
            //         this.removeSection(this.contextEntitySection);
            //     }
            //     return;
            // }

            // if (!this.contextEntitySection) {
            //     this.contextEntitySection = this.addNewSection('Page Context Data');
            // } else {
            //     this.allList.appendChild(this.contextEntitySection.render().el);
            // }



            // _(pageContext).each(function(tableName) {
            //     var tableM = v1State.getTableModelWithName(tableName);
            //     if (!tableM) throw "Error with page context";
            //     var tableId = tableM.cid;
            //     var id = '';
            //     if (tableM.isUser) {
            //         id = 'entity-user-' + tableM.cid;
            //     } else {
            //         id = 'entity-table-' + tableM.cid;
            //     }
            //     this.contextEntitySection.addFullWidthItem(id, "entity-edit-form", tableM.get('name') + ' Edit Form', 'create-form-icon');

            //     if (tableM.hasMoneyField()) {
            //         this.contextEntitySection.addFullWidthItem(id, "entity-buy-button", 'Buy ' + tableM.get('name') + ' Button', 'money-button-icon');
            //     }

            //     tableM.getFieldsColl().each(function(field) {
            //         if (field.isRelatedField()) return this.renderRelatedField(field, tableM);
            //         this.contextEntitySection.addFullWidthItem('context-field-' + tableId + '-' + field.cid, 'context-entity', tableName + ' ' + field.get('name'), 'plus-icon');
            //     }, this);
            // }, this);

            this.bindDraggable();
        },

        renderPluginElements: function() {
            var elements = [];

            var uiGenerators = v1State.get('generators').getGeneratorsWithModule('uielements');

            if(this.pluginElemsSection) this.pluginElemsSection.close();
            this.pluginElemsSection = this.addNewSection('Plugin Elements');
            
            _.each(uiGenerators, function(element) {
                console.log(element.generatorIdentifier);
                this.pluginElemsSection.addFullWidthItem('id', 'class', element.name, 'plugin-icon', element.generatorIdentifier);
            }, this);

            this.bindDraggable();
        },

        renderRelatedField: function(fieldModel, tableModel, section) {

            var tableName = tableModel.get('name');
            var entityId = tableModel.cid;
            var nestedTableModel = v1State.getTableModelWithName(fieldModel.get('entity_name'));

            _(nestedTableModel.getNormalFields()).each(function(fieldM) {
                this.contextEntitySection.addFullWidthItem('context-field-' + entityId + '-' + nestedTableModel.cid + '-' + fieldModel.cid + '-' + fieldM.cid,
                    'context-nested-entity',
                    tableName + ' ' + fieldModel.get('name') + '.' + fieldM.get('name'),
                    'plus-icon', section);
            }, this);

            this.bindDraggable();
        },

        addNewSection: function(name, notYetImplementedFlag) {

            var self = this;
            var sectionView = new EditorGallerySectionView({
                parentView: self,
                index: this.nmrSections,
                notYetImplementedFlag: notYetImplementedFlag,
            });

            this.nmrSections++;

            sectionView.addSearcher(this.searcher);

            sectionView.name = name;
            this.subviews.push(sectionView);
            this.sections.push(sectionView);
            this.allList.appendChild(sectionView.render().el);
            return sectionView;
        },

        removeSection: function(sectionView) {
            sectionView.close();
            this.sections.splice(this.sections.indexOf(sectionView), 1);
            this.subviews.splice(this.subviews.indexOf(sectionView), 1);
        },

        getCurrentWidgetCollection: function() {
            return v1.currentApp.view.sectionsManager.currentSectionModel;
        },

        addInfoItem: function(text) {
            var li = document.createElement('li');
            li.className = 'gallery-info ui-draggable';
            li.innerHTML = text;
            $(this.allList).append(li);
        },

        expandSection: function(index) {
            this.sections[index].expand();
        },

        hideSection: function(index) {
            this.sections[index].hide();
        },

        expandAllSections: function() {
            _(this.sections).each(function(section) {
                section.expand();
            });
        },

        hideAllSections: function() {
            _(this.sections).each(function(section) {
                section.hide();
            });
        },

        slideDown: function() {
            var self = this;
            var itemGallery = document.getElementById('item-gallery');
            var h = $(itemGallery).scrollTop();
            this.slideDownActive = true;
            $(itemGallery).scrollTop(h + 14);
            var tmr = setTimeout(function() {
                self.slideDownActive = false;
                clearTimeout(tmr);
            }, 200);
        },

        eContainer: function() {
            if (this.elementsContainer) {
                return this.elementsContainer;
            } else {
                var iframe = document.getElementById('page');
                var doc = iframe.contentDocument || iframe.contentWindow.document;
                this.elementsContainer = doc.getElementById('elements-container');
                return this.elementsContainer;
            }
        },

        hide: function () {
            this.$el.hide();
        },

        show: function() {
            this.$el.fadeIn();
        }

    });


    return EditorGalleryView;
});

define('editor/list-editor/RowGalleryView',[
        'editor/EditorGallerySectionView',
        'editor/EditorGalleryView',
    ],
    function(EditorGallerySectionView,
        EditorGalleryView) {

        var RowGalleryView = EditorGalleryView.extend({
            el: null,
            tagName: 'ul',
            className: 'elements-list row-elements-list',
            positionHorizontalGrid: 1,
            positionVerticalGrid: 1,
            sections: [],
            subviews: [],

            events: {
                'mouseover .bottom-arrow': 'slideDown',
                'mousemove .bottom-arrow': 'slideDown'
            },

            initialize: function(widgetModel, location) {
                this.model = widgetModel;
                var rowModel = this.model.get('data').get('container_info').get('row');
                RowGalleryView.__super__.initialize.call(this, rowModel.get('uielements'));
                _.bindAll(this);
                this.subviews = [];
                this.sections = [];

                var entityModel = this.model.get('data').get('container_info').get('entity');

                this.entity = entityModel;
                this.row = rowModel;

                /* Setting up the row collection */
                this.widgetsCollection = rowModel.get('uielements');
                this.widgetsCollection.grid = {};
                this.widgetsCollection.grid.maxWidth = null;

                this.editorContext = "loop";
                this.allList = this.el;
                this.location = location;
            },

            render: function() {
                // Basic UI Elements
                // Context Entity Elements and Update Forms
                var self = this;
                this.allList = this.el;
                this.allList.innerHTML = '';
                this.addInfoItem('Drop elements to the green area to edit one row of the list.');

                this.sections = [];
                this.renderUIElementList();
                this.renderContextEntity();
                this.renderContextEntityElements(); // Context Entity Elements and Update Forms

                //this.displayAllSections();

                this.el.innerHTML += '<div class="bottom-arrow"></div>';

                this.$el.find('li:not(.ui-draggable)').on('click', this.dropped);
                this.$el.find('li:not(.ui-draggable)').draggable({
                    cursor: "move",
                    cursorAt: {
                        top: 0,
                        left: 0
                    },
                    helper: "clone",
                    start: function(e) {
                        self.draggableActive = true;
                    },
                    stop: self.dropped,
                    iframeFix: true
                });

                this.switchEditingModeOn();

                return this;
            },

            renderUIElementList: function() {
                var self = this;
                var collection = new ElementCollection(defaultElements);
                this.uiElemsSection = this.addNewSection('Design Elements');

                collection.each(function(element) {
                    if (element.get('className') == "textInputs" ||
                        element.get('className') == "textAreas" ||
                        element.get('className') == "dropdowns" ||
                        element.get('className') == "imageslider" ||
                        element.get('className') == "facebookshare") return;
                    this.appendUIElement(element);
                }, this);
            },

            renderContextEntity: function() {
                // Form, Data elements belonging to the entity
                var self = this;
                this.contextEntitySection = this.addNewSection('Row Context Data');

                var entityName = self.entity.get('name');
                var entityId = self.entity.cid;

                this.entity.getFieldsColl().each(function(field) {
                    if (field.isRelatedField()) return self.renderRelatedField(field, this.contextEntitySection);
                    this.contextEntitySection.addHalfWidthItem('context-field-' + entityId + '-' + field.cid,
                        'context-entity', entityName + ' ' + field.get('name'),
                        'plus-icon');
                }, this);
            },

            renderContextEntityElements: function() {
                if (this.entity.hasMoneyField()) {
                    var id = 'entity-table-' + this.entity.cid;
                    this.contextEntitySection.addHalfWidthItem(id, "entity-buy-button", 'Buy ' + this.entity.get('name') + ' Button', 'money-button-icon');
                }
            },

            renderRelatedField: function(fieldModel, contextEntitySection) {

                var entityName = this.entity.get('name');
                var entityId = this.entity.cid;
                var tableModel = v1State.getTableModelWithName(fieldModel.get('entity_name'));

                _(tableModel.getNormalFields()).each(function(fieldM) {
                    this.contextEntitySection.addHalfWidthItem('context-field-' + entityId + '-' + tableModel.cid + '-' + fieldModel.cid + '-' + fieldM.cid,
                        'context-nested-entity',
                        entityName + ' ' + fieldModel.get('name') + '.' + fieldM.get('name'),
                        'plus-icon');
                }, this);
            },

            switchEditingModeOn: function() {
                this.model.trigger('highlight');
                this.model.trigger('unhover');
                this.model.trigger('editModeOn', this.location);
            },

            dropped: function(e, ui) {
                var left = 0;
                var top = 1;
                if (e.type != 'click') {
                    left = this.findLeft(e, ui);
                    top = this.findTop(e, ui);
                }

                var layout = {
                    top: top,
                    left: left,
                    width: 80,
                    height: 80
                };

                var targetEl = e.target;
                if (e.target.tagName != "LI") {
                    targetEl = e.target.parentNode;
                }

                var className = targetEl.className;
                var id = targetEl.id;
                var widget = this.createElement(layout, className, id);

                widget.setupLoopContext(this.entity);
            },

            findLeft: function(e, ui) {
                var iframe = document.getElementById('page');
                var $el = $(iframe).contents().find('.highlighted');
                var offsetLeft = $el.offset().left;
                var left = Math.round((e.pageX - offsetLeft) / 1);
                if (left < 0) left = 0;
                //if(left + 4 > 12) left = 8;

                return left;
            },

            findTop: function(e, ui) {
                var iframe = document.getElementById('page');
                var $el = $(iframe).contents().find('.highlighted');
                var offsetScrolledTop = $el.offset().top;
                var top = Math.round((e.pageY - offsetScrolledTop) / 1);
                if (top < 0) top = 0;

                return top;
            },

            slideDown: function() {
                var itemGallery = $('.elements-list.row-elements-list');
                var h = itemGallery.scrollTop();
                itemGallery.scrollTop(h + 10);
            },


            appendUIElement: function(elementModel) {
                var className = 'uielement';
                var id = 'type-' + elementModel.get('className');
                var icon = 'icon ' + elementModel.get('className');
                var text = elementModel.get('text');

                var li = this.uiElemsSection.addHalfWidthItem(id, className, text, icon);
                $(li).on('click', this.dropped);
            }
        });

        return RowGalleryView;
    });
define('editor/form-editor/ActionEditorView',[
        'models/FormFieldModel',
        'models/ActionModel',
        'tutorial/TutorialView',
        'mixins/BackboneModal',
        'mixins/SelectView',
        'jquery-ui'
    ],
    function(FormFieldModel, ActionModel, TutorialView) {

        var FormEditorTemplates = {};
        FormEditorTemplates.actionPane = [
            '<small>Choose options from the list below.</small>',
            '<ul class="current-actions"></ul>',
            '<div class="section-header">Options</div>',
            '<ul class="action goto-list">',
            '</ul>',
            '<ul class="action relational-list">',
            '</ul>',
            '<ul class="action email-list">',
            '</ul>'
        ].join('\n');


        var ActionEditorView = Backbone.View.extend({
            tagName: 'div',
            className: 'form-action-editor',

            events: {
                'click li.goto-action': 'gotoActionClicked',
                'click li.relational-action': 'relationalActionClicked',
                'click li.email-action': 'emailActionClicked',
                'click li.current-action': 'currentActionClicked'
            },

            initialize: function(formModel, entityModel) {
                _.bindAll(this);

                this.model = formModel;
                this.entityM = entityModel;

                // this.listenTo(this.model.get('actions'), 'add', this.actionAdded);
                // this.listenTo(this.model.get('actions'), 'remove', this.actionRemoved);
                // this.listenTo(this.model, 'change:goto', this.changedGoto);

                this.possibleRelationalActions = [];
                //this.model.getRelationalActions(v1State.getCurrentPage());
                this.possibleEmailActions = [];
                //this.model.getEmailActions();
                this.possibleGotos = [];
                //this.model.getPossibleGotos();
            },

            render: function(text) {
                this.el.innerHTML = _.template(FormEditorTemplates.actionPane, {});

                // this.renderRelations();
                // this.renderGotos();
                // this.renderEmails();

                // this.model.get('actions').each(function(action) {
                //     this.$el.find('.current-actions').append('<li id="action-' + action.cid + '" class="current-action">' + action.getNL() + '<div class="remove-from-list"></div></li>');
                // }, this);

                return this;
            },

            renderRelations: function() {
                this.possibleRelationalActions.each(function(actionModel, ind) {
                    this.$el.find('.relational-list').append('<li id="action-' + actionModel.cid + '" class="relational-action">' + actionModel.get('nl_description') + '<div class="add-to-list"></div></li>');
                }, this);
            },

            renderEmails: function() {
                this.possibleEmailActions.each(function(actionModel, ind) {
                    this.$el.find('.email-list').append('<li id="action-' + actionModel.cid + '" class="email-action">' + actionModel.get('nl_description') + '<div class="add-to-list"></div></li>');
                }, this);
            },

            renderGotos: function() {
                var entitiyName = this.entityM.get('name');
                var redirect = this.model.get('goto');

                if (redirect) {
                    this.$el.find('.current-actions').append('<li id="action-' + redirect.cid + '" class="current-action goto-action">Go to ' + redirect.get('page_name') + '<div class="remove-from-list"></div></li>');
                }

                this.possibleGotos.each(function(actionModel, ind) {
                    this.$el.find('.goto-list').append('<li id="page-' + actionModel.cid + '" class="goto-action">Go to ' + actionModel.get('page_name') + '<div class="add-to-list"></div></li>');
                }, this);
            },


            gotoActionClicked: function(e) {
                if ($(e.currentTarget).hasClass('current-action')) return;
                var pageCid = (e.target.id || e.target.parentNode.id).replace('page-', '');
                this.model.set('goto', this.possibleGotos.get(pageCid));
            },

            relationalActionClicked: function(e) {
                var actionCid = (e.target.id || e.target.parentNode.id).replace('action-', '');
                var actionModel = this.possibleRelationalActions.get(actionCid);
                this.model.addAction(actionModel);
            },

            emailActionClicked: function(e) {
                var actionCid = (e.target.id || e.target.parentNode.id).replace('action-', '');
                var actionModel = this.possibleEmailActions.get(actionCid);
                this.model.addAction(actionModel);
            },

            currentActionClicked: function(e) {
                if ($(e.currentTarget).hasClass('goto-action')) return;
                var actionCid = (e.target.id || e.target.parentNode.id).replace('action-', '');
                this.model.get('actions').remove(actionCid);
            },

            actionAdded: function(actionModel) {
                this.$el.find('.current-actions').append('<li id="action-' + actionModel.cid + '" class="current-action">' + actionModel.getNL() + '<div class="remove-from-list"></div></li>');
            },

            changedGoto: function() {
                this.$el.find('.goto-action.current-action').remove();
                var redirect = this.model.get('goto');
                var page_name = redirect.get('page_name').replace('internal://', '');

                this.$el.find('.current-actions').append('<li id="action-' + redirect.cid + '" class="current-action goto-action">Go to ' + page_name + '<div class="remove-from-list"></div></li>');
            },

            actionRemoved: function(actionModel) {
                this.$el.find('#action-' + actionModel.cid).remove();
            }

        });

        return ActionEditorView;
    });
define('editor/form-editor/FormEditorView',['require','exports','module','models/FormFieldModel','editor/form-editor/ActionEditorView','tutorial/TutorialView','mixins/BackboneModal','mixins/SelectView','jquery-ui'],function(require, exports, module) {

    'use strict';

    var FormFieldModel = require('models/FormFieldModel'),
        ActionEditorView = require('editor/form-editor/ActionEditorView'),
        TutorialView = require('tutorial/TutorialView');

    require('mixins/BackboneModal');
    require('mixins/SelectView');
    require('jquery-ui');

    var fieldTypesArr = {
        "text": [{
            text: "Single Line Text",
            value: "single-line-text"
        }, {
            text: "Paragraph Text",
            value: "paragraph-text"
        }, {
            text: "Dropdown",
            value: "dropdown"
        }, {
            text: "Option Boxes",
            value: "option-boxes"
        }, {
            text: "Password Text",
            value: "password-text"
        }],

        "email": [{
            text: "Email Box",
            value: "email-text"
        }],

        "number": [{
            text: "Single Line Text",
            value: "single-line-text"
        }, {
            text: "Dropdown",
            value: "dropdown"
        }, {
            text: "Option Boxes",
            value: "option-boxes"
        }],

        "button": [{
            text: "Button",
            value: "button"
        }],

        "image": [{
            text: "Image Uploader",
            value: "image-uploader"
        }],

        "file": [{
            text: "File Uploader",
            value: "file-uploader"
        }],

        "date": [{
            text: "Date Picker",
            value: "date-picker"
        }]

    };

    var FormEditorTemplates = {};

    FormEditorTemplates.field = [
        '<li id="field-<%= field.cid %>" class="field-li-item sortable li-<%= field.get(\'displayType\')%>"><label class="header"><%= field.get(\'label\') %> <% if(field.get(\'required\') && field.get(\'displayType\') != "button") { %>*<% } %></label><span class="form-item">',
        '<%= fieldRendered %>',
        '</span><span class="drag-icon"></span><span class="delete-field" id="delete-btn-field-<%= field.cid %>">Delete Field</span></li>'
    ].join('\n');

    FormEditorTemplates.submitField = [
        '<li id="field-<%= field.cid %>" class="field-li-item sortable li-<%= field.get(\'displayType\')%>"><label class="header"><%= field.get(\'label\') %></label><span class="form-item">',
        '<div class="btn"><%= field.get(\'placeholder\') %></div>',
        '</span><span class="drag-icon"></span></li>'
    ].join('\n');

    FormEditorTemplates.redirectActions = [
        '<% _(pages).each(function(page) {  %>',
        '<li class="action page-redirect" id="page-<%= page.cid %>">Go to <%= page.get("name") %><div class="add-to-list"></div></li>',
        '<% });%>'
    ].join('\n');

    FormEditorTemplates.relationalActions = [
        '<% _(possibleActions).each(function(action, ind) { %>',
        '<li class="action relations" id="action-<%= ind %>"><%= action.nl_description %><div class="add-to-list"></div></li>',
        '<% });%>'
    ].join('\n');

    FormEditorTemplates.template = [
        '<div class="">',
            '<div class="details-panel panel">',
            '</div><div class="form-panel panel">',
            '<small>You can click on field to see the details and drag them to arrange the display order</small>',
            '<ul class="form-fields-list">',
            '</ul>',
            '<% var field = _.last(form.get(\'fields\').models); var sortable = "not-sortable"; %>',
            FormEditorTemplates.submitField,
            '<% %>',
            '</div>',
            '<div class="add-field-panel"><div class="btn add-field-button"><span class="icon"></span>Add a New Field</div></div>',
        '</div>',
        '<div class="bottom-sect"><div class="q-mark"></div><div class="btn done">Done</div></div>'
    ].join('\n');


    FormEditorTemplates.displayTypes = [
        '<% _(fieldTypesArr[field.get("type")]).each(function(fieldType) { %>',
        '<li><label><input class="field-type" type="radio" name="types" value="<%= fieldType.value %>" <% if(field.get(\'displayType\') == fieldType.value) { var checked = true; %>checked<% } %>><%= fieldType.text %></label></li>',
        '<% }) %>'
    ].join('\n');

    FormEditorTemplates.newField = [
        '<form class="new-field-form">',
        '<label><b>Name of the field</b><br>',
        '<input class="new-field-name" type="text" placeholder="Field name...">',
        '</label>',
        '<label><b>Type of the Field</b><br>',
        '<input type="radio" name="field-type" id="type-text" value="text" checked="true"><label for="type-text" class="radio">Text</label><br  />',
        '<input type="radio" name="field-type" id="type-number" value="number"><label for="type-number" class="radio">Number</label><br  />',
        '<input type="radio" name="field-type" id="type-email" value="email"><label for="type-email" class="radio">Email</label><br  />',
        '<input type="radio" name="field-type" id="type-image" value="image"><label for="type-image" class="radio">Image</label><br  />',
        '<input type="radio" name="field-type" id="type-date" value="date"><label for="type-date" class="radio">Date</label><br  />',
        '<input type="radio" name="field-type" id="type-file" value="file"><label for="type-file" class="radio">File</label><br  />',
        '</label>',
        '<input type="submit" class="btn" value="Done">',
        '</form>'
    ].join('\n');

    FormEditorTemplates.details = [
        '<div class="label"><b>Label</b><br>',
        '<input class="field-label-input" id="field-label-<%= field.cid %>" type="text" placeholder="Field Label..." value="<%= field.get(\'label\') %>">',
        '</div>',
        '<div class="label"><b>Placeholder</b><br>',
        '<input class="field-placeholder-input" type="text" id="field-placeholder-<%= field.cid %>" placeholder="Field Placeholder..." value="<%= field.get(\'placeholder\') %>">',
        '</div>',
        '<% if(field.get("displayType") != "button") { %>',
        '<div class="label"><b>Required</b><br>',
        '<input type="radio" name="required" id="required" value="yes" <% if(field.get(\'required\')) print("checked"); %>><label for="required" class="radio">Yes</label>',
        '<input type="radio" name="required" id="not-required" value="no"><label for="not-required" class="radio">No</label>',
        '</div>',
        '<% } %>',
        '<div class="label"><b>Display Type</b>',
        '<ul class="field-types">',
        FormEditorTemplates.displayTypes,
        '</ul>',
        '</div>',
        '<div class="label options-list"></div>'
    ].join('\n');

    FormEditorTemplates.routeTemplate = [
        '<div class="line">',
        '<span><strong><%= route.get("role") %></strong> goes to </span>',
        '<select class="redirect-page" id="redirect-select-<%= route.cid %>">',
        '<% _(pages).each(function(page) { var selected = ""; if("internal://"+page.name == route.get("redirect")) { selected = "selected"; } %>',
        '<option value="<%= page.val %>" <%= selected %>><%= page.name %></option>',
        '<% }); %>',
        '</select>',
        '</div>'
    ].join('\n');


    var FormEditorView = Backbone.CardView.extend({
        tagName: 'div',
        // height: 600,
        // padding: 0,
        className: 'form-editor',

        events: {
            'click   .field-li-item': 'clickedField',
            'change  .field-type': 'changedFieldType',
            'keydown .field-placeholder-input': 'changedPlaceholder',
            'keydown input.field-label-input': 'changedLabel',
            'keyup   .field-placeholder-input': 'changedPlaceholder',
            'change input[name=required]': 'changedRequired',
            'keyup   input.field-label-input': 'changedLabel',
            'keyup  .options-input': 'changedOptions',
            'click .done': 'closeModal',
            'click .delete-field': 'deleteField',
            'click .q-mark': 'showTutorial',
            'click .add-field-button': 'clickedAddField',
            'click .new-field-option': 'newFormField',
            'submit .new-field-form': 'addNewField'
        },

        initialize: function(options) {
            _.bindAll(this);

            this.model = options.model;

            var entityName = this.model.get('table');
            var entityM = v1.currentApp.model.getTableModelWithName(entityName);

            this.entityModel = entityM;

            console.log(this.model);

            this.listenTo(this.model.get('fields'), 'add', this.fieldAdded);
            this.listenTo(this.model.get('fields'), 'remove', this.fieldRemoved);
            // this.listenTo(this.model.get('actions'), 'add', this.actionAdded);
            // this.listenTo(this.model.get('actions'), 'remove', this.actionRemoved);
            // this.listenTo(this.model, 'change:redirect', this.redirectAdded);
            // this.listenTo(this.model, 'change:action', this.reRenderFields);

            this.possibleActions = [];
            //this.model.getRelationalActions(v1State.getCurrentPage());

            //this.actionEditor = new ActionEditorView(this.model, this.entityModel);
            this.render();

            if (this.model.get('fields').models.length > 0) {
                this.selectedNew(_.first(this.model.get('fields').models));
            }
        },

        render: function(text) {
            var temp_context = {};
            temp_context.form = this.model;
            temp_context.pages = v1.currentApp.model.get('routes').models;
            temp_context.possibleEntities = [];

            // _.map(v1State.get('users').getCommonProps(), function(field) {
            //     return "CurrentUser." + field.name;
            // });
            var html = _.template(FormEditorTemplates.template, temp_context);
            

            var formEditorHTML = [
             '<div class="header">',
                '<div>',
                '<h2>Form Editor</h2>',
                '<div class="q-mark-circle"></div>',
                '</div>',
                '<ul class="tabs">',
                    '<li class="fields-li right-icon">',
                    '<span>Fields</span>',
                    '</li><li class="actions-li right-icon">',
                    '<span>Actions</span>',
                    '</li><li class="code-li right-icon">',
                    '<span>Code</span>',
                    '</li>',
                '</ul>',
            '</div>',
            '<div class="current-content">',
            html,
            '</div>'
            ].join('\n');

            this.el.innerHTML = formEditorHTML;

            this.renderFields();

            //this.actionEditor.setElement(this.$el.find('.action-panel')).render();

            $('.form-fields-list').sortable({
                stop: this.changedOrder,
                cancel: ".not-sortable",
                axis: "y"
            });

            this.$el.find('.fields-li').addClass('active');
            // if (this.model.isConstant()) {
            //     $('.add-field-button').remove();
            //     $('.delete-field').remove();
            // }

            return this;
        },

        renderFields: function() {
            var length = this.model.get('fields').length;
            this.model.get('fields').each(function(field, ind) {
                if (ind == (length - 1)) return;
                
                var fieldRendered = field.expand();
                var html = _.template(FormEditorTemplates.field, {
                    fieldRendered: fieldRendered,
                    field: field
                });

                this.$el.find('.form-fields-list').append(html);
            }, this);
        },

        reRenderFields: function() {
            this.$el.find('.form-fields-list').html('');
            this.renderFields();
        },

        newFormField: function(val) {

            if (val == "new") {
                this.renderNewFieldForm();
                return;
            }

            var fieldModel = this.entityModel.get('fields').get(val);
            var formFieldModel = new FormFieldModel({
                field_name: fieldModel.get('name'),
                displayType: "single-line-text",
                type: fieldModel.get('type'),
                label: fieldModel.get('name'),
                placeholder: fieldModel.get('name'),
                options: ""
            });


            if (fieldModel.get('type') == "email") {
                formFieldModel.set('displayType', "email-text");
            }
            if (fieldModel.get('type') == "image") {
                formFieldModel.set('displayType', "image-uploader");
            }
            if (fieldModel.get('type') == "file") {
                formFieldModel.set('displayType', "file-uploader");
            }
            if (fieldModel.get('type') == "date") {
                formFieldModel.set('displayType', "date-picker");
            }

            var ind = this.model.get('fields').models.length - 1;
            this.model.get('fields').add(formFieldModel, {
                at: ind
            });

        },

        fieldAdded: function(fieldModel) {
            console.log(fieldModel);
            var fieldRendered = fieldModel.expand();
            var html = _.template(FormEditorTemplates.field, {
                fieldRendered: fieldRendered,
                field: fieldModel
            });

            this.$el.find('.form-fields-list').append(html);
            this.selectedNew(fieldModel);
            this.$el.find('.form-panel').animate({
                scrollTop: this.$el.find('.form-panel')[0].scrollHeight
            });
        },

        fieldRemoved: function(fieldModel) {
            this.$el.find('#field-' + fieldModel.cid).remove();
        },

        selectedNew: function(fieldModel) {
            var html = _.template(FormEditorTemplates.details, {
                field: fieldModel,
                fieldTypesArr: fieldTypesArr
            });

            this.selected = fieldModel;
            this.listenTo(this.selected, 'change:displayType', this.reRenderDisplayType);
            this.listenTo(this.selected, 'change:placeholder', this.reRenderDisplayType);
            this.listenTo(this.selected, 'change:options', this.reRenderDisplayType);
            this.listenTo(this.selected, 'change:label', this.reRenderLabel);
            this.listenTo(this.selected, 'change:required', this.reRenderLabel);

            // this.$el.find('.details-panel').hide();

            this.$el.find('.details-panel').html(html);

            if (fieldModel.get('displayType') == "option-boxes" || fieldModel.get('type') == "dropdown") {
                curOptions = fieldModel.get('options');
                this.$el.find('.options-list').append('<b>Options</b><input class="options-input" placeholder="E.g. Cars,Birds,Trains..." type="text" value="' + curOptions + '">');
            }

            this.$el.find('.selected').removeClass('selected');
            this.$el.find('#field-' + fieldModel.cid).addClass('selected');
            // this.$el.find('.details-panel').fadeIn().css('display', 'inline-block');
            this.$el.find('.drag-icon').css({
                opacity: 0
            }).animate({
                opacity: 1
            });
            if (this.model.get("action") == "edit" && fieldModel.get('displayType') != "button") {
                this.$el.find('.field-placeholder-input').prop('disabled', true);
                this.$el.find('.field-placeholder-input').attr('disabled', 'disabled');
            }

            if (fieldModel.get('required')) {
                this.$el.find('#required').attr('checked', true);
            } else {
                this.$el.find('#not-required').attr('checked', true);
            }

        },

        clickedField: function(e) {
            e.preventDefault();
            var cid = String(e.target.id || e.target.parentNode.id || e.target.parentNode.parentNode.id).replace('field-', '');
            var fieldModel = this.model.get('fields').get(cid);
            this.selectedNew(fieldModel);
        },

        reRenderDisplayType: function() {
            var field = this.selected;
            $('#field-' + field.cid).find('.form-item').html(_.template(FieldTypes[field.get('displayType')], {
                field: field,
                value: ""
            }));
        },

        reRenderLabel: function() {
            var field = this.selected;
            var str = field.get('label');
            if (field.get('required')) str += ' *';
            $('#field-' + field.cid).find('label').html(str);
        },

        changedFieldType: function(e) {
            if (e.target.checked && this.selected) {
                var newType = e.target.value;
                this.selected.set('displayType', newType);

                var curOptions = (this.$el.find('.options-input').val() || '');
                this.$el.find('.options-list').html('');
                if (newType == "option-boxes" || newType == "dropdown") {
                    $('.details-panel').animate({
                        scrollTop: $('.details-panel').height()
                    }, "slow");
                    this.selected.set('options', curOptions);
                    this.$el.find('.options-list').append('<b>Options</b><input class="options-input" placeholder="E.g. Cars,Birds,Trains..." type="text" value="' + curOptions + '">');
                    $('.options-input').focus();
                }
            }

            if (e.target.checked && !this.selected) {
                this.$el.find('.details-panel').append('<div class="btn add-new-field-done">Add</div>');
            }
        },

        changedPlaceholder: function(e) {
            this.selected.set('placeholder', e.target.value);
            e.stopPropagation();
        },

        changedRequired: function(e) {
            var required = (e.target.value === "yes") ? true : false;
            this.selected.set('required', required);
            e.stopPropagation();
        },

        changedLabel: function(e) {
            this.selected.set('label', e.target.value);
            e.stopPropagation();
        },

        changedOptions: function(e) {
            var value = String(this.$el.find('.options-input').val()).trim();
            this.selected.set('options', value);
            e.stopPropagation();
        },

        changedOrder: function(e, ui) {
            var sortedIDs = $('.form-fields-list').sortable("toArray");

            var submitBtn = _.last(this.model.get('fields').models);
            this.model.get('fields').remove(submitBtn, {
                silent: true
            });

            for (var ii = 0; ii < sortedIDs.length; ii++) {
                var cid = sortedIDs[ii].replace('field-', '');
                var elem = this.model.get('fields').get(cid);
                this.model.get('fields').remove(elem, {
                    silent: true
                });
                this.model.get('fields').push(elem, {
                    silent: true
                });
            }

            this.model.get('fields').push(submitBtn, {
                silent: true
            });
            this.model.get('fields').trigger('change');
        },

        addNewField: function(e) {
            e.preventDefault();

            var name = this.$el.find('.new-field-name').val();
            if (name == '') return false;
            var type = this.$el.find('input:radio[name=field-type]:checked').val();

            var fieldModel = this.entityModel.get('fields').push({
                name: name,
                type: type
            });

            var formFieldModel = new FormFieldModel({
                field_name: fieldModel.get('name'),
                displayType: "single-line-text",
                type: fieldModel.get('type'),
                label: name,
                placeholder: name,
                options: ""
            });

            if (fieldModel.get('type') == "email") {
                formFieldModel.set('displayType', "email-text");
            }
            if (fieldModel.get('type') == "image") {
                formFieldModel.set('displayType', "image-uploader");
            }
            if (fieldModel.get('type') == "date") {
                formFieldModel.set('displayType', "date-picker");
            }
            if (fieldModel.get('type') == "file") {
                formFieldModel.set('displayType', "file-uploader");
            }

            var ind = this.model.get('fields').models.length - 1;
            this.model.get('fields').add(formFieldModel, {
                at: ind
            });

            $(e.target).hide();
            this.$el.find('.field-text').fadeIn();
        },

        deleteField: function(e) {
            var id = String(e.target.id).replace('delete-btn-field-', '');
            this.model.get('fields').remove(id);

            e.stopPropagation();
        },

        showTutorial: function() {
            new TutorialView([6, 1]);
        },


        clickedAddField: function(e) {
            console.log(this);
            console.log(this.entityModel);
            
            var list = this.entityModel.get('fields').filter(function(field) {
                return !field.isRelatedField();
            });
            
            list = _(list).map(function(field) {
                return {
                    name: field.get('name'),
                    val: field.cid
                };
            });
            list.push({
                name: "Create A New Field",
                val: "new"
            });

            this.fieldPicker = new Backbone.PickOneView(list, false);
            this.$el.find('.details-panel').html('');
            this.$el.find('.details-panel').append(this.fieldPicker.render().el);

            this.fieldPicker.on('submit', this.newFormField);
        },

        renderNewFieldForm: function() {
            this.$el.find('.details-panel').html(_.template(FormEditorTemplates.newField, {}));
        }

    });

    return FormEditorView;
});
define('editor/form-editor/LoginFormEditorView',[
  'models/FormFieldModel',
  'editor/form-editor/ActionEditorView',
  'tutorial/TutorialView',
  'mixins/BackboneModal',
  'mixins/SelectView',
  'jquery-ui'
],
function(FormFieldModel, ActionEditorView, TutorialView) {

  var LoginFormEditorView = Backbone.ModalView.extend({

    className: 'login-route-editor modal',
    padding: 0,
    css: 'form-editor',
    doneButton: true,

    events: {
      'change .redirect-page' : 'redirectChanged'
    },

    initialize: function(loginRoutes) {
      _.bindAll(this);
      this.model = loginRoutes;

      if(loginRoutes.length != v1State.get('users').length) {
        loginRoutes.reorganize();
      }

      this.render();
    },

    render: function() {
      this.el.innerHTML = "<h3>Login Editor</h3>";
      var pages = _.map(v1State.get('pages').getContextFreePages(), function(page) { return {name: page, val: 'internal://'+page}; });
      var userPages = _.map(v1State.get('pages').getPagesWithEntityName('User'), function(page) { return {name: page, val: 'internal://' + page +'/?User=CurrentUser'}; });
      pages = _.union(pages, userPages);
      this.model.each(function(route) {
        this.el.innerHTML += _.template(FormEditorTemplates.routeTemplate, {route: route, pages: pages });
      }, this);

      return this;
    },

    redirectChanged: function (e) {
      var cid = e.target.id.replace('redirect-select-','');
      var route = this.model.get(cid);

      console.log(e.target.value);
      route.set('redirect', e.target.value);
    }


  });


  return LoginFormEditorView;

});

define('editor/QueryEditorView',[
  'mixins/BackboneModal',
  'util'
],
function() {

  var TableQueryView = Backbone.ModalView.extend({
    className : 'query-modal modal',
    css : 'query-editor',
    title: "Query Editor",
    doneButton: true,
    padding: 0,

    events: {
      'change .fields-to-display'   : 'fieldsToDisplayChanged',
      'change .query-option'        : 'queryOptionChanged',
      'click .belongs-to-user'      : 'belongsToUserChanged',
      'click .nmr-rows'             : 'nmrRowsChanged',
      'keyup #first-nmr'          : 'nmrRowsNumberChanged',
      'change .sort-by'             : 'sortByChanged',
      'click .done-btn'             : 'closeModal'
    },
    initialize: function(widgetModel, containerType) {
      _.bindAll(this);

      this.widgetModel = widgetModel;
      this.containerType = containerType;
      this.model = widgetModel.get('data').get('container_info').get('query');
      this.entity = widgetModel.get('data').get('container_info').get('entity');

      if(this.containerType == "list") {
        this.title =  this.entity.get('name') + ' List Query Editor';
      }
      else {
        this.title =  this.entity.get('name') + ' Table Query Editor';
      }

      this.possibleQueries = this.getCreatePossibleQueries(this.entity.getRelationalFields());

      this.render();

      this.model.bind('change', this.changeDescription, this);
    },

    render: function() {

      var self = this;

      var checks = {};
      var rFirstNmr=5; rAllNmr = 0;
      var rFirst = '', rAll ='';

      if(this.model.get('numberOfRows') != -1) {
        rFirst = 'checked';
        rFirstNmr = this.model.get('numberOfRows');
        if(rFirstNmr === null) rFirstNmr = 5;
      }
      else {
        rAll = 'checked';
      }

      checks = {
        rFirstNmr : rFirstNmr,
        rFirst    : rFirst,
        rAll      : rAll,
        rAllNmr   : rAllNmr,
        nLang     : self.getNLdescription()
      };

      var contentHTML = _.template(Templates.queryView, {entity: self.entity, query: self.model, queries: self.possibleQueries, c: checks, type: self.containerType });
      this.el.innerHTML = contentHTML;

      $('select option[value="'+ this.model.get('sortAccordingTo')+'"]').attr('selected', 'selected');

      this.renderSelectedQueries();
      return this;
    },

    renderSelectedQueries: function () {

      this.model.get('where').each(function(whereModel) {
        this.possibleQueries.each(function(possibleWhere) {

          if(whereModel.get('equal_to') == possibleWhere.get('equal_to') &&
             whereModel.get('field_name') == possibleWhere.get('field_name')) {
            var input = document.getElementById('query-' + possibleWhere.cid);
            input.checked = true;
          }

        }, this);
      }, this);
    },

    changeDescription: function() {
      //util.get('query-description').innerHTML = this.getNLdescription();
    },

    fieldsToDisplayChanged: function(e) {
      var fieldsArray = _.clone(this.model.get('fieldsToDisplay'));

      if(e.target.checked) {
        fieldsArray.push(e.target.value);
        fieldsArray = _.uniq(fieldsArray);
      }
      else {
        fieldsArray = _.difference(fieldsArray, e.target.value);
      }

      this.model.set('fieldsToDisplay', fieldsArray);
    },

    belongsToUserChanged: function(e) {
      if(e.target.checked && e.target.value == "true") {
        this.model.get('where').push({
          "equal_to": "CurrentUser",
          "field_name": "user"
        });
      }
      else {
        this.model.get('where').removeClauseWithName('user');
      }
    },

    queryOptionChanged: function (e) {
      var cid = e.target.id.replace('query-', '');
      var queryM = this.possibleQueries.get(cid);

      if(e.target.checked) {
        this.model.get('where').push(queryM.serialize());
      }
      else {
        this.model.get('where').each(function(whereModel) {
          if(whereModel.get('equal_to') == queryM.get('equal_to') &&
             whereModel.get('field_name') == queryM.get('field_name')) {
            this.model.get('where').remove(whereModel.cid);
          }
        }, this);
      }
    },

    getCreatePossibleQueries: function (fieldModels) {
      var possibleQueries = new Backbone.Collection();

      _(v1State.getCurrentPage().getContextEntities()).each(function(entityName) {
        _(fieldModels).each(function(fieldModel) {
          if(entityName === fieldModel.get('entity_name')) {
            var query = {
              equal_to  : "Page." + fieldModel.get('entity_name'),
              field_name: fieldModel.get('name')
            };
            query.nl_description = "Show " + util.pluralize(this.entity.get('name')) + " where "+ fieldModel.get('name') + " is equal to "+ fieldModel.get('entity_name') + ' of the current page.';
            possibleQueries.push(query);
          }
        }, this);
      }, this);

      _(fieldModels).each(function(fieldModel) {
        if("User" === fieldModel.get('entity_name')) {
          var query = {
            equal_to  : "CurrentUser" ,
            field_name: fieldModel.get('name')
          };
          query.nl_description = "Show " + util.pluralize(this.entity.get('name')) + " where "+ fieldModel.get('name') + " is equal to the current user.";
          possibleQueries.push(query);
        }
      }, this);

      return possibleQueries;
    },

    nmrRowsChanged: function(e) {
      if(e.target.checked) {
        var val = util.get('first-nmr').value;
        this.model.set('numberOfRows', parseInt(val,0));
      }
    },

    nmrRowsNumberChanged: function(e) {
      util.get('first-rows').checked = true;
      this.model.set('numberOfRows', parseInt(e.target.value,0));
      e.stopPropagation();
    },

    sortByChanged: function(e) {
      this.model.set('sortAccordingTo', e.target.value);
    },

    getNLdescription: function() {
      var self = this;
      var str = "This table shows ";

      if(self.model.get('fieldsToDisplay').length === 0) {
        str += 'no data. Please choose the fields from below.';
        return str;
      }

      _(self.model.get('fieldsToDisplay')).each(function(field, ind) {

        if(self.model.get('fieldsToDisplay').length == 1) {
          str += field + ' ';
        }
        else if(self.model.get('fieldsToDisplay').length > 1 && ind == self.model.get('fieldsToDisplay').length-1) {
          str += 'and '+field;
          return;
        }
        else {
          str += field + ', ';
        }
      });

      str += " of";
      if(this.model.get('numberOfRows') === 0) {
        str += " all " + self.model.entity.get('name')+"s";
      }
      else if(this.model.get('numberOfRows') == 1) {
        str += " a " + self.model.entity.get('name');
      }
      else {
        str += " "+ String(self.model.get('numberOfRows')).replace('-',' ').toLowerCase() + " " + self.model.entity.get('name')+"s";
      }

      str += " sorted "+ String(self.model.get('sortAccordingTo')).replace('-',' ').toLowerCase()+ ".";

      return str;
    }

  });

  return TableQueryView;
});

define('editor/CustomWidgetEditorModal',['require','exports','module','ace','mixins/BackboneCardView'],function(require, exports, module) {

    require('ace');
    require('mixins/BackboneCardView');


    var CustomWidgetEditorModal = Backbone.CardView.extend({
        className: 'custom-widget-editor',
        padding: 0,
        title: "Custom Widget Editor",
        // doneButton: true,

        events: {
            'click .sub-title': 'toggle',
        },

        initialize: function(widgetModel) {
            _.bindAll(this);
            this.model = widgetModel;
            this.render();
        },

        render: function() {
            var self = this;
            var htmlStr = this.model.get('htmlC') || '';
            var cssStr = this.model.get('cssC') || '';
            var jsStr = this.model.get('jsC') || '';

            var content = [
                '<div class="sect"><div class="sub-title" id="e-html">» HTML</div><div id="edit-html-inp" style="background-color:#eee; height: 400px; width:100%; position:relative;"></div></div>',
                '<div class="sect"><div class="sub-title" id="e-js">» JS</div><div id="edit-js-inp" style="position:relative; background-color:#eee; height: 400px; width:100%;"></div></div>',
                '<div class="sect"><div class="sub-title" id="e-css">» CSS</div><div id="edit-css-inp" style="position:relative; background-color:#eee; height: 400px; width:100%;"></div></div>',
                '<a style="position: relative; width:100%; display:block; text-align: center; padding: 8px; color: #666; margin-top:20px;" href="/resources/tutorials/custom-widget/" rel="external" target="_blank">Guide on using the Custom Widget</a>'
            ].join('\n');

            this.el.innerHTML = content;
            this.el.style.overflow = "hidden";

            this.editors = {};

            this.editors["e-css"] = ace.edit("edit-css-inp");
            this.editors["e-css"].getSession().setMode("ace/mode/css");
            this.editors["e-css"].setValue(cssStr, -1);

            this.editors["e-html"] = ace.edit("edit-html-inp");
            this.editors["e-html"].getSession().setMode("ace/mode/html");
            this.editors["e-html"].setValue(htmlStr, -1);

            this.editors["e-js"] = ace.edit("edit-js-inp");
            this.editors["e-js"].getSession().setMode("ace/mode/javascript");
            this.editors["e-js"].setValue(jsStr, -1);

            return this;
        },

        toggle: function(e) {
            if ($(e.currentTarget.parentNode).hasClass('expanded')) return this.shrink(e);
            this.$el.find('.expanded').removeClass('expanded');
            $(e.currentTarget.parentNode).addClass('expanded');
            this.editors[e.currentTarget.id].focus();
        },

        shrink: function(e) {
            $(e.currentTarget.parentNode).removeClass('expanded');
        },

        onClose: function() {
            this.model.set('cssC', this.editors["e-css"].getValue());
            this.model.set('jsC', this.editors["e-js"].getValue());
            this.model.set('htmlC', this.editors["e-html"].getValue());
            this.model.trigger('custom_edited');
        }

    });

    return CustomWidgetEditorModal;
});
define('mixins/GenericModelFieldEditor',[
  'react',
  'mixins/BackboneModal',
],
function(React) {

    var GenericModelFieldEditor = Backbone.ModalView.extend({
        className : 'modal generic-editor',
        width  : 600,
        height: 400,
        padding: 0,
        doneButton: true,
        contentHeight: "auto",

        initialize: function(options){
          _.bindAll(this);
          this.options = options;
          this.model = options.model;
          this.key =  options.key;
          this.title = options.title;
          this.render();
        },

        render: function() {
            var model = this.model;
            var key = this.key;
            var options = this.options;

            var Component = {};

            if(this.options.radioOptions) {
                
                Component =  React.createClass({

                    getInitialState: function() {
                        console.log(model.get(key));
                        return { currentVal : model.get(key) };
                    },

                    handleChange: function(event) {
                        this.setState({currentVal: event.target.value});
                        model.set(key, event.target.value);
                        console.log(key, event.target.value);
                    },

                    render: function() {
                        var optionsEls = _.map(options.radioOptions, function(radioOpt) {
                                
                                if(radioOpt === null) return null;

                                return React.DOM.li({className: "full-width hi2", children:[
                                    React.DOM.label({ className:"span30", children: [
                                        radioOpt.text,
                                        React.DOM.input({type: "radio", value: radioOpt.val, checked: (this.state.currentVal == radioOpt.val), onChange: this.handleChange, className: "span2"})
                                    ] })
                                ]});
                        }, this);

                        optionsEls = _.reject(optionsEls, function(el) { return el === null; });
                        return React.DOM.div({
                            className: "padding1",
                            children:[
                                React.DOM.div({children: options.question, className:"full-width"}),
                                React.DOM.ul({className:"no-bullets full-width", children: optionsEls})
                            ]
                        });
                    }
                });
            }
            else if (this.options.inputPlaceholder) {
                 Component =  React.createClass({

                    getInitialState: function() {
                        return { hasLink: model.get('data').get('container_info').has('pageLink'),
                                 link: (model.get('data').get('container_info').get('pageLink')||"")};
                    },

                    handleChange: function(event) {
                        this.setState({hasLink: true});
                        this.setState({link: event.target.value});
                        model.get('data').get('container_info').set('pageLink', event.target.value);
                    },

                    unsetLink: function() {
                        this.setState({hasLink: false});
                        model.get('data').get('container_info').unset('pageLink');
                    },

                    setLink: function() {
                        this.setState({hasLink: true});
                        model.get('data').get('container_info').set('pageLink', this.state.link);
                    },

                    render: function() {
                        return React.DOM.div({
                            className: "facebook-share-editor padding1",
                            children:[
                                React.DOM.div({children:"Please add the link of your Facebook Page if you would like to connect it to the Facebook button.", className:"full-width"}),
                                React.DOM.ul({className:"no-bullets", children: [
                                    React.DOM.li({className: "full-width", children:[
                                        React.DOM.input({type: "radio", checked: this.state.hasLink, onChange: this.setLink}),
                                        React.DOM.input({type: "text", value: this.state.link, onChange: this.handleChange, onFocus: this.setLink, className:"span24", placeholder: "Copy Paste the link here..."})
                                    ]}),
                                    React.DOM.li({className: "full-width", children:[
                                        React.DOM.input({type: "radio", checked: !this.state.hasLink, onChange: this.unsetLink}),
                                    ]}),
                                ]})
                            ]
                        });
                    }
                });
            }

            React.renderComponent(Component({}), this.el);

            return this;
        }
    });

  return GenericModelFieldEditor;
});

define('editor/WidgetEditorView',['require','exports','module','mixins/BackboneUI','util','editor/WidgetSettingsView','editor/WidgetContentEditorView','editor/WidgetLayoutEditorView','editor/ImageSliderEditorView','editor/WidgetClassPickerView','editor/SearchEditorView','editor/FacebookShareEditor','editor/VideoEmbedEditor','editor/list-editor/RowGalleryView','editor/form-editor/FormEditorView','editor/form-editor/LoginFormEditorView','editor/QueryEditorView','editor/CustomWidgetEditorModal','mixins/GenericModelFieldEditor'],function(require, exports, module) {

    'use strict';

    require('mixins/BackboneUI');
    require('util');

    var WidgetSettingsView = require('editor/WidgetSettingsView');
    var WidgetContentEditorView = require('editor/WidgetContentEditorView');
    var WidgetLayoutEditorView = require('editor/WidgetLayoutEditorView');
    var ImageSliderEditorView = require('editor/ImageSliderEditorView');
    var WidgetClassPickerView = require('editor/WidgetClassPickerView');
    var SearchEditorView = require('editor/SearchEditorView');
    var FacebookShareEditor = require('editor/FacebookShareEditor');
    var VideoEmbedEditor = require('editor/VideoEmbedEditor');
    var RowGalleryView = require('editor/list-editor/RowGalleryView');
    var FormEditorView = require('editor/form-editor/FormEditorView');
    var LoginFormEditorView = require('editor/form-editor/LoginFormEditorView');
    var QueryEditorView = require('editor/QueryEditorView');
    var CustomWidgetEditorModal = require('editor/CustomWidgetEditorModal');
    var GenericModelFieldEditor = require('mixins/GenericModelFieldEditor');

    var WidgetEditorView = Backbone.UIView.extend({

        className: 'widget-editor animated',
        id: 'widget-editor',
        tagName: 'div',
        css: 'widget-editor',
        type: 'widget',
        subviews: [],

        events: {
            'click .settings': 'openSettingsView',
            'click .edit-slides-button': 'openSlideEditor',
            'click .query-editor-btn': 'openQueryEditor',
            'click .edit-row-btn': 'openRowEditor',
            'click .form-editor-btn': 'openFormEditor',
            'click .pick-style': 'openStylePicker',
            'click .search-editor-btn': 'openSearchEditor',
            'click .edit-login-form-btn': 'openLoginEditor',
            'click .link-to-page-button': 'openFBShareEditor',
            'click .video-link-button': 'openVideoEmbedEditor',
            'click .done-editing': 'closeEditingMode',
            'click .delete-button': 'clickedDelete',
            'click .done-text-editing': 'clickedDoneTextEditing',
            'click .edit-custom-widget-btn': 'openCustomWidgetEditor',
            'click .edit-itemname-btn': 'clickedEditItemName',
            'click': 'clicked',
            'change select': 'mouseup'
        },

        initialize: function() {
            _.bindAll(this);
            this.subviews = [];
            util.loadCSS(this.css);
            this.model = null;
        },

        setModel: function(widgetModel) {
            if (this.model) { this.unbindModel(widgetModel); }

            this.model = widgetModel;

            this.listenTo(this.model, 'startEditing', this.startedEditing);
            this.listenTo(this.model, 'stopEditing cancelEditing', this.stoppedEditing);
            this.listenTo(this.model, 'doubleClicked', this.doubleClicked);
            this.listenTo(this.model, 'reselected', this.show);
            this.listenTo(this.model, 'deselected', this.clear);

            return this;
        },

        unbindModel: function(model) {
            this.stopListening(model, 'startEditing', this.startedEditing);
            this.stopListening(model, 'stopEditing cancelEditing', this.stoppedEditing);
            this.stopListening(model, 'doubleClicked', this.doubleClicked);
            this.stopListening(model, 'reselected', this.show);
            this.stopListening(model, 'deselected', this.clear);
        },

        render: function() {
            this.hide();
            return this;
        },

        setupScrollEvents: function() {
            var self = this;
            var timer;
            $(innerDoc).bind('scroll', function() {
                clearTimeout(timer);
                timer = setTimeout(refresh, 150);
                self.hide();
            });

            var refresh = function() {
                if (!self.model) return;
                self.show();
            };

        },

        display: function() {
            if (!this.model) return;

            this.fillContent();
            this.show();
        },

        show: function() {
            if (!this.model) return;

            var location = this.getLocation();
            this.location = location;
            this.el.className += ' ' + location;

            var iframe = document.getElementById('page');
            var innerDoc = iframe.contentDocument || iframe.contentWindow.document;
            var element = innerDoc.getElementById('widget-wrapper-' + this.model.cid);

            if (!element) return;

            var offsetFrame = util.getWindowRelativeOffset(window.document, iframe);
            var offset = util.getWindowRelativeOffset(window.document, element);

            var leftDist = offset.left + offsetFrame.left;
            var topDist = offset.top + offsetFrame.top;

            this.$el.find('.arw').remove();

            switch (this.location) {
                case "right":
                    this.$el.append('<div class="left-arrow arw"></div>');
                    leftDist += element.getBoundingClientRect().width;
                    this.$el.addClass('fadeInRight');

                    break;
                case "bottom":
                    this.$el.append('<div class="top-arrow arw"></div>');
                    topDist += element.getBoundingClientRect().height;
                    this.$el.addClass('fadeInUp');

                    break;
                case "left":
                    this.$el.append('<div class="right-arrow arw"></div>');
                    this.$el.addClass('fadeInLeft');
                    break;
                case "top":
                    // not supposed to happen
                    break;
            }
            this.$el.show();


            this.el.style.left = leftDist + 'px';
            this.el.style.top = topDist + 'px';

            this.model.trigger('display-widget-editor');

            return this;
        },

        fillContent: function() {
            var action = "";
            var type = this.model.get('type');

            this.layoutEditor = new WidgetLayoutEditorView(this.model);
            this.el.appendChild(this.layoutEditor.el);

            if (this.model.has('className')) {
                this.widgetClassPickerView = new WidgetClassPickerView(this.model);
                this.listenTo(this.widgetClassPickerView, 'change', this.classChanged);
                this.el.appendChild(this.widgetClassPickerView.el);
                this.el.appendChild(this.renderButtonWithText('pick-style', 'Pick Style'));
            }

            if (this.model.has('href') || this.model.has('src')) {
                this.contentEditor = new WidgetContentEditorView(this.model, this);
                this.el.appendChild(this.contentEditor.el);
            }

            if (type == "custom-widget") {
                this.el.appendChild(this.renderButtonWithText('edit-custom-widget-btn', 'Edit Custom Widget'));
            }

            this.el.appendChild(this.renderSettingsAndDelete('edit-custom-widget-btn', 'Edit Custom Widget'));
        },

        renderButtonWithText: function(className, buttonText) {
            return this.renderButtonWithWidthCustomWidth(className, buttonText, 230);
        },

        renderButtonWithWidthCustomWidth: function(className, buttonText, width) {
            var li = document.createElement('ul');
            li.className = 'pad w-section section-' + className;
            li.innerHTML += '<span class="option-button tt ' + className + '" style="width:' + width + 'px; display: inline-block;">' + buttonText + '</span>';
            return li;
        },

        renderButtonWithDeleteButtonandText: function(className, buttonText) {
            var li = document.createElement('ul');
            li.className = 'w-section section-' + className;
            li.innerHTML += '<span class="' + className + '  option-button tt" style="width:190px; display: inline-block;">' + buttonText + '</span><span id="delete-widget" class="option-button delete-button tt" style="width:34px;"></span>';
            return li;
        },

        renderSettingsAndDelete: function() {
            var li = document.createElement('ul');
            li.className = 'w-section';
            li.innerHTML += '<span id="delete-widget" class="option-button delete-button tt"></span><span class="option-button tt settings"></span>';
            return li;
        },

        openStylePicker: function(e) {
            this.hideSubviews();
            this.widgetClassPickerView.show();
            this.widgetClassPickerView.expand();
        },

        openFormEditor: function() {
            new FormEditorView({
                model: this.model
            });
        },

        openLoginEditor: function() {
            var loginRoutes = this.model.getLoginRoutes();
            new LoginFormEditorView(loginRoutes);
        },

        openSlideEditor: function() {
            new ImageSliderEditorView(this.model);
        },

        openFBShareEditor: function() {
            new FacebookShareEditor(this.model);
        },

        openVideoEmbedEditor: function() {
            new VideoEmbedEditor(this.model);
        },

        openQueryEditor: function() {
            var type = 'table';
            if (this.model.get('data').get('container_info').has('row')) {
                type = 'list';
            }

            new QueryEditorView(this.model, type);
        },

        openRowEditor: function() {
            this.hideSubviews();
            this.el.appendChild(this.renderButtonWithWidthCustomWidth('done-editing', 'Done Editing', 190));
            this.el.style.width = '200px';
            var entity = this.model.get('data').get('container_info').get('entity');
            this.listGalleryView = document.createElement('div');
            this.listGalleryView.className = 'elements-list';

            var galleryView = new RowGalleryView(this.model, this.location);
            this.subviews.push(galleryView);

            this.listGalleryView.appendChild(galleryView.render().el);
            this.el.appendChild(this.listGalleryView);
        },

        openSearchEditor: function() {
            new SearchEditorView(this.model.get('data').get('searchQuery'));
        },

        openCustomWidgetEditor: function() {
            new CustomWidgetEditorModal(this.model);
        },

        openSettingsView: function() {
            new WidgetSettingsView(this.model).render();
        },

        closeEditingMode: function() {
            this.$el.find('.section-done-editing').remove();
            this.el.style.width = '';
            $(this.listGalleryView).remove();
            this.showSubviews();
            this.model.trigger('editModeOff');
        },

        clickedDoneTextEditing: function() {
            this.model.trigger('stopEditing');
        },

        clickedEditItemName: function() {
            var self = this;

            var context = self.model.get('context').first().get('context');

            new GenericModelFieldEditor({

                title: "Item Name Editor",
                question: "What should show up as the name of the item on Paypal?",
                model: self.model.get('data').get('container_info'),
                key: "item_name",
                radioOptions: v1State.getTableModelWithName(self.model.get('data').get('entity')).get('fields').map(function(field) {
                    if (field.get('type') != "text") return null;
                    return {
                        text: field.get('name'),
                        val: '{{' + context + '.' + field.get('name') + '}}'
                    };
                })
            });
        },

        classChanged: function() {
            this.showSubviews();
            this.widgetClassPickerView.$el.hide();
        },

        startedEditing: function() {
            console.trace();
            this.hideSubviews();
            this.el.appendChild(this.renderButtonWithText('done-text-editing', 'Done Editing'));
        },

        stoppedEditing: function() {
            $('.btn-toolbar').remove();
            $('.section-done-text-editing').remove();
            this.showSubviews();
        },

        clear: function() {
            if (this.contentEditor) this.contentEditor.clear();
            if (this.layoutEditor) this.layoutEditor.clear();
            if (this.infoEditor) this.infoEditor.clear();
            $('.btn-toolbar').remove();

            _(this.subviews).each(function(subview) {
                subview.close();
            });
            this.el.innerHTML = '';
            this.el.style.width = '';

            this.unbindModel(this.model);

            this.model = null;

            this.hide();
        },

        hide: function() {
            this.$el.removeClass('left');
            this.$el.removeClass('right');
            this.$el.removeClass('bottom');

            this.$el.removeClass('fadeInBottom');
            this.$el.removeClass('fadeInUp');
            this.$el.removeClass('fadeInLeft');
            this.$el.removeClass('fadeInRight');
            this.$el.hide();
        },

        setTempContent: function(domNode) {
            this.tempContent = domNode;
            this.hideSubviews();
            this.el.appendChild(domNode);
        },

        removeTempContent: function() {
            if (this.tempContent) this.el.removeChild(this.tempContent);
            this.showSubviews();
        },

        showSubviews: function() {
            //if(this.widgetClassPickerView) this.widgetClassPickerView.$el.fadeIn();
            if (this.contentEditor) this.contentEditor.$el.fadeIn();
            if (this.layoutEditor) this.layoutEditor.$el.fadeIn();
            if (this.infoEditor) this.infoEditor.$el.fadeIn();
            this.$el.find('.section-style-editor').fadeIn();
            this.$el.find('.section-form-editor-btn').fadeIn();
            this.$el.find('.section-query-editor-btn').fadeIn();
            this.$el.find('.section-edit-query-btn').fadeIn();
            this.$el.find('.section-edit-row-btn').fadeIn();
            this.$el.find('.section-delete-button').fadeIn();
            this.$el.find('.section-pick-style').fadeIn();
            this.$el.find('.section-edit-login-form-btn').fadeIn();
        },

        hideSubviews: function() {
            if (this.widgetClassPickerView) this.widgetClassPickerView.$el.hide();
            if (this.contentEditor) this.contentEditor.$el.hide();
            if (this.layoutEditor) this.layoutEditor.$el.hide();
            if (this.infoEditor) this.infoEditor.$el.hide();
            this.$el.find('.section-edit-login-form-btn').hide();
            this.$el.find('.section-style-editor').hide();
            this.$el.find('.section-form-editor-btn').hide();
            this.$el.find('.section-query-editor-btn').hide();
            this.$el.find('.section-edit-query-btn').hide();
            this.$el.find('.section-edit-row-btn').hide();
            this.$el.find('.section-delete-button').hide();
            this.$el.find('.section-pick-style').hide();
        },

        getLocation: function() {
            if (this.defaultLocation) return this.defaultLocation;

            var layout = this.model.get('layout');
            var rightCoor = layout.get('left') + layout.get('width');

            var pageHeight = $('#page-wrapper').height();
            var widgetBottom = layout.get('top') + layout.get('height');

            if (widgetBottom + 8 > pageHeight) {
                if ((12 - rightCoor) < 2) return "left";
                return "right";
            }

            if (layout.get('height') < 22) {
                return "bottom";
            }

            if ((12 - rightCoor) < 2) return "left";
            return "right";
        },

        doubleClicked: function() {
            if (this.model.getForm() && !this.model.isLoginForm()) {
                this.openFormEditor();
            }
            if (this.model.getLoginRoutes()) {
                this.openLoginEditor();
            }
            if (this.model.get('type') == "imageslider") {
                this.openSlideEditor();
            }
        },

        clickedDelete: function() {
            if (this.model) {
                this.model.remove();
            }
        },

        clicked: function(e) {
            e.stopPropagation();
        },

        mousedown: function(e) {
            mouseDispatcher.isMousedownActive = true;
        },

        mouseup: function() {
            mouseDispatcher.isMousedownActive = false;
        }

    });

    return WidgetEditorView;

});
define('app/pages/HeaderEditorView',[
        'mixins/DialogueView',
        'mixins/BackboneModal',
    ],
    function(DialogueView) {

        var HeaderEditorView = Backbone.ModalView.extend({
            padding: 0,
            width: 600,
            id: 'url-editor',
            //height: 150,
            events: {
                'keyup #header-editor': 'headerContentChanged',
            },

            initialize: function(pageModel) {
                _.bindAll(this);

                this.model = pageModel;
                this.render();
            },

            render: function() {
                console.log(this.model.toJSON());
                var template = '<textarea id="header-editor" style="width:100%; height: 400px;"><%= head %></textarea>';
                this.el.innerHTML = _.template(template, this.model.toJSON());
                this.$editor = this.$el.find('#header-editor');
            },

            headerContentChanged: function() {
                this.model.set('head', this.$editor.val());
            }

        });

        return HeaderEditorView;
    });
define('app/pages/PageView',['require','exports','module','app/pages/UrlView','mixins/SimpleModalView','mixins/DialogueView','app/pages/HeaderEditorView','util','backbone'],function(require, exports, module) {

    'use strict';

    var UrlView = require('app/pages/UrlView');
    var SimpleModalView = require('mixins/SimpleModalView');
    var DialogueView = require('mixins/DialogueView');
    var HeaderEditorView = require('app/pages/HeaderEditorView');

    require('util');
    require('backbone');

    var tempPage = [
        '<div class="top-row">',
        '<div class="cross" id="close-page-info">×</div>',
        '<div class="title"><%= page_name %> Info</div>',
        '</div>',
        '<div class="page-menu">',
        '<a class="delete item" <% if(disable_edit) { %>style="color: #999"<% } %>><i class="icon-delete"></i>Delete Page</a>',
        '<div class="edit-url item" <% if(disable_edit) { %>style="color: #999"<% } %>><i class="icon-url"></i>Edit URL</div>',
        '<div class="edit-header item" <% if(disable_edit) { %>style="color: #999"<% } %>><i class=""></i>Edit Header</div>',
        '<span class="context-text edit-url"><%= context_text %></span>',
        '</div>'
    ].join('\n');

    var tempMenu = [
        '<span class="span24 hi6">',
        '<h4 class="hi2 span12 hoff1 offset2">Access Level</h4>',
        '<select class="span12 offset2" id="access_level">',
        '<option <% if(access_level == \'all\') { %> selected <% } %> value="all">Everyone</option>',
        '<option <% if(access_level == \'users\') { %> selected <% } %> value="users">All Users</option>',
        // '<% _.each(user_roles, function(role) { %>',
        //   '<option <% if(access_level == role) { %> selected <% } %> value="<%=role%>">Only <%= role %></option>',
        // '<% }); %>',
        '</select>',
        '</div>'
    ].join('\n');


    var PageView = Backbone.View.extend({
        el: null,
        tagName: 'li',
        className: 'page-view hoff2 offsetr1 pane hi22',
        expanded: false,
        events: {
            'click .delete': 'deletePage',
            'change #access_level': 'accessLevelChanged',
            'click .edit-url': 'renderUrl',
            'click .edit-header': 'clickedEditHeader'
        },

        initialize: function(routeModel, templateModel, ind, isMobile) {
            _.bindAll(this);

            this.model = routeModel;
            this.ind = ind;
            this.isMobile = isMobile;
            this.urlModel = routeModel.get('url');
            this.listenTo(this.model, 'remove', this.close, this);

            this.templateModel = templateModel;
        },

        render: function() {
            var page_context = {};
            page_context.page_name = this.model.get('name');
            page_context.ind = this.ind;
            page_context.context_text = this.model.getContextSentence();
            // if this is the homepage view,
            // mark 'edit url' link as disabled
            page_context.disable_edit = (this.model.get('name') === 'Homepage') ? true : false;

            var page = _.template(tempPage, page_context);
            this.el.innerHTML += page;

            this.renderMenu();
            return this;
        },

        renderUrl: function() {
            // homepage url can't be edited
            if (this.model.get('name') === 'Homepage') {
                return false;
            }
            var newView = new UrlView(this.urlModel, this.model);
        },

        renderMenu: function() {
            var page_context = {};
            page_context = this.model.attributes;
            page_context.page_name = this.model.get('name');
            page_context.ind = this.ind;
            page_context.user_roles = v1State.get('users').map(function(userModel) {
                return userModel.get('name');
            });

            //var page = _.template(tempMenu, page_context);
            var span = document.createElement('span');
            //span.innerHTML = page;
            span.innerHTML = "There will be more info here";

            this.el.appendChild(span);
        },

        accessLevelChanged: function(e) {
            this.model.set('access_level', e.target.value);
        },

        deletePage: function() {
            if (this.model.get('name') == "Homepage" || this.model.get('name') == "Registration Page") {
                new SimpleModalView({
                    text: "The Hompage is an essential part of " + "your application, and can't be deleted."
                });

                return;
            }
            this.askToDelete();
        },

        askToDelete: function() {

            var translateTypetoNL = function(str) {
                if (str == "node") {
                    str = "Widget";
                }

                return str;
            };

            var coll = this.model.collection;
            var model = this.model;

            var widgets = v1State.getWidgetsRelatedToPage(this.model);
            var links = v1State.getNavLinkRelatedToPage(this.model);

            var widgetsNLString = "";
            if (widgets.length) {
                var widgetsNL = _.map(widgets, function(widget) {
                    return translateTypetoNL(widget.widget.get('type')) + ' on ' + widget.pageName;
                });
                widgetsNLString = widgetsNL.join('<br>');

            }

            var linksNLString = "";
            if (links.length) {
                var linksNL = _.map(links, function(link) {
                    return 'Link on ' + link.section + ' of ' + link.pageName;
                });
                linksNLString = linksNL.join('<br>');
            }

            if (!links.length && !widgets.length) {
                coll.remove(model);
            } else {

                new DialogueView({
                    text: "The related widgets listed below will be deleted with this page. Do you want to proceed? <br><br> " + widgetsNLString + linksNLString
                }, function() {

                    coll.remove(model.cid);

                    _.each(widgets, function(widget) {
                        widget.widget.collection.remove(widget.widget);
                    });

                    _.each(links, function(link) {
                        link.link.collection.remove(link.link);
                    });
                });
            }

        },

        clickedEditHeader: function() {
            new HeaderEditorView(this.templateModel);
        },

        expand: function() {
            this.el.className += ' expanded';
            this.el.style.width = "280px";
            this.expanded = true;
        },

        hide: function() {
            this.el.style.width = "";
            this.$el.removeClass('expanded');
            this.expanded = false;
        }
    });

    return PageView;
});
var HomepageTemp = {
    "name": "Homepage",
    "url": {
        "urlparts": []
    },
    "access_level": "all",
    "uielements": [
        {
            "type": "node",
            "layout": {
                "top": 4,
                "left": 1,
                "height": 4,
                "width": 3,
                "t_padding": 0,
                "b_padding": 0,
                "l_padding": 0,
                "r_padding": 0,
                "alignment": "left"
            },
            "data": {
                "nodeType": "headerTexts",
                "style": "font-size: 32px;\nfont-weight: bold;",
                "isSingle": false,
                "content_attribs": {},
                "hoverStyle": "",
                "class_name": "header-3",
                "content": "Twitterly",
                "tagName": "h1",
                "activeStyle": ""
            }
        },
        {
            "type": "node",
            "layout": {
                "top": 10,
                "left": 1,
                "height": 6,
                "width": 4,
                "t_padding": 0,
                "b_padding": 0,
                "l_padding": 0,
                "r_padding": 0,
                "alignment": "left"
            },
            "data": {
                "nodeType": "texts",
                "tagName": "p",
                "content_attribs": {},
                "content": "Like Twitter, but better. It let's you know what's going on around you.",
                "isSingle": false,
                "style": "",
                "hoverStyle": "",
                "activeStyle": "",
                "class_name": "normal-text"
            }
        },
        {
            "type": "node",
            "layout": {
                "top": 17,
                "left": 1,
                "height": 14,
                "width": 4,
                "t_padding": 0,
                "b_padding": 0,
                "l_padding": 0,
                "r_padding": 0,
                "alignment": "left"
            },
            "data": {
                "nodeType": "images",
                "style": "",
                "isSingle": true,
                "content_attribs": {
                    "src": "https://www.filepicker.io/api/file/qwGPCIr9QiSrPuGUKuj1"
                },
                "hoverStyle": "",
                "class_name": "img-height-fixed",
                "content": "",
                "tagName": "img",
                "activeStyle": ""
            }
        },
        {
            "type": "form",
            "layout": {
                "top": 5,
                "left": 7,
                "height": 14,
                "width": 4,
                "t_padding": 0,
                "b_padding": 0,
                "l_padding": 0,
                "r_padding": 0,
                "alignment": "left"
            },
            "data": {
                "nodeType": "form",
                "class_name": "form-with-bg",
                "container_info": {
                    "action": "login",
                    "form": {
                        "name": "local login",
                        "action": "login",
                        "fields": [
                            {
                                "field_name": "username",
                                "placeholder": "Username",
                                "label": "Username",
                                "displayType": "single-line-text",
                                "type": "text",
                                "options": [],
                                "required": false
                            },
                            {
                                "name": "password",
                                "placeholder": "Password",
                                "label": "Password",
                                "displayType": "password-text",
                                "type": "password",
                                "options": [],
                                "required": false
                            },
                            {
                                "placeholder": "Login",
                                "label": "Login",
                                "displayType": "button",
                                "type": "button",
                                "required": false
                            }
                        ],
                        "loginRoutes": [
                            {
                                "role": "User",
                                "redirect": "internal://Homepage"
                            }
                        ],
                        "entity": "User",
                        "actions": []
                    }
                },
                "content_attribs": {}
            }
        },
        {
            "type": "node",
            "layout": {
                "top": 19,
                "left": 7,
                "height": 3,
                "width": 4,
                "t_padding": 0,
                "b_padding": 0,
                "l_padding": 0,
                "r_padding": 0,
                "alignment": "left"
            },
            "data": {
                "nodeType": "lines",
                "style": "border-color:#49afcd;",
                "isSingle": true,
                "cons_attribs": {},
                "hoverStyle": "",
                "class_name": "line-1",
                "content": null,
                "tagName": "hr",
                "activeStyle": "",
                "content_attribs": {}
            }
        },
        {
            "type": "node",
            "layout": {
                "top": 22,
                "left": 7,
                "height": 2,
                "width": 2,
                "t_padding": 0,
                "b_padding": 0,
                "l_padding": 0,
                "r_padding": 0,
                "alignment": "left"
            },
            "data": {
                "nodeType": "links",
                "style": "",
                "isSingle": false,
                "content_attribs": {
                    "href": "internal://Homepage"
                },
                "hoverStyle": "",
                "class_name": "link-1",
                "content": "Signup Now »\n",
                "tagName": "a",
                "activeStyle": ""
            }
        }
    ],
    "navbar": {
        "brandName": "Twitterly",
        "isHidden": false,
        "isFixed": true,
        "links": []
    },
    "footer": {
        "customText": "Powered by Appcubator",
        "isHidden": false,
        "isFixed": true,
        "links": []
    },
    "page_name": "Homepage",
    "ind": 0,
    "user_roles": [
        "User"
    ]
};
define("wizard/homepage_temp", function(){});

define('wizard/AppGenerator',[
  "models/AppModel",
  "models/AppInfoModel",
  "models/RouteModel",
  "models/WidgetModel",
  "models/WidgetContainerModel",
  "collections/WidgetCollection",
  "collections/RouteCollection",
  "collections/UserRolesCollection",
  "collections/TableCollection",
  "collections/EmailCollection",
  "wizard/homepage_temp",
  "backbone"
],
function(AppModel,
         AppInfoModel,
         RouteModel,
         WidgetModel,
         WidgetContainerModel,
         WidgetCollection,
         RouteCollection,
         UserRolesCollection,
         TableCollection,
         EmailCollection) {

  var AppGenerator = Backbone.View.extend({
    answersDict : {},

    initialize: function(answers) {
      _.bindAll(this);
    },

    generateUsers: function() {
      var usersCollection = new UserRolesCollection();
      if(this.answersDict.multiple_users[0][0] == "yes") {
        _(this.answersDict.types_of_users[0]).each(function(user_role, ind) {
          var user = usersCollection.createUserWithName(user_role);
          user.addFieldsWithNames(this.answersDict.X_user_info[ind]);
        }, this);
      }
      else {
        var user = usersCollection.createUserWithName("User");
        user.addFieldsWithNames(this.answersDict.user_info[0]);
      }

      return usersCollection;
    },

    generateTables: function() {
      var tablesColl = new TableCollection();
      _(this.answersDict.other_info[0]).each(function(table_name, ind) {
        var table = tablesColl.createTableWithName(table_name);
        table.addFieldsWithNames(this.answersDict.X_info[ind]);
      }, this);

      return tablesColl;
    },

    generatePages: function() {
      var pageColl = new PageCollection();
      pageColl.push(this.generateHomepage());
      pageColl.push(this.generateRegistrationPage());

      return pageColl;
    },

    generateHomepage: function() {
      var homepage = _.clone(HomepageTemp);
      homepage.uielements[0].data.content = appName;
      if(this.answersDict.intro_text) homepage.uielements[1].data.content = this.answersDict.intro_text[0][0];

      if(this.answersDict.logo[0]) {
        homepage.uielements[2].data.content_attribs.src = this.answersDict.logo[0];
      }
      return homepage;
    },

    generateRegistrationPage: function() {

    },

    generateProfilePage: function() {

    },

    generateInfoPage: function(tableM) {
      var arr = [];

      var nmrElements = 0;
      var nmrImageElements = 0;
      var hasImageElements = 0;
      var widgetCollection = new WidgetCollection();
      if(tableM.get('fields').getImageFields()) hasImageElements = 1;
      tableM.getFieldsColl().each(function(fieldModel) {

        var type = fieldModel.get('type');
        if(type == "fk"||type == "m2m"||type == "o2o") { return; }

        var displayType = util.getDisplayType(type);
        var formFieldModel = { field_name: fieldModel.get('name'),
                               displayType: "single-line-text",
                               type: type,
                               label: fieldModel.get('name'),
                               placeholder: fieldModel.get('name') };

        var layout = {left : hasImageElements*3 + 2, top: nmrElements*3 + 12, height: 3, width: 5};
        var content_ops = {};
        content_ops.content =  '{{Page.'+ tableM.get('name') +'.'+fieldModel.get('name')+'}}';

        if(displayType == "links") {
          content_ops.content = 'Download '+fieldModel.get('name');
          content_ops.href = '{{Page.'+ tableM.get('name') +'.'+fieldModel.get('name')+'}}';
        }

        if(displayType == "images") {
          layout = {left : 2, top: nmrImageElements*9 + 12, height: 9, width: 2};
          content_ops.src_content = '{{Page.'+ tableM.get('name') +'.'+fieldModel.get('name')+'}}';
          nmrImageElements++;
        }
        else {
          nmrElements++;
        }

        var newElement = widgetCollection.createNodeWithFieldTypeAndContent(layout, displayType, content_ops);
        arr.push(newElement);
      });

      var headerModel = widgetCollection.createNodeWithFieldTypeAndContent({ left:3, height:3, width: 6, top: 3, alignment: "center"},
                                                                             "headerTexts",
                                                                             {content: tableM.get('name') + " Info" });

      arr.push(headerModel);

      return arr;
    },

    generateListPage: function(tableM) {
      var widgetCollection = new WidgetCollection();
      var headerModel = widgetCollection.createNodeWithFieldTypeAndContent({ left:3, height:3, width: 6, top: 3, alignment: "center"},
                                                                             "headerTexts",
                                                                             {content: "List of " + tableM.get('name') });
      var listModel   = widgetCollection.createList({ left:3, height:3, width: 6, top: 11}, tableM);
      var createFormModel   = widgetCollection.createCreateForm({ left:0, height:3, width: 3, top: 11, l_padding: 15, r_padding: 15}, tableM);

      var arr = [];
      arr.push(listModel);
      arr.push(headerModel);
      arr.push(createFormModel);

      return arr;
    },

    getJSON: function() {
      return this.state.serialize();
    }

  });

  return AppGenerator;

});


/* EXAMPLE */
/*
{
    "category": [
        [
            "social_network"
        ]
    ],
    "multiple_users": [
        [
            "yes"
        ]
    ],
    "types_of_users": [
        [
            "Student",
            "Company"
        ]
    ],
    "X_user_info": [
        [
            "Name",
            "Address"
        ],
        [
            "Name",
            "School"
        ]
    ],
    "other_info": [
        [
            "Offer"
        ]
    ],
    "X_info": [
        [
            "Position",
            "Date"
        ]
    ],
    "logo": [
        []
    ]
}
*/;
var page_templates = [
  {
    "name": "Homepage Style 1",
    "icon": "homepage1.png",
    "uielements": [
      {
        "data": {
          "container_info": {
            "action": "imageslider",
            "slides": [
              {
                "text": "Sample text. Double click to start editing.",
                "image": "/static/img/placeholder-slide1.png"
              },
              {
                "text": "Sample text. Double click to start editing.",
                "image": "/static/img/placeholder-slide2.png"
              }
            ],
            "uielements": []
          },
          "nodeType": "imageslider",
          "content_attribs": {}
        },
        "type": "imageslider",
        "layout": {
          "l_padding": 1,
          "b_padding": 1,
          "top": 1,
          "t_padding": 1,
          "width": 12,
          "r_padding": 1,
          "height": 31,
          "alignment": "left",
          "left": 0
        }
      },
      {
        "type": "node",
        "layout": {
          "l_padding": 1,
          "b_padding": 1,
          "top": 3,
          "t_padding": 1,
          "width": 6,
          "r_padding": 1,
          "height": 13,
          "alignment": "left",
          "left": 1
        },
        "data": {
          "style": "font-size: 32px;\nline-height: 34px;\nfont-weight: bold;\nfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n",
          "isSingle": false,
          "content_attribs": {},
          "hoverStyle": "",
          "class_name": "header-big",
          "content": "Your Awesome Header\n",
          "tagName": "h1",
          "nodeType": "headerTexts",
          "activeStyle": ""
        }
      },
      {
        "layout": {
          "l_padding": 15,
          "b_padding": 1,
          "top": 35,
          "t_padding": 1,
          "width": 4,
          "r_padding": 15,
          "height": 16,
          "alignment": "left",
          "left": 0
        },
        "type": "node",
        "data": {
          "style": "",
          "isSingle": false,
          "tagName": "p",
          "hoverStyle": "",
          "class_name": "normal-text",
          "content": "\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n",
          "content_attribs": {},
          "nodeType": "texts",
          "activeStyle": ""
        }
      },
      {
        "layout": {
          "l_padding": 15,
          "b_padding": 1,
          "top": 35,
          "t_padding": 1,
          "width": 4,
          "r_padding": 15,
          "height": 16,
          "alignment": "left",
          "left": 4
        },
        "type": "node",
        "data": {
          "style": "",
          "isSingle": false,
          "tagName": "p",
          "hoverStyle": "",
          "class_name": "normal-text",
          "content": "\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n",
          "content_attribs": {},
          "nodeType": "texts",
          "activeStyle": ""
        }
      },
      {
        "layout": {
          "l_padding": 1,
          "b_padding": 1,
          "top": 35,
          "t_padding": 1,
          "width": 4,
          "r_padding": 1,
          "height": 16,
          "alignment": "left",
          "left": 8
        },
        "type": "node",
        "data": {
          "style": "background-color: rgb(243, 243, 243);\nborder-bottom-color: rgb(221, 221, 221);\nborder-bottom-left-radius: 6px;\nborder-bottom-right-radius: 6px;\nborder-bottom-style: solid;\nborder-bottom-width: 1px;\nborder-image-width: 1;\nborder-left-color: rgb(221, 221, 221);\nborder-left-style: solid;\nborder-left-width: 1px;\nborder-right-color: rgb(221, 221, 221);\nborder-right-style: solid;\nborder-right-width: 1px;\nborder-top-color: rgb(221, 221, 221);\nborder-top-left-radius: 6px;\nborder-top-right-radius: 6px;\nborder-top-style: solid;\nborder-top-width: 1px;\ncolor: rgb(51, 51, 51);\nfont-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\nfont-size: 18px;\nfont-weight: 200;\nheight: 275px;\nline-height: 30px;\nwidth: 100%;\nheight: 100%;\n",
          "isSingle": false,
          "cons_attribs": {
            "style": "border:1px solid #333;"
          },
          "hoverStyle": "",
          "class_name": "box-1",
          "content": null,
          "content_attribs": {},
          "nodeType": "boxes",
          "tagName": "div",
          "activeStyle": ""
        }
      },
      {
        "layout": {
          "l_padding": 15,
          "b_padding": 1,
          "top": 36,
          "t_padding": 1,
          "width": 4,
          "r_padding": 15,
          "height": 2,
          "alignment": "left",
          "left": 8
        },
        "type": "node",
        "data": {
          "style": "",
          "isSingle": false,
          "tagName": "p",
          "hoverStyle": "",
          "class_name": "normal-text",
          "content": "Put the login form here.",
          "content_attribs": {},
          "nodeType": "texts",
          "activeStyle": ""
        }
      }
    ]
  },
  {
    "name": "Homepage Style 2",
    "icon": "homepage2.png",
    "uielements": [
      {
        "layout": {
          "l_padding": 15,
          "b_padding": 1,
          "top": 4,
          "t_padding": 1,
          "width": 12,
          "r_padding": 15,
          "height": 6,
          "alignment": "center",
          "left": 0
        },
        "type": "node",
        "data": {
          "style": "font-size: 32px;\nline-height: 34px;\nfont-weight: bold;\nfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n",
          "isSingle": false,
          "tagName": "h1",
          "hoverStyle": "",
          "class_name": "header-1",
          "content": "Your Awesome Header!",
          "content_attribs": {},
          "nodeType": "headerTexts",
          "activeStyle": ""
        }
      },
      {
        "layout": {
          "l_padding": 15,
          "b_padding": 1,
          "top": 10,
          "t_padding": 1,
          "width": 8,
          "r_padding": 15,
          "height": 28,
          "alignment": "left",
          "left": 0
        },
        "type": "node",
        "data": {
          "style": "",
          "isSingle": true,
          "tagName": "img",
          "hoverStyle": "",
          "class_name": "img-width-fixed",
          "content": null,
          "content_attribs": {
            "src": "/static/img/placeholder.png"
          },
          "nodeType": "images",
          "activeStyle": ""
        }
      },
      {
        "layout": {
          "l_padding": 15,
          "b_padding": 1,
          "top": 10,
          "t_padding": 1,
          "width": 4,
          "r_padding": 15,
          "height": 23,
          "alignment": "left",
          "left": 8
        },
        "type": "node",
        "data": {
          "style": "",
          "isSingle": false,
          "tagName": "p",
          "hoverStyle": "",
          "class_name": "normal-text",
          "content": "Put the login form here. Just drag and drop from the panel on the right ->",
          "content_attribs": {},
          "nodeType": "texts",
          "activeStyle": ""
        }
      },
      {
        "layout": {
          "l_padding": 15,
          "b_padding": 1,
          "top": 35,
          "t_padding": 1,
          "width": 4,
          "r_padding": 15,
          "height": 3,
          "alignment": "left",
          "left": 8
        },
        "type": "node",
        "data": {
          "style": "",
          "isSingle": false,
          "tagName": "a",
          "hoverStyle": "",
          "class_name": "link-1",
          "content": "Or Signup »\n",
          "content_attribs": {
            "href": "internal://Homepage"
          },
          "nodeType": "links",
          "activeStyle": ""
        }
      }
    ]
  },
  {
    "name": "Contact Page",
    "icon": "contact.png",
    "uielements": [
      {
        "type": "node",
        "layout": {
          "top": 11,
          "left": 3,
          "height": 3,
          "width": 2,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "headerTexts",
          "style": "font-size: 32px;\nline-height: 34px;\nfont-weight: bold;\nfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n",
          "isSingle": false,
          "content_attribs": {},
          "hoverStyle": "",
          "class_name": "header-1",
          "content": "Address",
          "tagName": "h1",
          "activeStyle": ""
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 16,
          "left": 3,
          "height": 3,
          "width": 2,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "headerTexts",
          "style": "font-size: 32px;\nline-height: 34px;\nfont-weight: bold;\nfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n",
          "isSingle": false,
          "content_attribs": {},
          "hoverStyle": "",
          "class_name": "header-1",
          "content": "Phone\n",
          "tagName": "h1",
          "activeStyle": ""
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 21,
          "left": 3,
          "height": 3,
          "width": 2,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "headerTexts",
          "style": "font-size: 32px;\nline-height: 34px;\nfont-weight: bold;\nfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n",
          "isSingle": false,
          "content_attribs": {},
          "hoverStyle": "",
          "class_name": "header-1",
          "content": "Email",
          "tagName": "h1",
          "activeStyle": ""
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 15,
          "left": 3,
          "height": 1,
          "width": 6,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "lines",
          "style": "border-color:#49afcd;\nborder-width: 0px;\nborder-top-width: 1px;\n",
          "isSingle": true,
          "cons_attribs": {},
          "hoverStyle": "",
          "class_name": "line-1",
          "content": null,
          "tagName": "hr",
          "activeStyle": "",
          "content_attribs": {}
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 20,
          "left": 3,
          "height": 1,
          "width": 6,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "lines",
          "style": "border-color:#49afcd;\nborder-width: 0px;\nborder-top-width: 1px;\n",
          "isSingle": true,
          "cons_attribs": {},
          "hoverStyle": "",
          "class_name": "line-1",
          "content": null,
          "tagName": "hr",
          "activeStyle": "",
          "content_attribs": {}
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 11,
          "left": 5,
          "height": 4,
          "width": 4,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "texts",
          "tagName": "p",
          "content_attribs": {},
          "content": "Blake Medical Center - Bradenton, FL\n",
          "isSingle": false,
          "style": "",
          "hoverStyle": "",
          "activeStyle": "",
          "class_name": "normal-text"
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 16,
          "left": 5,
          "height": 3,
          "width": 4,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "texts",
          "tagName": "p",
          "content_attribs": {},
          "content": "+ 444 111 22 33\n+ 444 222 11 55",
          "isSingle": false,
          "style": "",
          "hoverStyle": "",
          "activeStyle": "",
          "class_name": "normal-text"
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 21,
          "left": 5,
          "height": 3,
          "width": 4,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "left"
        },
        "data": {
          "nodeType": "texts",
          "tagName": "p",
          "content_attribs": {},
          "content": "contact@me.com",
          "isSingle": false,
          "style": "",
          "hoverStyle": "",
          "activeStyle": "",
          "class_name": "normal-text"
        }
      },
      {
        "type": "node",
        "layout": {
          "top": 3,
          "left": 3,
          "height": 3,
          "width": 6,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "center"
        },
        "data": {
          "nodeType": "headerTexts",
          "style": "font-size: 32px;\nline-height: 34px;\nfont-weight: bold;\nfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n",
          "isSingle": false,
          "content_attribs": {},
          "hoverStyle": "",
          "class_name": "header-1",
          "content": "Contact Us",
          "tagName": "h1",
          "activeStyle": ""
        }
      }
    ]
  },
  {
    "name": "Blank Page",
    "icon": "blank.png",
    "uielements": [
      {
        "type": "node",
        "layout": {
          "top": 5,
          "left": 3,
          "height": 4,
          "width": 6,
          "t_padding": 0,
          "b_padding": 0,
          "l_padding": 0,
          "r_padding": 0,
          "alignment": "center"
        },
        "data": {
          "nodeType": "headerTexts",
          "style": "font-size: 32px;\nline-height: 34px;\nfont-weight: bold;\nfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n",
          "isSingle": false,
          "content_attribs": {},
          "hoverStyle": "",
          "class_name": "header-1",
          "content": "Welcome header!",
          "tagName": "h1",
          "activeStyle": ""
        }
      }
    ]
  }
];
define("dicts/page-templates", function(){});

define('editor/PageTemplatePicker',[
        'wizard/AppGenerator',
        'dicts/page-templates',
        'mixins/BackboneModal'
    ],
    function(AppGenerator) {

        var PageTemplatePicker = Backbone.View.extend({
            className: 'page-template-picker',
            width: 700,
            height: 480,
            events: {
                'click .static-template': 'staticSelected',
                'click .info-template': 'infoSelected',
                'click .list-template': 'listSelected'
            },

            initialize: function(options) {
                _.bindAll(this);
                this.model = options.model;
                this.options = options;
                this.render();
            },

            staticSelected: function(e) {
                var tempId = String(e.currentTarget.id).replace('page-', '');
                this.model.get('uielements').add(page_templates[tempId].uielements);

                util.log_to_server("template selected", "static", appId);
                this.closeModal();
            },

            infoSelected: function(e) {
                var tableId = String(e.currentTarget.id).replace('table-info-', '');
                var tableModel = v1State.get('tables').get(tableId);

                if (!this.model.hasContext(tableModel)) {
                    this.model.addToContext(tableModel);
                }

                var appGen = new AppGenerator();
                this.model.get('uielements').add(appGen.generateInfoPage(tableModel), false);

                util.log_to_server("template selected", "info", appId);
                this.closeModal();
            },

            listSelected: function(e) {
                var tableId = String(e.currentTarget.id).replace('table-list-', '');
                var tableModel = v1State.get('tables').get(tableId);

                var appGen = new AppGenerator();
                this.model.get('uielements').add(appGen.generateListPage(tableModel), false);

                util.log_to_server("template selected", "list", appId);
                this.closeModal();
            },

            render: function() {
                var self = this;
                this.el.innerHTML = "<h2>Pick A Template</h2><p>Looks like this page is blank. Would you like to start with one of the templates?</p>";

                var list = document.createElement('ul');
                list.className = 'template-icons';
                _(page_templates).each(function(page, ind) {
                    list.innerHTML += '<li class="page-template static-template" id="page-' + ind + '"><img src="/static/img/page_templates/' + page.icon + '"><span>' + page.name + '</span></li>';
                });

                v1State.get('tables').each(function(tableM) {
                    list.innerHTML += '<li class="page-template info-template" id="table-info-' + tableM.cid + '"><img src="/static/img/page_templates/info-page-icon.png"><span>' + tableM.get('name') + ' Info Page</span></li>';
                    list.innerHTML += '<li class="page-template list-template" id="table-list-' + tableM.cid + '"><img src="/static/img/page_templates/list-page-icon.png"><span>' + tableM.get('name') + ' List Page</span></li>';
                });

                this.el.appendChild(list);
                return this;
            },

            closeModal: function() {
                if (this.options.callback) {
                    this.options.callback.call();
                }
            }
        });

        return PageTemplatePicker;
    });
define('editor/NavbarView',[
        'editor/NavbarEditorView',
        'backbone'
    ],
    function(NavbarEditorView) {

        var NavbarView = Backbone.View.extend({
            entity: null,
            type: null,
            events: {
                'mousedown': 'showNavbarEditor',
                'mousedown #edit-navbar': 'showNavbarEditor'
            },

            initialize: function(navbarModel) {
                _.bindAll(this);

                this.model = navbarModel;
                this.listenTo(this.model, 'change', this.render);
                this.listenTo(this.model.get('links'), 'all', this.render);
            },

            showNavbarEditor: function() {
                new NavbarEditorView(this.model);
            },

            render: function() {
                var html = "";
                var el = this.model.expand();
                this.el.innerHTML = el;
                return this;
            },

            // GARBAGE
            renderLinks: function() {
                var htmlString = '';
                this.model.get('links').each(function(item) {
                    htmlString += '<li><a href="#" class="menu-item">' + item.get('title') + '</a></li>';
                });
                this.$el.find('#links').html(htmlString);
            }
        });

        return NavbarView;
    });
define('editor/FooterView',[
  'editor/FooterEditorView',
  'backbone'
],
function(FooterEditorView) {

  var FooterView = Backbone.View.extend({
    entity: null,
    type: null,

    events: {
      'mousedown' : 'showFooterEditor'
    },

    initialize: function(footerModel) {
      _.bindAll(this);

      this.model = footerModel;
      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.model.get('links'), 'all', this.renderLinks);
    },

    showFooterEditor: function() {
      new FooterEditorView(this.model);
    },


    render: function() {
      var html = "";
      var el = this.model.expand();
      this.el.innerHTML = el;
      return this;
    },

    renderLinks: function() {
      var htmlString = '';
      this.model.get('links').each(function(item) {
        htmlString += '<li><a href="#" class="menu-item">' + item.get('title') + '</a></li>';
      });
      this.$el.find('#footer-links').html(htmlString);
    }
  });

  return FooterView;
});

define('editor/GuideView',[
        'models/WidgetModel'
    ],
    function(WidgetModel) {

        var GuideView = Backbone.View.extend({
            events: {

            },

            nmrLines: 0,
            horizontalLinesDict: {},
            verticalLinesDict: {},
            show: false,
            positionHorizontalGrid: 80,
            positionVerticalGrid: 15,

            initialize: function(widgetsCollection) {
                _.bindAll(this);

                var self = this;
                this.widgetsCollection = widgetsCollection;
                keyDispatcher.bind(';', this.toggleGuides);

                this.horizontalLinesDict = {};
                this.verticalLinesDict = {};

                this.listenTo(this.widgetsCollection, 'add', this.placeWidget);
                this.listenTo(this.widgetsCollection, 'remove', this.removeWidget);
            },

            render: function() {
                this.widgetsCollection.each(this.placeWidget);
                this.setupDummyLines();
            },

            placeWidget: function(widget) {
                this.placeWidgetLines(widget);
                this.listenTo(widget.get('layout'), 'change', function() {
                    this.changedPosition(widget);
                }, this);
            },

            placeWidgetLines: function(widget) {
                var layout = widget.get('layout');
                var cid = widget.cid;
                this.placeHorizontal(layout.get('top'), cid);
                this.placeHorizontal((layout.get('top') + layout.get('height')), cid);
                this.placeVertical(layout.get('left'), cid);
                this.placeVertical(layout.get('left') + layout.get('width'), cid);
            },

            setupDummyLines: function() {
                for(var ii = 0; ii <= 12; ii++) {
                    this.placeVertical(ii, "dum");
                }
            },

            removeWidget: function(widget) {

                var vKeysToOmit = [];
                _(this.verticalLinesDict).each(function(lineObj, key) {
                    lineObj.models = _.without(lineObj.models, widget.cid);
                    if (!lineObj.models.length) {
                        vKeysToOmit.push(key);
                        $(lineObj.line).remove();
                    }
                });

                this.verticalLinesDict = _.omit(this.verticalLinesDict, vKeysToOmit);

                var hKeysToOmit = [];
                _(this.horizontalLinesDict).each(function(lineObj, key) {
                    lineObj.models = _.without(lineObj.models, widget.cid);
                    if (!lineObj.models.length) {
                        $(lineObj.line).remove();
                        hKeysToOmit.push(key);
                    }
                });

                this.horizontalLinesDict = _.omit(this.horizontalLinesDict, hKeysToOmit);
            },

            changedPosition: function(widget) {

                var vKeysToOmit = [];
                _(this.verticalLinesDict).each(function(lineObj, key) {
                    lineObj.models = _.without(lineObj.models, widget.cid);
                    if (!lineObj.models.length) {
                        vKeysToOmit.push(key);
                        $(lineObj.line).remove();
                    }
                });

                this.verticalLinesDict = _.omit(this.verticalLinesDict, vKeysToOmit);

                var hKeysToOmit = [];
                _(this.horizontalLinesDict).each(function(lineObj, key) {
                    lineObj.models = _.without(lineObj.models, widget.cid);
                    if (!lineObj.models.length) {
                        $(lineObj.line).remove();
                        hKeysToOmit.push(key);
                    }
                });

                this.horizontalLinesDict = _.omit(this.horizontalLinesDict, hKeysToOmit);

                this.placeWidgetLines(widget);
            },

            placeHorizontal: function(nmr, cid) {
                var lineObj = (this.horizontalLinesDict[nmr] || {});

                if (!lineObj.line) {
                    line = document.createElement('div');
                    line.className = 'guide-line-horizontal';
                    line.style.top = (nmr * this.positionVerticalGrid) + 'px';
                    lineObj.line = line;
                    this.$el.append(line);
                }

                lineObj.models = lineObj.models || [];
                lineObj.models.push(cid);

                this.horizontalLinesDict[nmr] = lineObj;
            },

            placeVertical: function(nmr, cid) {
                var lineObj = (this.verticalLinesDict[nmr] || {});

                if (!lineObj.line) {
                    line = document.createElement('div');
                    line.className = 'guide-line-vertical';
                    line.style.left = (nmr * this.positionHorizontalGrid) + 'px';
                    lineObj.line = line;
                    this.$el.append(line);
                }

                lineObj.models = lineObj.models || [];
                lineObj.models.push(cid);

                this.verticalLinesDict[nmr] = lineObj;
            },

            showAll: function() {
                _(this.horizontalLinesDict).each(function(val, key) {
                    $(val.line).addClass('show');
                });

                _(this.verticalLinesDict).each(function(val, key) {
                    $(val.line).addClass('show');
                });
            },

            hideAll: function() {
                _(this.horizontalLinesDict).each(function(val, key) {
                    $(val.line).removeClass('show');
                });

                _(this.verticalLinesDict).each(function(val, key) {
                    $(val.line).removeClass('show');
                });
            },

            toggleGuides: function() {
                if(keyDispatcher.textEditing) return;

                if (this.show) {
                    this.hideAll();
                    this.show = false;
                } else {
                    this.showAll();
                    this.show = true;
                }
            },

            showVertical: function(coor, cid) {
                var coorRounded = Math.round(coor);
                var delta = coorRounded - coor;

                if (this.verticalLinesDict[coorRounded] && !(this.verticalLinesDict[coorRounded].models.length == 1 && this.verticalLinesDict[coorRounded].models[0] == cid)) {
                    $(this.verticalLinesDict[coorRounded].line).addClass('show');
                    if(delta > -0.15 && delta < 0.15 && this.verticalLinesDict[coorRounded].models.length != 1) return coorRounded;
                }
            },

            showHorizontal: function(coor, cid) {
                var coorRounded = Math.round(coor);
                var delta = coorRounded - coor;

                if (this.horizontalLinesDict[coorRounded] && !(this.horizontalLinesDict[coorRounded].models.length == 1 && this.horizontalLinesDict[coorRounded].models[0] == cid)) {
                    $(this.horizontalLinesDict[coorRounded].line).addClass('show');
                    if(delta > -0.5 && delta < 0.5) return coorRounded;
                }


                return null;
            },

            close: function() {
                keyDispatcher.unbind(';', this.toggleGuides);
                Backbone.View.prototype.close.call(this);
            }

        });

        return GuideView;
    });
define('app/DeployView',[
  'mixins/BackboneModal',
  'util'
],
function() {

  var DeployView = Backbone.ModalView.extend({
    el: null,
    className: "deploy-panel",
    width: 620,
    height: 370,
    events: {
      'click .download-pane': 'downloaded'
    },
    theme: null,

    initialize: function(data) {
      _.bindAll(this);
      this.data = data;
      this.render();
    },

    render: function() {
      var template = util.getHTML('deploy-panel');
      this.el.innerHTML = _.template(template, this.data);
      this.g_js = {};
      var self = this;
      !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s); self.g_js = js; js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');
      return this;
    },

    downloaded: function() {
        $(".download-pane .loading-wheel").css('visibility','visible')
        var hideWheel = function() {
            $(".download-pane .loading-wheel").css('visibility','hidden');
        }
        v1.download(hideWheel);
    },

    close: function() {
      if(this.g_js) { this.g_js.parentNode.removeChild(this.g_js); }
      DeployView.__super__.close.call(this);
    }
  });

  return DeployView;
});

define('app/RedoController',[
  'mixins/BackboneModal',
  'util'
],
function() {

  var RedoController = Backbone.View.extend({
    redoStack: [],
    undoStack: [],

    initialize: function(data) {
      _.bindAll(this);
      this.startLogging();
    },

    startLogging: function () {
      var uiElements = v1State.getCurrentPage().get('uielements');
      this.bindCollection(uiElements);
    },

    bindCollection: function(coll) {
      this.listenTo(coll, 'add', this.added);
      this.listenTo(coll, 'remove', this.removed);
      this.listenTo(coll, 'change', this.changed);
      coll.each(this.bindModel);
    },

    bindModel: function(model) {
      this.listenTo(model, 'change', this.changed);
      _(model.attributes).each(function(val, key) {

        if(this.isModel(val)) { this.bindModel(val); }
        else if(this.isCollection(val)) { this.bindCollection(val); }

      }, this);
    },

    added: function(model, collection) {
      var changeObj = {
        action: 'added',
        obj: model,
        collection: collection
      };
      this.undoStack.push(changeObj);
    },

    removed: function(model, collection) {
      var changeObj = {
        action: 'removed',
        obj: model,
        collection: collection
      };
      this.undoStack.push(changeObj);
    },

    changed: function(model) {
      var changeObj = {
        action: 'changed',
        prevAttributes: _.clone(model._previousAttributes),
        obj: model
      };
      this.undoStack.push(changeObj);
    },

    isModel: function(obj) {
      if(obj && obj.attributes) return true;
      return false;
    },

    isCollection: function (obj) {
      if(obj && obj.models) return true;
      return false;
    },

    undo: function() {
      var obj = this.undoStack.pop();
      if(!obj) return;
      var reverted_obj = this.pushChange(obj);
      this.redoStack.push(reverted_obj);
    },

    redo: function() {
      var obj = this.redoStack.pop();
      console.log(obj);
      if(!obj) return;
      this.pushChange(obj);
      //this.redoStack.push(obj);
    },

    pushChange: function(obj) {

      var revertedObj = {};

      switch(obj.action) {
        case "added":
          this.stopListening(obj.collection, 'remove', this.removed);
          obj.collection.remove(obj.obj);
          this.listenTo(obj.collection, 'remove', this.removed);

          revertedObj.action = "removed";
          revertedObj.collection = obj.collection;
          revertedObj.obj = obj.obj;
          break;
        case "removed":
          this.stopListening(obj.collection, 'add', this.added);
          obj.collection.add(obj.obj);
          this.listenTo(obj.collection, 'add', this.added);

          revertedObj.action = "added";
          revertedObj.collection = obj.collection;
          revertedObj.obj = obj.obj;
          break;
        case "changed":
          revertedObj.prevAttributes = _.clone(obj.obj.attributes);

          obj.obj.attributes = _.clone(obj.prevAttributes);
          this.stopListening(obj.obj, 'change', this.changed);
          obj.obj.trigger('change');
          if(obj.obj.has('top')) {
            obj.obj.trigger('change:left');
            obj.obj.trigger('change:top');
            obj.obj.trigger('change:width');
            obj.obj.trigger('change:height');
          }
          this.listenTo(obj.obj, 'change', this.changed);

          revertedObj.action = "changed";
          revertedObj.obj = obj.obj;

          break;
      }

      return revertedObj;
    }
  });

  return RedoController;
});

define('app/css-editor/UIElementEditingView',['require','exports','module','mixins/BackboneModal'],function(require, exports, module) {
    'use strict';

    require('mixins/BackboneModal');

    var UIElementEditingView = Backbone.View.extend({
        
        tagName: 'div',
        className: 'element-view',

        events: {
            'click .delete-elem': 'deleteElement'
        },

        initialize: function(options) {
            _.bindAll(this);

            this.model = options.model;
            console.log(this.model);
            this.model.bind('change:style', this.renderStyleTags);
            this.model.bind('change:hoverStyle', this.renderStyleTags);
            this.model.bind('change:activeStyle', this.renderStyleTags);
        },

        render: function() {
            var tempPane = [
                '<div class="sect"><h4>Normal State</h4><div id="style-<%= cid %>" class="style style-editor" placeholder="Styling here..."></div></div>',
                '<div class="sect"><h4>Hover State</h4><div id="hover-style-<%= cid %>" class="hover-style style-editor"></div></div>',
                '<div class="sect"><h4>Active State</h4><div id="active-style-<%= cid %>" class="active-style style-editor"></div></div>'
            ].join('\n');

            var form = _.template(tempPane, {
                info: this.model.attributes,
                cid: this.model.cid
            });

            console.log(form);
            this.el.innerHTML = form;
            return this;
        },

        setupAce: function() {
            console.log(this.el);
            console.log($("#style-" + this.model.cid));
            var self = this;

            console.trace();
            setTimeout(function() {

                var cid = self.model.cid;
                console.log(cid);
                console.log(self.model.get('style'));
                console.log(self.model);

                self.styleEditor = ace.edit("style-" + cid);
                self.styleEditor.getSession().setMode("ace/mode/css");
                self.styleEditor.setValue(self.model.get('style'), -1);
                self.styleEditor.getSession().on('change', self.styleChanged);

                self.hoverStyleEditor = ace.edit("hover-style-" + cid);
                self.hoverStyleEditor.getSession().setMode("ace/mode/css");
                self.hoverStyleEditor.setValue(self.model.get('hoverStyle'), -1);
                self.hoverStyleEditor.getSession().on('change', self.hoverStyleChanged);

                self.activeStyleEditor = ace.edit("active-style-" + cid);
                self.activeStyleEditor.getSession().setMode("ace/mode/css");
                self.activeStyleEditor.setValue(self.model.get('activeStyle'), -1);
                self.activeStyleEditor.getSession().on('change', self.activeStyleChanged);

            });

        },

        deleteElement: function() {
            var self = this;
            this.model.collection.remove(self.model.cid);
            this.closeModal();
        },

        styleChanged: function(e) {
            var value = this.styleEditor.getValue();
            this.model.set('style', value);
        },

        hoverStyleChanged: function(e) {
            var value = this.hoverStyleEditor.getValue();
            console.log(value);
            console.log("YOLO");
            console.log(this.model);
            this.model.set('hoverStyle', value);
        },

        activeStyleChanged: function(e) {
            var value = this.activeStyleEditor.getValue();
            this.model.set('activeStyle', value);
        }

    });

    return UIElementEditingView;
});
define('app/css-editor/UIElementView',['require','exports','module','./UIElementEditingView','backbone'],function(require, exports, module) {
    'use strict';
    
    var UIElementEditingView = require('./UIElementEditingView');
    require('backbone');
    

    var UIElementView = Backbone.View.extend({
        el: null,
        className: 'widgetWrapper widget-style-wrapper',
        isExpanded: false,

        events: {
            'click': 'toggleElement',
            'click .remove': 'removeUIE',
            'keyup .class_name': 'classNameChaged'
        },

        initialize: function(uieModel) {
            _.bindAll(this);

            this.model = uieModel;
            this.model.bind('change', this.reRender);
            this.model.bind('change', this.reRenderStyleTags);

            this.renderStyle();
        },

        render: function() {
            this.el.id = 'elem-' + this.model.cid;

            var upperDiv = document.createElement('div');
            upperDiv.className = "upper-area row";
            var class_name = this.model.get('class_name');
            upperDiv.innerHTML = [
                '<div class="hoff1">',
                '<input type="text" name="className" placeHolder="Class Name" class="class_name" value="' + class_name + '" placeholder="className...">',
                '<div class="edit-text btn">Edit Style</div>',
                '<span class="btn remove hoff1">Remove Style</span>',
                '</div>'
            ].join('\n');

            this.tempNodeDiv = document.createElement('div');
            this.tempNodeDiv.className = "temp-node-area hoff1";
            this.tempNodeDiv.innerHTML = _.template(this.tempNode(), {
                info: this.model.attributes
            });

            upperDiv.appendChild(this.tempNodeDiv);
            this.el.appendChild(upperDiv);
            return this;
        },

        reRender: function(argument) {
            this.tempNodeDiv.innerHTML = _.template(this.tempNode(), {
                info: this.model.attributes
            });
        },

        reRenderStyleTags: function(e) {
            var styleTag = document.getElementById(this.model.cid + '-' + 'style');
            styleTag.innerHTML = '#' + this.model.get('class_name') + '{' + this.model.get('style') + '}';
            var hoverTag = document.getElementById(this.model.cid + '-' + 'hover-style');
            hoverTag.innerHTML = '#' + this.model.get('class_name') + ':hover {' + this.model.get('hoverStyle') + '}';
            var activeTag = document.getElementById(this.model.cid + '-' + 'active-style');
            activeTag.innerHTML = '#' + this.model.get('class_name') + ':active {' + this.model.get('activeStyle') + '}';
        },

        renderStyle: function() {

            var styleTag = document.createElement('style');
            styleTag.id = this.model.cid + '-' + 'style';
            styleTag.innerHTML = '#' + this.model.get('class_name') + '{' + this.model.get('style') + '}';

            var hoverStyleTag = document.createElement('style');
            hoverStyleTag.id = this.model.cid + '-' + 'hover-style';
            hoverStyleTag.innerHTML = '#' + this.model.get('class_name') + ':hover {' + this.model.get('hoverStyle') + '}';

            var activeStyleTag = document.createElement('style');
            activeStyleTag.id = this.model.cid + '-' + 'active-style';
            activeStyleTag.innerHTML = '#' + this.model.get('class_name') + ':active {' + this.model.get('activeStyle') + '}';

            document.head.appendChild(styleTag);
            document.head.appendChild(hoverStyleTag);
            document.head.appendChild(activeStyleTag);
        },

        removeUIE: function(e) {
            e.preventDefault();
            e.stopPropagation();
            var model = this.model;
            this.model.collection.remove(model.cid);
            $(this.el).remove();
        },

        baseChanged: function() {

        },

        toggleElement: function(e) {
            if (e.target.tagName == "INPUT") return;
            if (e.target.className.indexOf('ace_') === 0) return;
            console.log(e.target);

            var btn = this.$el.find('.edit-text').first();
            if (!this.isExpanded) {
                this.expandElement();
                btn.html('Close Edit Panel');
            } else {
                this.shrinkElement();
                btn.html('Expand Edit Panel');
            }
        },

        expandElement: function() {
            // this.isExpanded = true;
            // this.expandedView = new UIElementEditingView(this.model);
            // this.el.appendChild(this.expandedView.render().el);
            // this.expandedView.setUpAce();
            // this.el.style.height = 'auto';
            console.log(this.model);
            this.model.collection.trigger('selected', [this.model]);
        },

        shrinkElement: function() {
            this.expandedView.close();
            this.isExpanded = false;
            this.el.style.height = '225px';
        },

        classNameChaged: function(e) {
            this.model.set('class_name', e.target.value);
        },

        tempNode: function() {
            return [
              '<div class="element-node">',
              '<<%= info.tagName %> ',
              'id="<%= info.class_name %>" ',
              '<% _(info.cons_attribs).each(function(val, key){ %>',
              '<%= key %> = <%= val %>',
              '<% }); %><% _(info.content_attribs).each(function(val, key){ %>',
              '<%= key %> = <%= val %>',
              '<% }); %>>',
              '<% if(!info.isSingle) { %>',
              '<%= info.content %></<%=info.tagName%>>',
              '<% } %>',
              '</div>'
            ].join('\n');
        }

    });

    return UIElementView;
});
define('app/css-editor/UIElementListView',['require','exports','module','backbone','./UIElementView'],function(require, exports, module) {
    'use strict';
    require('backbone');

    var UIElementView = require('./UIElementView');
    var baseTags = {

        "button": [{
            tagName: 'a',
            cons_attribs: {},
            content_attribs: {
                href: "internal://Homepage"
            },
            content: "Default Button",
            isSingle: false
        }],

        "image": [{
            tagName: 'img',
            content_attribs: {
                src: '/static/img/placeholder.png'
            },
            content: null,
            isSingle: true
        }],

        "header-text": [{
            tagName: 'h1',
            content_attribs: null,
            content: 'Default header!',
            isSingle: false
        }],

        "text": [{
            tagName: 'p',
            content_attribs: null,
            content: 'Default text!',
            isSingle: false
        }],

        "link": [{
            tagName: 'a',
            content_attribs: {
                'href': '{{homepage}}'
            },
            content: 'Default Link...',
            isSingle: false
        }],

        "text-input": [{
            tagName: 'input',
            cons_attribs: {
                type: 'text'
            },
            content_attribs: {
                placeholder: 'Default placeholder...'
            },
            content: null,
            isSingle: true
        }],

        "password": [{
            tagName: 'input',
            tagType: 'password',
            content_attribs: {
                placeholder: 'Default placeholder...'
            },
            content: null,
            isSingle: true
        }],

        "text-area": [{
            tagName: 'textarea',
            content_attribs: null,
            content: 'Default Text Area...',
            isSingle: false
        }],

        "line": [{
            tagName: 'hr',
            cons_attribs: {},
            content: null,
            isSingle: true
        }],

        "dropdown": [{
            tagName: 'select',
            content: '<option>Option 1</option>',
            attribs: null,
            isSingle: false
        }],

        "box": [{
            tagName: 'div',
            content: null,
            cons_attribs: {
                style: 'border:1px solid #333;'
            },
            isSingle: false
        }],

        "form": [{
            tagName: 'form',
            content: null,
            cons_attribs: {},
            isSingle: false
        }],

        "list": [{
            tagName: 'div',
            content: null,
            cons_attribs: {},
            isSingle: false
        }]
    };

    var UIElementListView = Backbone.View.extend({

        className: 'elements list',
        events: {
            'click div.create-text': 'showForm',
            'submit .element-create-form': 'submitForm'
        },

        initialize: function(UIElementColl, type) {
            _.bindAll(this);
            this.type = type;
            this.collection = UIElementColl;
            this.collection.bind('add', this.appendUIE);
            this.collection.bind('remove', this.removeUIE);
        },

        render: function() {
            var self = this;
            var div = document.createElement('span');
            div.className = 'elems';
            this.elems = div;
            this.el.appendChild(this.elems);

            this.collection.each(function(uieModel) {
                uieModel.id = self.collection.length;
                self.appendUIE(uieModel);
            });

            var createBtn = document.createElement('span');
            var temp = [
                '<div class="create-text">',
                  '<img src="/static/img/add.png" class="span2 add-img">',
                  '<h3 class="offset1">Create an element</span>',
                '</div>',
            ].join('\n');
            createBtn.innerHTML = _.template(temp, {});

            this.el.appendChild(createBtn);
            return this;
        },


        showForm: function(e) {
            var root = {};
            if (baseTags[this.type]) { root = baseTags[this.type][0]; }
            this.collection.push(root);
        },

        submitForm: function(e) {
            //alert("HEEEEY");
        },

        appendUIE: function(uieModel) {
            var newView = new UIElementView(uieModel);
            this.elems.appendChild(newView.render().el);
        },

        removeUIE: function(uieModel) {
            $('#' + uieModel.cid).remove();
        }

    });

    return UIElementListView;
});
/*
 * jQuery.fontselect - A font selector for the Google Web Fonts api
 * Tom Moor, http://tommoor.com
 * Copyright (c) 2011 Tom Moor
 * MIT Licensed
 * @version 0.1
*/

(function($){

  $.fn.fontselect = function(options) {

     var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

     var fonts = [
      "Aclonica",
      "Allan",
      "Annie+Use+Your+Telescope",
      "Anonymous+Pro",
      "Allerta+Stencil",
      "Allerta",
      "Amaranth",
      "Anton",
      "Architects+Daughter",
      "Arimo",
      "Artifika",
      "Arvo",
      "Asset",
      "Astloch",
      "Bangers",
      "Bentham",
      "Bevan",
      "Bigshot+One",
      "Bowlby+One",
      "Bowlby+One+SC",
      "Brawler",
      "Bree Serif",
      "Buda:300",
      "Cabin",
      "Calligraffitti",
      "Candal",
      "Cantarell",
      "Cardo",
      "Carter One",
      "Caudex",
      "Cedarville+Cursive",
      "Cherry+Cream+Soda",
      "Chewy",
      "Coda",
      "Coming+Soon",
      "Copse",
      "Corben:700",
      "Cousine",
      "Covered+By+Your+Grace",
      "Crafty+Girls",
      "Crimson+Text",
      "Crushed",
      "Cuprum",
      "Damion",
      "Dancing+Script",
      "Dawning+of+a+New+Day",
      "Didact+Gothic",
      "Droid+Sans",
      "Droid+Sans+Mono",
      "Droid+Serif",
      "EB+Garamond",
      "Expletus+Sans",
      "Fontdiner+Swanky",
      "Forum",
      "Francois+One",
      "Geo",
      "Give+You+Glory",
      "Goblin+One",
      "Goudy+Bookletter+1911",
      "Gravitas+One",
      "Gruppo",
      "Hammersmith+One",
      "Holtwood+One+SC",
      "Homemade+Apple",
      "Inconsolata",
      "Indie+Flower",
      "Inder",
      "IM+Fell+DW+Pica",
      "IM+Fell+DW+Pica+SC",
      "IM+Fell+Double+Pica",
      "IM+Fell+Double+Pica+SC",
      "IM+Fell+English",
      "IM+Fell+English+SC",
      "IM+Fell+French+Canon",
      "IM+Fell+French+Canon+SC",
      "IM+Fell+Great+Primer",
      "IM+Fell+Great+Primer+SC",
      "Irish+Grover",
      "Irish+Growler",
      "Istok+Web",
      "Josefin+Sans",
      "Josefin+Slab",
      "Judson",
      "Jura",
      "Jura:500",
      "Jura:600",
      "Just+Another+Hand",
      "Just+Me+Again+Down+Here",
      "Kameron",
      "Kenia",
      "Kranky",
      "Kreon",
      "Kristi",
      "La+Belle+Aurore",
      "Lato:100",
      "Lato:100italic",
      "Lato:300",
      "Lato",
      "Lato:bold",
      "Lato:900",
      "League+Script",
      "Lekton",
      "Limelight",
      "Lobster",
      "Lobster Two",
      "Lora",
      "Love+Ya+Like+A+Sister",
      "Loved+by+the+King",
      "Luckiest+Guy",
      "Maiden+Orange",
      "Mako",
      "Maven+Pro",
      "Maven+Pro:500",
      "Maven+Pro:700",
      "Maven+Pro:900",
      "Meddon",
      "MedievalSharp",
      "Megrim",
      "Merriweather",
      "Metrophobic",
      "Michroma",
      "Miltonian Tattoo",
      "Miltonian",
      "Modern Antiqua",
      "Monofett",
      "Molengo",
      "Mountains of Christmas",
      "Muli:300",
      "Muli",
      "Neucha",
      "Neuton",
      "News+Cycle",
      "Nixie+One",
      "Nobile",
      "Nova+Cut",
      "Nova+Flat",
      "Nova+Mono",
      "Nova+Oval",
      "Nova+Round",
      "Nova+Script",
      "Nova+Slim",
      "Nova+Square",
      "Nunito:light",
      "Nunito",
      "OFL+Sorts+Mill+Goudy+TT",
      "Old+Standard+TT",
      "Open+Sans:300",
      "Open+Sans",
      "Open+Sans:600",
      "Open+Sans:800",
      "Open+Sans+Condensed:300",
      "Orbitron",
      "Orbitron:500",
      "Orbitron:700",
      "Orbitron:900",
      "Oswald",
      "Over+the+Rainbow",
      "Reenie+Beanie",
      "Pacifico",
      "Patrick+Hand",
      "Paytone+One",
      "Permanent+Marker",
      "Philosopher",
      "Play",
      "Playfair+Display",
      "Podkova",
      "PT+Sans",
      "PT+Sans+Narrow",
      "PT+Sans+Narrow:regular,bold",
      "PT+Serif",
      "PT+Serif Caption",
      "Puritan",
      "Quattrocento",
      "Quattrocento+Sans",
      "Radley",
      "Raleway:100",
      "Redressed",
      "Rock+Salt",
      "Rokkitt",
      "Ruslan+Display",
      "Schoolbell",
      "Shadows+Into+Light",
      "Shanti",
      "Sigmar+One",
      "Six+Caps",
      "Slackey",
      "Smythe",
      "Sniglet:800",
      "Special+Elite",
      "Stardos+Stencil",
      "Sue+Ellen+Francisco",
      "Sunshiney",
      "Swanky+and+Moo+Moo",
      "Syncopate",
      "Tangerine",
      "Tenor+Sans",
      "Terminal+Dosis+Light",
      "The+Girl+Next+Door",
      "Tinos",
      "Ubuntu",
      "Ultra",
      "Unkempt",
      "UnifrakturCook:bold",
      "UnifrakturMaguntia",
      "Varela",
      "Varela Round",
      "Vibur",
      "Vollkorn",
      "VT323",
      "Waiting+for+the+Sunrise",
      "Wallpoet",
      "Walter+Turncoat",
      "Wire+One",
      "Yanone+Kaffeesatz",
      "Yanone+Kaffeesatz:300",
      "Yanone+Kaffeesatz:400",
      "Yanone+Kaffeesatz:700",
      "Yeseva+One",
      "Zeyada"];

    var settings = {
      style: 'font-select',
      placeholder: 'Select a font',
      lookahead: 2,
      api: 'http://fonts.googleapis.com/css?family='
    };

    var Fontselect = (function(){

      function Fontselect(original, o){
        this.$original = $(original);
        this.options = o;
        this.active = false;
        this.setupHtml();
        this.getVisibleFonts();
        this.bindEvents();

        var font = this.$original.val();
        if (font) {
          this.updateSelected();
          this.addFontLink(font);
        }
      }

      Fontselect.prototype.bindEvents = function(){

        $('li', this.$results)
        .click(__bind(this.selectFont, this))
        .mouseenter(__bind(this.activateFont, this))
        .mouseleave(__bind(this.deactivateFont, this));

        $('span', this.$select).click(__bind(this.toggleDrop, this));
        this.$arrow.click(__bind(this.toggleDrop, this));
      };

      Fontselect.prototype.toggleDrop = function(ev){

        if(this.active){
          this.$element.removeClass('font-select-active');
          this.$drop.hide();
          clearInterval(this.visibleInterval);

        } else {
          this.$element.addClass('font-select-active');
          this.$drop.show();
          this.moveToSelected();
          this.visibleInterval = setInterval(__bind(this.getVisibleFonts, this), 500);
        }

        this.active = !this.active;
      };

      Fontselect.prototype.selectFont = function(){

        var font = $('li.active', this.$results).data('value');
        this.$original.val(font).change();
        this.updateSelected();
        this.toggleDrop();
      };

      Fontselect.prototype.moveToSelected = function(){

        var $li, font = this.$original.val();

        if (font){
          $li = $("li[data-value='"+ font +"']", this.$results);
        } else {
          $li = $("li", this.$results).first();
        }

        this.$results.scrollTop($li.addClass('active').position().top);
      };

      Fontselect.prototype.activateFont = function(ev){
        $('li.active', this.$results).removeClass('active');
        $(ev.currentTarget).addClass('active');
      };

      Fontselect.prototype.deactivateFont = function(ev){

        $(ev.currentTarget).removeClass('active');
      };

      Fontselect.prototype.updateSelected = function(){

        var font = this.$original.val();
        $('span', this.$element).text(this.toReadable(font)).css(this.toStyle(font));
      };

      Fontselect.prototype.setupHtml = function(){

        this.$original.empty().hide();
        this.$element = $('<div>', {'class': this.options.style});
        this.$arrow = $('<div><b></b></div>');
        this.$select = $('<a><span>'+ this.options.placeholder +'</span></a>');
        this.$drop = $('<div>', {'class': 'fs-drop'});
        this.$results = $('<ul>', {'class': 'fs-results'});
        this.$original.after(this.$element.append(this.$select.append(this.$arrow)).append(this.$drop));
        this.$drop.append(this.$results.append(this.fontsAsHtml())).hide();
      };

      Fontselect.prototype.fontsAsHtml = function(){

        var l = fonts.length;
        var r, s, h = '';

        for(var i=0; i<l; i++){
          r = this.toReadable(fonts[i]);
          s = this.toStyle(fonts[i]);
          h += '<li data-value="'+ fonts[i] +'" style="font-family: '+s['font-family'] +'; font-weight: '+s['font-weight'] +'">'+ r +'</li>';
        }

        return h;
      };

      Fontselect.prototype.toReadable = function(font){
        return font.replace(/[\+|:]/g, ' ');
      };

      Fontselect.prototype.toStyle = function(font){
        var t = font.split(':');
        return {'font-family': this.toReadable(t[0]), 'font-weight': (t[1] || 400)};
      };

      Fontselect.prototype.getVisibleFonts = function(){

        if(this.$results.is(':hidden')) return;

        var fs = this;
        var top = this.$results.scrollTop();
        var bottom = top + this.$results.height();

        if(this.options.lookahead){
          var li = $('li', this.$results).first().height();
          bottom += li*this.options.lookahead;
        }

        $('li', this.$results).each(function(){

          var ft = $(this).position().top+top;
          var fb = ft + $(this).height();

          if ((fb >= top) && (ft <= bottom)){
            var font = $(this).data('value');
            fs.addFontLink(font);
          }

        });
      };

      Fontselect.prototype.addFontLink = function(font){

        var link = this.options.api + font;

        if ($("link[href*='" + font + "']").length === 0){
			$('link:last').after('<link href="' + link + '" rel="stylesheet" type="text/css">');
		}
      };

      return Fontselect;
    })();

    return this.each(function(options) {
      // If options exist, lets merge them
      if (options) $.extend( settings, options );

      return new Fontselect(this, settings);
    });

  };
})(jQuery);

define("fontselect", ["jquery"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.$;
    };
}(this)));

define('app/css-editor/StaticsEditorView',['require','exports','module','backbone','fontselect','util.filepicker'],function(require, exports, module) {
    'use strict';

    require('backbone');
    require('fontselect');
    require('util.filepicker');

    var StaticsEditorView = Backbone.View.extend({

        className: 'elements statics',
        events: {
            'click #upload-static': 'uploadStatic',
            'click .static-file': 'clickedStatic'
        },

        initialize: function(themeModel) {
            _.bindAll(this);
            this.model = themeModel;
        },

        render: function() {

            var temp = [
                '<div id="theme-statics" class="row"></div>',
                '<div class="btn-info btn" id="upload-static">Upload New</div>'
            ].join('\n');

            this.el.innerHTML = temp;
            this.staticsList = this.$el.find('#theme-statics');
            _(statics).each(this.appendStaticFile, this);

            return this;
        },

        uploadStatic: function() {
            var self = this;
            util.filepicker.openFilePick(this.staticsAdded, this, appId);
        },

        appendStaticFile: function(file) {
            this.staticsList.append('<div id="themestatic-' + file.id + '" class="static-file"><img src="' + file.url + '"><p class="name">' + file.name + '</p><a href="#' + file.id + '" class="btn btn-danger remove">Delete</a></div>');
        },

        deleteStaticFile: function(e) {
            var self = this;
            var imgNode = e.target.parentNode;
            var id = parseInt(imgNode.id.replace('themestatic-', ''), 10);
            $.ajax({
                type: 'POST',
                url: url + '/static/' + id + '/delete/',
                success: function() {
                    console.log('successfully deleted!');
                    util.get('theme-statics').removeChild(imgNode);
                },
                error: function(jqxhr, textStatus) {
                    message = "Error deleting file";
                    if (textStatus) {
                        message += ': ' + textStatus;
                    }
                    new ErrorDialogueView({
                        text: message
                    });
                }
            });
            return false;
        },


        staticsAdded: function(files, self) {
            _(files).each(function(file) {
                file.name = file.filename;
                self.appendStaticFile(file);
            });
        },

        clickedStatic: function(e) {
            var $el = $(e.currentTarget).find('img');
            link = $el.attr('src');
            util.copyToClipboard(link);
        }

    });

    return StaticsEditorView;
});
define('app/css-editor/BaseCSSEditorView',['require','exports','module','backbone'],function(require, exports, module) {
    'use strict';
    require('backbone');

    var BaseCSSEditorView = Backbone.View.extend({

        className: 'elements basecss',
        events: {
        },

        doneTypingInterval: 3000,

        initialize: function(themeModel) {
            _.bindAll(this);
            this.model = themeModel;
            this.typingTimer = null;
        },

        render: function() {
            var temp = [
                '<div class="base-css" id="base-css" style="height:100%; width:100%;">'
            ].join('\n');
            this.el.innerHTML = temp;
            return this;
        },

        setupAce: function() {
            this.editor = ace.edit("base-css");
            this.editor.getSession().setMode("ace/mode/css");
            this.editor.setValue(this.model.get('basecss'), -1);
            this.editor.on("change", this.keyup);
        },

        keyup: function(e) {
            if(this.typingTimer) clearTimeout(this.typingTimer);
            this.typingTimer = setTimeout(this.baseChanged, this.doneTypingInterval);
        },

        baseChanged: function(e) {
          var currentCSS = this.editor.getValue();
          this.model.set('basecss', currentCSS);
        }

    });

    return BaseCSSEditorView;
});
define('app/css-editor/FontEditorView',['require','exports','module','backbone','fontselect'],function(require, exports, module) {
    'use strict';
    
    require('backbone');
    require('fontselect');

    var FontEditorView = Backbone.View.extend({

        className: 'elements fonts',
        events: {},

        initialize: function(themeModel) {
            _.bindAll(this);
            this.model = themeModel;
        },

        render: function() {
            var temp = [
                '<input type="text" class="font-selector">',
                '<ul class="fonts hoff2"></ul>',
            ].join('\n');

            this.el.innerHTML = temp;


            var tempFont = [
              '<li class="row">',
                '<span class="remove" data-cid="<%= cid %>">×</span>',
                '<span class="font" style="font-family:<%= font %>"><%= font %></span>',
              '</li>'
            ].join('\n');

            var self = this;
            var fontStyles = document.createElement('style');
            fontStyles.type = "text/css";

            // add font to page style, and to font list
            this.model.get('fonts').each(function(font) {

                fontStyles.innerHTML += '@import url("http://fonts.googleapis.com/css?family=' + font.get('name') + ':400,700,900,400italic");\n';
                this.$el.find('.fonts').append(_.template(tempFont, {
                    font: font.get('name').replace(/\+/g, ' '),
                    cid: font.cid
                }));

            }, this);
            document.body.appendChild(fontStyles);

            console.log( $('.font-selector'));
            // setup font event handlers
            this.$el.find('.font-selector').fontselect().change(function() {
                var value = $(this).val();
                
                if (self.model.get('fonts').where({
                    name: value
                }).length > 0) {
                    return false;
                }
                var newFont = self.model.get('fonts').add({
                    name: value
                });

                var font = value.replace(/\+/g, ' ');
                self.$el.find('.fonts').append(_.template(tempFont, {
                    font: font,
                    cid: newFont.cid
                }));

            });

            this.$el.find('.fonts').on('click', 'li .remove', function(e) {
                var cid = e.currentTarget.dataset.cid;
                self.model.get('fonts').remove(cid);
                console.log(self.model.get('fonts').serialize());
                $(e.currentTarget).parent().remove();
            });

            return this;
        },

        baseChanged: function(e) {
            var currentCSS = this.editor.getValue();
            this.model.set('basecss', currentCSS);
        }

    });

    return FontEditorView;
});
define('app/ThemeDisplayView',['require','exports','module','mixins/BackboneModal','util'],function(require, exports, module) {
    'use strict';

    require('mixins/BackboneModal');
    require('util');

    var ThemeDisplayView = Backbone.ModalView.extend({
            el: null,
            events: {
                'click #load-btn': 'loadTheme'
            },
            theme: null,

            initialize: function(data) {
                _.bindAll(this);

                this.info = data.themeInfo;
                this.theme = data.theme;
                this.render();
            },

            render: function() {
                var template = ['<h2 class="span30"><%= name %></h2>',
                    '<p class="designed-by hoff1">Designed by <%= designer %></p>',
                    '<div class="span12"><img src="<%= image %>"></div>',
                    '<div class="span10 offset2 load"><div class="btn" id="load-btn">Load Theme</div></div>'
                ].join('\n');
                this.el.innerHTML = _.template(template, this.info);
            },

            loadTheme: function() {
                var url = '/app/' + appId + '/uiestate/';
                var newState = uieState;
                if (this.info.web_or_mobile == "M") {
                    url = '/app/' + appId + '/mobile_uiestate/';
                    newState = _.extend(mobileUieState, this.theme);
                } else {
                    newState = _.extend(uieState, this.theme);
                }

                var self = this;
                $.ajax({
                    type: "POST",
                    url: url,
                    data: {
                        uie_state: JSON.stringify(newState)
                    },
                    success: function(data) {
                        self.$el.find('.load').append('<div class="hoff1"><h4 class="text-success"><strong>Loaded!</strong></h4></div>');
                        setTimeout(function() {
                            self.closeModal();
                        }, 800);
                    }
                });

                this.switchToV2();
                /* Load Statics */
                $.ajax({
                    type: "GET",
                    url: '/theme/' + self.info.id + '/static/',
                    success: function(data) {
                        _(data).each(function(static_file) {
                            $.ajax({
                                type: "POST",
                                url: '/app/' + appId + '/static/',
                                data: JSON.stringify(static_file),
                                success: function(data) {}
                            });
                        });
                    }
                });
            },

            switchToV2: function() {
                v1State.get('pages').each(function(pageM) {
                    pageM.get('navbar').set('version', 2);
                    pageM.get('footer').set('version', 2);
                });

                v1.save();
            }
        }

    );

    return ThemeDisplayView;
});
define('app/ThemesGalleryView',['require','exports','module','backbone','util','app/ThemeDisplayView'],function(require, exports, module) {

    'use strict';

    require('backbone');
    require('util');
    var ThemeDisplayView = require('app/ThemeDisplayView');


    var ThemesGalleryView = Backbone.View.extend({
        css: 'gallery',
        events: {
            'mouseover  .theme': 'previewTheme',
            'mouseleave .theme': 'revertTheme',
            'click .load-theme-btn': 'loadTheme'
        },

        className: 'gallery-view',
        currentPreview: 0,

        initialize: function() {
            this.title = "Themes";
        },

        render: function() {
            this.listView = document.createElement('ul');
            this.listView.className = 'theme-gallery';

            var template = [
                '<li class="theme" class="theme-item" id="theme-<%= id %>">',
                '<h2><%= name %></h2>',
                '<p class="designed-by">Designed by <%= designer %></p>',
                '<div class="img"><img src="<%= image %>"><div class="details" id="theme-prev-<%= id %>">Previewing</div></div>',
                '<div id="theme-btn-<%= id %>" class="btn load-theme-btn">Load Theme</div>',
                '</li>'
            ].join('\n');

            _(themes).each(function(theme, index) {
                if (!theme.name) {
                    theme.name = "Theme " + index;
                }
                this.listView.innerHTML += _.template(template, theme);
            }, this);

            $(this.el).append(this.listView);

            return this;
        },

        previewTheme: function(e) {
            var themeId = String(e.currentTarget.id).replace('theme-','');

            if(this.currentPreview == themeId) return;
            $('.details.active').removeClass('active');
            var url = "/theme/" + themeId + '/sheet.css';
            this.currentPreview = themeId;
            v1.view.iframeProxy.addTempStyleSheet(url, function() {
                $('#theme-prev-' + themeId).addClass('active');
            });
        },

        revertTheme: function() {
            var self = this;
            this.currentPreview = null;
            setTimeout(function() {
                if(self.currentPreview === null) {
                    v1.view.iframeProxy.removeTempStyleSheet();
                }
            }, 200);
        },

        loadTheme: function(e) {
            $('.load-theme-btn').html("Load Theme");
            var themeId = e.currentTarget.id.replace('theme-btn-','');
            e.currentTarget.innerHTML = "Loading";
            e.currentTarget.appendChild(util.threeDots().el);

            $.ajax({
                type: "POST",
                url: '/theme/' + themeId + '/info/',
                success: function(data) {
                    var info = data.themeInfo;
                    var url = '/app/' + appId + '/uiestate/';
                    var newState = uieState;
                    newState = _.extend(uieState, this.theme);

                    var self = this;
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: {
                            uie_state: JSON.stringify(newState)
                        },
                        success: function(data) {
                            e.currentTarget.innerHTML = "Loaded!";
                            //self.$el.find('.load').append('<div class="hoff1"><h4 class="text-success"><strong>Loaded!</strong></h4></div>');
                        }
                    });

                    /* Load Statics */
                    $.ajax({
                        type: "GET",
                        url: '/theme/' + info.id + '/static/',
                        success: function(data) {
                            _(data).each(function(static_file) {
                                $.ajax({
                                    type: "POST",
                                    url: '/app/' + appId + '/static/',
                                    data: JSON.stringify(static_file),
                                    success: function(data) {}
                                });
                            });
                        }
                    });
                },
                dataType: "JSON"
            });

                
        }

    });

    return ThemesGalleryView;
});
var AnalyticsTemplates = {};
AnalyticsTemplates.main_stats = [
	'<div class="span40">',
		'<div class="row hoff1">',
			'<div class="span18 pane hi10">',
				'<strong class="total-active-users">-</strong>',
				'<span class="analyitcs-title">Active Users</span>',
			'</div>',
			'<div class="span18 offset2 pane hi10">',
				'<strong class="total-page-views">-</strong>',
				'<span class="analyitcs-title">Total Page Views</span>',
			'</div>',
		'</div>',
		'<div class="row hoff1">',
			'<div class="span18 pane hi10">',
				'<strong class="total-users">-</strong>',
				'<span class="analyitcs-title">Total Users</span>',
			'</div>',
			'<div class="span18 offset2 pane hi10">',
				'<strong class="total-visitors">-</strong>',
				'<span class="analyitcs-title">Total Visitors</span>',
			'</div>',
		'</div>',
	'</div>',
	'<div class="span16 pane hi21 hoff1 total-page-visits">',
		'<span class="analyitcs-title">Page Visits</span>',
	'</div>'
].join('\n');

define("app/templates/AnalyticsTemplates", function(){});

define('app/css-editor/CSSEditorView',['require','exports','module','./UIElementListView','./StaticsEditorView','./BaseCSSEditorView','./FontEditorView','./UIElementEditingView','app/ThemesGalleryView','app/templates/AnalyticsTemplates','backbone'],function(require, exports, module) {
    'use strict';

    var UIElementListView = require('./UIElementListView');
    var StaticsEditorView = require('./StaticsEditorView');
    var BaseCSSEditorView = require('./BaseCSSEditorView');

    var FontEditorView    = require('./FontEditorView');

    var UIElementEditingView = require('./UIElementEditingView');
    var ThemesGalleryView    = require('app/ThemesGalleryView');

    require('app/templates/AnalyticsTemplates');
    require('backbone');

    var CSSEditorView = Backbone.View.extend({

        elements: [{
                id: "basecss",
                key: "basecss",
                text: "Base CSS"
            }, {
                id: "fonts",
                key: "fonts",
                text: "Fonts"
            }, {
                id: "button",
                key: "buttons",
                text: "Button"
            }, {
                id: "image",
                key: "images",
                text: "Images"
            }, {
                id: "header-text",
                key: "headerTexts",
                text: "Headers"
            }, {
                id: "text",
                key: "texts",
                text: "Texts"
            }, {
                id: "link",
                key: "links",
                text: "Links"
            }, {
                id: "text-input",
                key: "textInputs",
                text: "Text Inputs"
            }, {
                id: "password",
                key: "passwords",
                text: "Password Inputs"
            }, {
                id: "text-area",
                key: "textAreas",
                text: "Text Area"
            }, {
                id: "line",
                key: "lines",
                text: "Lines"
            }, {
                id: "dropdown",
                key: "dropdowns",
                text: "Dropdowns"
            }, {
                id: "box",
                key: "boxes",
                text: "Boxes"
            }, {
                id: "form",
                key: "forms",
                text: "Forms"
            }, {
                id: "list",
                key: "lists",
                text: "Lists"
            }, {
                id: "statics",
                key: "statics",
                text: "Static Files"
            }

        ],

        events: {
            'click #theme-picker-btn' : 'openThemePicker',
            'click #navigate-back'    : 'navBack'
        },


        expanded: false,

        initialize: function() {
            _.bindAll(this);

            this.model = v1UIEState;
            this.lastSave = null;
            this.deepListenTo(this.model, 'change', this.save);

            _.each(this.model.getUIElementCollections(), function(coll) {
                this.listenTo(coll, 'selected', this.styleSelected);
            }, this);

            // TODO: get this back
            // var elementsCollection = v1State.getCurrentPage().get('uielements');
            // elementsCollection.each(this.bindWidget, this);

            // this.listenTo(elementsCollection, 'add', this.bindWidget);
        },

        bindWidget: function(widgetModel) {
            this.listenTo(widgetModel, 'selected', function() {
                //this.elementSelected(widgetModel);
            });
        },

        render: function() {
            var self = this;

            /* Top Row */
            var titleEl = document.createElement('div');
            titleEl.className = 'title';
            this.titleDiv = titleEl;
            this.$el.find('.top-row').append(this.titleDiv);

            /* Elements List */
            this.elementsList = document.createElement('ul');
            this.elementsList.innerHTML += '<li id="theme-picker-btn"><a>Pick a Theme</li>';
            _.each(this.elements, function(element) {
                var id = element.id;
                var liEl = document.createElement('li');
                liEl.id = id;
                
                var aEl = document.createElement('a');
                aEl.innerHTML = element.text;
                liEl.appendChild(aEl);
                
                this.elementsList.appendChild(liEl);

                $(liEl).bind('click', function() {
                    self.showElementType(id, element.key, element.text);
                });

            }, this);
            this.el.appendChild(this.elementsList);

            this.setTitle("CSS Editor");
            this.$el.find('.navback').hide();

            return this;
        },

        showElementType: function(type, key, text) {

            switch (type) {
                case "basecss":
                    
                    var editorView = new BaseCSSEditorView(this.model);
                    $(this.elementsList).hide();
                    this.setTitle("Base CSS");
                    this.expandExtra();
                    this.makeResizable();
                    this.el.appendChild(editorView.render().el);
                    editorView.setupAce();
                    this.currentView = editorView;
                    this.$el.find('.navback').show();

                    break;
                
                case "fonts":

                    var fontEditorView = new FontEditorView(this.model);
                    $(this.elementsList).hide();
                    this.setTitle("Fonts");
                    this.el.appendChild(fontEditorView.render().el);
                    this.currentView = fontEditorView;
                    this.$el.find('.navback').show();

                    break;

                case "statics":

                    var staticsEditor = new StaticsEditorView(this.model);
                    $(this.elementsList).hide();
                    this.setTitle("Static Files");
                    this.el.appendChild(staticsEditor.render().el);
                    this.currentView = staticsEditor;
                    this.$el.find('.navback').show();

                    break;

                default:
                    var listView = new UIElementListView(this.model.get(key), type);
                    $(this.elementsList).hide();
                    this.setTitle(text);
                    this.el.appendChild(listView.render().el);
                    this.currentView = listView;
                    this.$el.find('.navback').show();
                    
                    break;
            }
        },

        styleSelected: function(styleModel) {
            if(this.currentView) this.currentView.close();
            $(this.elementsList).hide();

            styleModel = styleModel[0];

            this.currentView = new UIElementEditingView({ model: styleModel });
            this.el.appendChild(this.currentView.render().el);

            this.setTitle(styleModel.get('class_name'));
            this.currentView.setupAce();
        },

        elementSelected: function(widgetModel) {

            if(!this.expanded) return;

            var type = widgetModel.get('data').get('nodeType');
            if(widgetModel.isList()) {
                type = "lists";
            }
            var className = widgetModel.get('data').get('class_name');
            var styleModel = this.model.getStyleWithClassAndType(className, type);
            this.$el.find('.navback').show();
            //this.styleSelected(styleModel);
        },

        openThemePicker: function() {
            if(this.currentView) this.currentView.close();
            $(this.elementsList).hide();

            this.currentView = new ThemesGalleryView();
            this.el.appendChild(this.currentView.render().el);
            this.setTitle("Theme Picker");
            this.$el.find('.navback').show();
        },

        navBack: function() {
            this.currentView.close();
            this.expand();
            this.disableResizable();
            $(this.elementsList).show();
            this.setTitle("CSS Editor");
            this.$el.find('.navback').hide();
        },

        setTitle: function(str) {
            this.titleDiv.innerHTML = str;
        },

        makeResizable: function () {
            var self = this;
            this.$el.resizable({
                handles: "e",
                iframeFix: true,
                start: function(event, ui) {
                    $('#page').css('pointer-events','none');
                    self.$el.removeClass('animated');
                },
                stop: function(event, ui) {
                    $('#page').css('pointer-events','auto');
                    self.$el.addClass('animated');
                }
            });
        },

        disableResizable: function (argument) {
            if(this.$el.hasClass("ui-resizable")) {
                this.$el.resizable( "destroy" );
                this.el.style.width = '';
            }
        },

        expandExtra: function (argument) {
            
            if(!this.$el.hasClass('expanded')){
                this.el.className += ' expanded';
            }
            
            if(!this.$el.hasClass('extra')) {
                this.el.className += ' extra';
            }
            
            this.expanded = true;
        },

        expand: function() {
            if(!this.$el.hasClass('expanded')) {
                this.el.className += ' expanded';
            }

            if(this.$el.hasClass('extra')) {
                this.$el.removeClass('extra');
            }
           
            this.expanded = true;
        },

        hide: function() {
            this.$el.removeClass('expanded');
            this.disableResizable();
            this.expanded = false;
        },

        save: function() {
            var self = this;
            var json = this.model.serialize();
            var save_url = '/app/' + appId + '/uiestate/';
            // var currentTime = new Date().getTime();
            
            // if(this.lastSave === null || currentTime - this.lastSave < 3000) {
            //     if(this.timer) clearTimeout(this.timer);
            //     if(this.lastSave === null) {
            //         this.lastSave = currentTime + 1;
            //     }

            //     this.timer = setTimeout(this.save, 3000);
            //     return;
            // }

            // this.lastSave = currentTime;
            $.ajax({
                type: "POST",
                url: save_url,
                data: {
                    uie_state: JSON.stringify(json)
                },
                statusCode: {
                    200: function(data) {
                        console.log('Saved.');
                        self.model.trigger('synced');
                    },
                    500: function() {
                        alert('Server Error');
                    }
                },
                dataType: "JSON"
            });
        }

    });

    return CSSEditorView;
});
/**
* http://www.openjs.com/scripts/events/keyboard_shortcuts/
* Version : 2.01.B
* By Binny V A
* License : BSD
*/
var shortcut = {
  'all_shortcuts': {}, //All the shortcuts are stored in this array
  'add': function (shortcut_combination, callback, opt) {
    //Provide a set of default options
    var default_options = {
      'type': 'keydown',
      'propagate': false,
      'disable_in_input': false,
      'target': document,
      'keycode': false
    };
    if (!opt) {
      opt = default_options;
    }
    else {
      var dfo;
      for (dfo in default_options) {
        if (typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];
      }
    }

    var ele = opt.target;
    if (typeof opt.target == 'string') ele = document.getElementById(opt.target);
    var ths = this;
    shortcut_combination = shortcut_combination.toLowerCase();

    //The function to be called at keypress
    var func = function (e) {
      e = e || window.event;

      if (opt['disable_in_input']) { //Don't enable shortcut keys in Input, Textarea fields
        var element;
        if (e.target) element = e.target;
        else if (e.srcElement) element = e.srcElement;
        if (element.nodeType == 3) element = element.parentNode;

        if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;
      }

      //Find Which key is pressed
      if (e.keyCode) code = e.keyCode;
      else if (e.which) code = e.which;
      var character = String.fromCharCode(code).toLowerCase();

      if (code == 188) character = ","; //If the user presses , when the type is onkeydown
      if (code == 190) character = "."; //If the user presses , when the type is onkeydown

      var keys = shortcut_combination.split("+");
      //Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked
      var kp = 0;

      //Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken
      var shift_nums = {
        "`": "~",
        "1": "!",
        "2": "@",
        "3": "#",
        "4": "$",
        "5": "%",
        "6": "^",
        "7": "&",
        "8": "*",
        "9": "(",
        "0": ")",
        "-": "_",
        "=": "+",
        ";": ":",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?",
        "\\": "|"
      }
      //Special Keys - and their codes
      var special_keys = {
        'esc': 27,
        'escape': 27,
        'tab': 9,
        'space': 32,
        'return': 13,
        'enter': 13,
        'backspace': 8,

        'scrolllock': 145,
        'scroll_lock': 145,
        'scroll': 145,
        'capslock': 20,
        'caps_lock': 20,
        'caps': 20,
        'numlock': 144,
        'num_lock': 144,
        'num': 144,

        'pause': 19,
        'break': 19,

        'insert': 45,
        'home': 36,
        'delete': 46,
        'end': 35,

        'pageup': 33,
        'page_up': 33,
        'pu': 33,

        'pagedown': 34,
        'page_down': 34,
        'pd': 34,

        'left': 37,
        'up': 38,
        'right': 39,
        'down': 40,

        'f1': 112,
        'f2': 113,
        'f3': 114,
        'f4': 115,
        'f5': 116,
        'f6': 117,
        'f7': 118,
        'f8': 119,
        'f9': 120,
        'f10': 121,
        'f11': 122,
        'f12': 123
      }

      var modifiers = {
        shift: { wanted: false, pressed: false },
        ctrl: { wanted: false, pressed: false },
        alt: { wanted: false, pressed: false },
        meta: { wanted: false, pressed: false}  //Meta is Mac specific
      };

      if (e.ctrlKey) modifiers.ctrl.pressed = true;
      if (e.shiftKey) modifiers.shift.pressed = true;
      if (e.altKey) modifiers.alt.pressed = true;
      if (e.metaKey) modifiers.meta.pressed = true;

      for (var i = 0; k = keys[i], i < keys.length; i++) {
        //Modifiers
        if (k == 'ctrl' || k == 'control') {
          kp++;
          modifiers.ctrl.wanted = true;

        } else if (k == 'shift') {
          kp++;
          modifiers.shift.wanted = true;

        } else if (k == 'alt') {
          kp++;
          modifiers.alt.wanted = true;
        } else if (k == 'meta') {
          kp++;
          modifiers.meta.wanted = true;
        } else if (k.length > 1) { //If it is a special key
          if (special_keys[k] == code) kp++;

        } else if (opt['keycode']) {
          if (opt['keycode'] == code) kp++;

        } else { //The special keys did not match
          if (character == k) kp++;
          else {
            if (shift_nums[character] && e.shiftKey) { //Stupid Shift key bug created by using lowercase
              character = shift_nums[character];
              if (character == k) kp++;
            }
          }
        }
      }

      if (kp == keys.length &&
            modifiers.ctrl.pressed == modifiers.ctrl.wanted &&
            modifiers.shift.pressed == modifiers.shift.wanted &&
            modifiers.alt.pressed == modifiers.alt.wanted &&
            modifiers.meta.pressed == modifiers.meta.wanted) {
        callback(e);

        if (!opt['propagate']) { //Stop the event
          //e.cancelBubble is supported by IE - this will kill the bubbling process.
          e.cancelBubble = true;
          e.returnValue = false;

          //e.stopPropagation works in Firefox.
          if (e.stopPropagation) {
            e.stopPropagation();
            e.preventDefault();
          }
          return false;
        }
      }
    }
    this.all_shortcuts[shortcut_combination] = {
      'callback': func,
      'target': ele,
      'event': opt['type']
    };
    //Attach the function with the event
    if (ele.addEventListener) ele.addEventListener(opt['type'], func, false);
    else if (ele.attachEvent) ele.attachEvent('on' + opt['type'], func);
    else ele['on' + opt['type']] = func;
  },

  //Remove the shortcut - just specify the shortcut and I will remove the binding
  'remove': function (shortcut_combination) {
    shortcut_combination = shortcut_combination.toLowerCase();
    var binding = this.all_shortcuts[shortcut_combination];
    delete (this.all_shortcuts[shortcut_combination])
    if (!binding) return;
    var type = binding['event'];
    var ele = binding['target'];
    var callback = binding['callback'];

    if (ele.detachEvent) ele.detachEvent('on' + type, callback);
    else if (ele.removeEventListener) ele.removeEventListener(type, callback, false);
    else ele['on' + type] = false;
  }
};
define("shortcut", function(){});

(function() {
    (function($) {
        var methods;
        methods = {
            edit: function(isEditing) {
                return this.each(function() {
                    return $(this).attr("contentEditable", isEditing || false);
                });
            },
            save: function(callback) {
                return this.each(function() {
                    return callback($(this).attr('id'), $(this).html());
                });
            },
            createlink: function() {
                var urlPrompt;
                urlPrompt = prompt("Enter URL:", "http://");
                return document.execCommand("createlink", false, urlPrompt);
            },
            insertimage: function() {
                var urlPrompt;
                urlPrompt = prompt("Enter Image URL:", "http://");
                return document.execCommand("insertimage", false, urlPrompt);
            },
            formatblock: function(block) {
                return document.execCommand("formatblock", null, block);
            },
            init: function(opts) {
                var $toolbar, button, command, commands, excludes, font, font_list, fontnames, fontsize, fontsizes, group, groups, options, shortcuts, size_list, _i, _j, _k, _l, _len, _len2, _len3, _len4;
                options = opts || {};
                groups = [
                    [{
                        name: 'bold',
                        label: "<span style='font-weight:bold;'>B</span>",
                        title: 'Bold (Ctrl+B)',
                        classname: 'toolbar_bold'
                    }, {
                        name: 'italic',
                        label: "<span style='font-style:italic;'>I</span>",
                        title: 'Italic (Ctrl+I)',
                        classname: 'toolbar_italic'
                    }, {
                        name: 'underline',
                        label: "<span style='text-decoration:underline!important;'>U</span>",
                        title: 'Underline (Ctrl+U)',
                        classname: 'toolbar_underline'
                    }, {
                        name: 'strikethrough',
                        label: "<span style='text-shadow:none;text-decoration:line-through;'>ABC</span>",
                        title: 'Strikethrough',
                        classname: 'toolbar_strikethrough'
                    }, {
                        name: 'removeFormat',
                        label: "<i class='icon-minus'></i>",
                        title: 'Remove Formating (Ctrl+M)',
                        classname: 'toolbar_remove'
                    }],
                    [{
                        name: 'fontname',
                        label: "F <span class='caret'></span>",
                        title: 'Select font name',
                        classname: 'toolbar_fontname dropdown-toggle',
                        dropdown: true
                    }],
                    [{
                        name: 'FontSize',
                        label: "<span style='font:bold 16px;'>A</span><span style='font-size:8px;'>A</span> <span class='caret'></span>",
                        title: 'Select font size',
                        classname: 'toolbar_fontsize dropdown-toggle',
                        dropdown: true
                    }],
                    [{
                        name: 'forecolor',
                        label: "<div style='color:#ff0000;'>A <span class='caret'></span></div>",
                        title: 'Select font color',
                        classname: 'toolbar_forecolor dropdown-toggle',
                        dropdown: true
                    }],
                    [{
                        name: 'backcolor',
                        label: "<div style='display:inline-block;margin:3px;width:15px;height:12px;background-color:#0000ff;'></div> <span class='caret'></span>",
                        title: 'Select background color',
                        classname: 'toolbar_bgcolor dropdown-toggle',
                        dropdown: true
                    }],
                    [{
                        name: 'justifyleft',
                        label: "<i class='icon-align-left'></i>",
                        title: 'Left justify',
                        classname: 'toolbar_justifyleft'
                    }, {
                        name: 'justifycenter',
                        label: "<i class='icon-align-center'></i>",
                        title: 'Center justify',
                        classname: 'toolbar_justifycenter'
                    }, {
                        name: 'justifyright',
                        label: "<i class='icon-align-right'></i>",
                        title: 'Right justify',
                        classname: 'toolbar_justifyright'
                    }, {
                        name: 'justifyfull',
                        label: "<i class='icon-align-justify'></i>",
                        title: 'Full justify',
                        classname: 'toolbar_justifyfull'
                    }],
                    [{
                        name: 'createlink',
                        label: '<i>@</i>',
                        title: 'Link to a web page (Ctrl+L)',
                        userinput: "yes",
                        classname: 'toolbar_link'
                    }, {
                        name: 'insertimage',
                        label: "<i style='margin-top:2px;' class='icon-picture'></i>",
                        title: 'Insert an image (Ctrl+G)',
                        userinput: "yes",
                        classname: 'toolbar_image'
                    }, {
                        name: 'insertorderedlist',
                        label: "<i class='icon-list-alt' style='margin-top:2px;'></i>",
                        title: 'Insert ordered list',
                        classname: 'toolbar_ol'
                    }, {
                        name: 'insertunorderedlist',
                        label: "<i class='icon-list' style='margin-top:2px;'></i>",
                        title: 'Insert unordered list',
                        classname: 'toolbar_ul'
                    }],
                    [{
                        name: 'insertparagraph',
                        label: 'P',
                        title: 'Insert a paragraph (Ctrl+Alt+0)',
                        classname: 'toolbar_p',
                        block: 'p'
                    }, {
                        name: 'insertheading1',
                        label: 'H1',
                        title: "Heading 1 (Ctrl+Alt+1)",
                        classname: 'toolbar_h1',
                        block: 'h1'
                    }, {
                        name: 'insertheading2',
                        label: 'H2',
                        title: "Heading 2 (Ctrl+Alt+2)",
                        classname: 'toolbar_h2',
                        block: 'h2'
                    }, {
                        name: 'insertheading3',
                        label: 'H3',
                        title: "Heading 3 (Ctrl+Alt+3)",
                        classname: 'toolbar_h3',
                        block: 'h3'
                    }, {
                        name: 'insertheading4',
                        label: 'H4',
                        title: "Heading 4 (Ctrl+Alt+4)",
                        classname: 'toolbar_h4',
                        block: 'h4'
                    }],
                    [{
                        name: 'blockquote',
                        label: "<i style='margin-top:2px;' class='icon-comment'></i>",
                        title: 'Blockquote (Ctrl+Q)',
                        classname: 'toolbar_blockquote',
                        block: 'blockquote'
                    }, {
                        name: 'code',
                        label: '{&nbsp;}',
                        title: 'Code (Ctrl+Alt+K)',
                        classname: 'toolbar_code',
                        block: 'pre'
                    }, {
                        name: 'superscript',
                        label: 'x<sup>2</sup>',
                        title: 'Superscript',
                        classname: 'toolbar_superscript'
                    }, {
                        name: 'subscript',
                        label: 'x<sub>2</sub>',
                        title: 'Subscript',
                        classname: 'toolbar_subscript'
                    }]
                ];
                if (options.toolbar_selector != null) {
                    $toolbar = $(options.toolbar_selector, parent.window.document);
                } else {
                    $(this).before("<div id='editor-toolbar'></div>");
                    $toolbar = $('#editor-toolbar');
                }
                $toolbar.addClass('fresheditor-toolbar');
                $toolbar.append("<div class='btn-toolbar'></div>");

                excludes = options.excludes || [];
                for (_i = 0, _len = groups.length; _i < _len; _i++) {
                    commands = groups[_i];
                    group = '';
                    for (_j = 0, _len2 = commands.length; _j < _len2; _j++) {
                        command = commands[_j];
                        if (jQuery.inArray(command.name, excludes) < 0) {
                            button = "<a href='#' class='option-button toolbar-cmd " + command.classname + "' title='" + command.title + "' command='" + command.name + "'";
                            if (command.userinput != null) {
                                button += " userinput='" + command.userinput + "'";
                            }
                            if (command.block != null) {
                                button += " block='" + command.block + "'";
                            }
                            if (command.dropdown) {
                                /* Hack to make the dropdown <select> instead of bootstrap */
                                button = "<select class='toolbar-cmd " + command.classname + "' title='" + command.title + "' command='" + command.name + "'";
                                button += "";
                            }
                            button += ">" + command.label + "</select>";
                            group += button;
                        }
                    }
                    $('.btn-toolbar', $toolbar).append("<div class='btn-group'>" + group + "</div>");
                }
                $("[data-toggle='dropdown']").removeClass('toolbar-cmd');
                if (jQuery.inArray('fontname', excludes) < 0) {
                    fontnames = ["Arial", "Arial Black", "Comic Sans MS", "Courier New", "Georgia", "Helvetica", "Sans Serif", "Tahoma", "Times New Roman", "Trebuchet MS", "Verdana"];
                    font_list = '';
                    for (_k = 0, _len3 = fontnames.length; _k < _len3; _k++) {
                        font = fontnames[_k];
                        font_list += "<li><a href='#' class='fontname-option' style='font-family:" + font + ";'>" + font + "</a></li>";
                    }
                    $toolbar.find('.toolbar_fontname').after("<ul class='dropdown-menu'>" + font_list + "</ul>");
                    $toolbar.find('.fontname-option').on('click', function() {
                        document.execCommand("fontname", false, $(this).text());
                        $(this).closest('.btn-group').removeClass('open');
                    });
                }
                if (jQuery.inArray('FontSize', excludes) < 0) {
                    fontsizes = [{
                        size: "default",
                        point: "default"
                    }, {
                        size: 1,
                        point: 8
                    }, {
                        size: 2,
                        point: 10
                    }, {
                        size: 3,
                        point: 12
                    }, {
                        size: 4,
                        point: 14
                    }, {
                        size: 5,
                        point: 18
                    }, {
                        size: 6,
                        point: 24
                    }, {
                        size: 7,
                        point: 36
                    }];
                    size_list = '';
                    for (_l = 0, _len4 = fontsizes.length; _l < _len4; _l++) {
                        fontsize = fontsizes[_l];
                        if(fontsize.point == "default") {
                            size_list += "<option value='" + fontsize.size + "'>Default</option>";
                        }
                        else {
                            size_list += "<option value='" + fontsize.size + "'>" + fontsize.point + "pt</option>";
                        }
                    }
                    $toolbar.find('.toolbar_fontsize').html(size_list);
                    // $('a.fontsize-option').on('click', function() {
                    //   document.execCommand("FontSize", false, $(this).attr('fontsize'));
                    //   $(this).closest('.btn-group').removeClass('open');
                    //   return false;
                    // });
                }
                if (jQuery.inArray('forecolor', excludes) < 0) {
                    $toolbar.find('a.toolbar_forecolor').after("<ul class='dropdown-menu colorpanel'><input type='text' id='forecolor-input' value='#000000' /><div id='forecolor-picker'></div></ul>");
                    // $('#forecolor-picker').farbtastic(function(color) {
                    //   $('#forecolor-input').val(color);
                    //   document.execCommand("forecolor", false, color);
                    //   $(this).closest('.btn-group').removeClass('open');
                    //   $('.toolbar_forecolor div').css({
                    //     "color": color
                    //   });
                    //   return false;
                    // });
                }
                if (jQuery.inArray('backcolor', excludes) < 0) {
                    $toolbar.find('a.toolbar_bgcolor').after("<ul class='dropdown-menu colorpanel'><input type='text' id='bgcolor-input' value='#000000' /><div id='bgcolor-picker'></div></ul>");
                    // $('#bgcolor-picker').farbtastic(function(color) {
                    //   $('#bgcolor-input').val(color);
                    //   document.execCommand("backcolor", false, color);
                    //   $(this).closest('.btn-group').removeClass('open');
                    //   $('.toolbar_bgcolor div').css({
                    //     "background-color": color
                    //   });
                    //   return false;
                    // });
                }
                $(this).on('focus', function() {
                    var $this;
                    $this = $(this);
                    $this.data('before', $this.html());
                    return $this;
                }).on('blur keyup paste', function() {
                    var $this;
                    $this = $(this);
                    if ($this.data('before') !== $this.html()) {
                        $this.data('before', $this.html());
                        $this.trigger('change');
                    }
                    return $this;
                });

                $toolbar.find("select.toolbar-cmd").on('change', function() {
                    var ceNode, cmd, dummy, range;
                    cmd = $(this).attr('command');

                    if ($(this).attr('userinput') === 'yes') {
                        methods[cmd].apply(this);
                    } else if ($(this).attr('block')) {
                        methods['formatblock'].apply(this, ["<" + ($(this).attr('block')) + ">"]);
                    } else {
                        if ((cmd === 'justifyright') || (cmd === 'justifyleft') || (cmd === 'justifycenter') || (cmd === 'justifyfull')) {
                            try {
                                document.execCommand(cmd, false, null);
                            } catch (e) {
                                if (e && e.result === 2147500037) {
                                    range = window.getSelection().getRangeAt(0);
                                    dummy = document.createElement('br');
                                    ceNode = range.startContainer.parentNode;
                                    while ((ceNode != null) && ceNode.contentEditable !== 'true') {
                                        ceNode = ceNode.parentNode;
                                    }
                                    if (!ceNode) {
                                        throw 'Selected node is not editable!';
                                    }
                                    ceNode.insertBefore(dummy, ceNode.childNodes[0]);
                                    document.execCommand(cmd, false, null);
                                    dummy.parentNode.removeChild(dummy);
                                } else if (console && console.log) {
                                    console.log(e);
                                }
                            }
                        } else if (cmd == "FontSize") {
                            if ($(this).val() == "default") {
                                document.execCommand("FontSize",false,"inherit");
                                document.execCommand("removeFormat", false, "FontSize");
                            }
                            else {
                                document.execCommand("FontSize", false, $(this).val());
                            }
                        } else {
                            document.execCommand(cmd, false, null);
                        }
                    }
                });

                $toolbar.find("a.toolbar-cmd").on('click', function() {

                    var ceNode, cmd, dummy, range;
                    cmd = $(this).attr('command');

                    if ($(this).attr('userinput') === 'yes') {
                        methods[cmd].apply(this);
                    } else if ($(this).attr('block')) {
                        methods['formatblock'].apply(this, ["<" + ($(this).attr('block')) + ">"]);
                    } else {
                        if ((cmd === 'justifyright') || (cmd === 'justifyleft') || (cmd === 'justifycenter') || (cmd === 'justifyfull')) {
                            try {
                                document.execCommand(cmd, false, null);
                            } catch (e) {
                                if (e && e.result === 2147500037) {
                                    range = window.getSelection().getRangeAt(0);
                                    dummy = document.createElement('br');
                                    ceNode = range.startContainer.parentNode;
                                    while ((ceNode != null) && ceNode.contentEditable !== 'true') {
                                        ceNode = ceNode.parentNode;
                                    }
                                    if (!ceNode) {
                                        throw 'Selected node is not editable!';
                                    }
                                    ceNode.insertBefore(dummy, ceNode.childNodes[0]);
                                    document.execCommand(cmd, false, null);
                                    dummy.parentNode.removeChild(dummy);
                                } else if (console && console.log) {
                                    console.log(e);
                                }
                            }
                        } else {
                            document.execCommand(cmd, false, null);
                        }
                    }
                });
                shortcuts = [{
                    keys: 'Ctrl+l',
                    method: function() {
                        return methods.createlink.apply(this);
                    }
                }, {
                    keys: 'Ctrl+g',
                    method: function() {
                        return methods.insertimage.apply(this);
                    }
                }, {
                    keys: 'Ctrl+Alt+U',
                    method: function() {
                        return document.execCommand('insertunorderedlist', false, null);
                    }
                }, {
                    keys: 'Ctrl+Alt+O',
                    method: function() {
                        return document.execCommand('insertorderedlist', false, null);
                    }
                }, {
                    keys: 'Ctrl+q',
                    method: function() {
                        return methods.formatblock.apply(this, ["<blockquote>"]);
                    }
                }, {
                    keys: 'Ctrl+Alt+k',
                    method: function() {
                        return methods.formatblock.apply(this, ["<pre>"]);
                    }
                }, {
                    keys: 'Ctrl+.',
                    method: function() {
                        return document.execCommand('superscript', false, null);
                    }
                }, {
                    keys: 'Ctrl+Shift+.',
                    method: function() {
                        return document.execCommand('subscript', false, null);
                    }
                }, {
                    keys: 'Ctrl+Alt+0',
                    method: function() {
                        return methods.formatblock.apply(this, ["p"]);
                    }
                }, {
                    keys: 'Ctrl+b',
                    method: function() {
                        return document.execCommand('bold', false, null);
                    }
                }, {
                    keys: 'Ctrl+i',
                    method: function() {
                        return document.execCommand('italic', false, null);
                    }
                }, {
                    keys: 'Ctrl+Alt+1',
                    method: function() {
                        return methods.formatblock.apply(this, ["H1"]);
                    }
                }, {
                    keys: 'Ctrl+Alt+2',
                    method: function() {
                        return methods.formatblock.apply(this, ["H2"]);
                    }
                }, {
                    keys: 'Ctrl+Alt+3',
                    method: function() {
                        return methods.formatblock.apply(this, ["H3"]);
                    }
                }, {
                    keys: 'Ctrl+Alt+4',
                    method: function() {
                        return methods.formatblock.apply(this, ["H4"]);
                    }
                }, {
                    keys: 'Ctrl+m',
                    method: function() {
                        return document.execCommand("removeFormat", false, null);
                    }
                }, {
                    keys: 'Ctrl+u',
                    method: function() {
                        return document.execCommand('underline', false, null);
                    }
                }, {
                    keys: 'tab',
                    method: function() {
                        return document.execCommand('indent', false, null);
                    }
                }, {
                    keys: 'Ctrl+tab',
                    method: function() {
                        return document.execCommand('indent', false, null);
                    }
                }, {
                    keys: 'Shift+tab',
                    method: function() {
                        return document.execCommand('outdent', false, null);
                    }
                }];
                $.each(shortcuts, function(index, elem) {
                    return shortcut.add(elem.keys, function() {
                        elem.method();
                        return false;
                    }, {
                        'type': 'keydown',
                        'propagate': false
                    });
                });
                return this.each(function() {
                    var $this, data, tooltip;
                    $this = $(this);
                    data = $this.data('fresheditor');
                    tooltip = $('<div/>', {
                        text: $this.attr('title')
                    });
                    if (!data) {
                        return $(this).data('fresheditor', {
                            target: $this,
                            tooltip: tooltip
                        });
                    }
                });
            }
        };
        return $.fn.freshereditor = function(method) {
            if (methods[method]) {
                methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
            } else if (typeof method === 'object' || !method) {
                methods.init.apply(this, arguments);
            } else {
                $.error('Method ' + method + ' does not exist on jQuery.contentEditable');
            }
        };
    })(jQuery);
}).call(this);
define("jquery.freshereditor", ["jquery","shortcut"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.$;
    };
}(this)));

var Templates = {};

Templates.tempMeta = [
  '<ul class="meta" style="display:none;">',
    '<li><img class="delete" src="/static/img/delete-icon.png"></li>',
    '<li><img class="delete" src="/static/img/delete-icon.png"></li>',
  '</ul>'
].join('\n');


Templates.tempNode = [
  '<<%= element.tagName %> ',
  'class = "<%= element.class_name %>" ',
  '<% _(element.cons_attribs).each(function(val, key) { %>',
  '<%=key%>="<%=val%>"<% }); %> ',
  '<% _(element.content_attribs).each(function(val, key) { %>',
  '<%=key%>="<%=val%>"<% }); %>> ',
  '<% if(!element.isSingle) { %>',
  '<%= element.content %>',
  '</<%= element.tagName %>>',
  '<% }; %>'
].join('');

Templates.NavbarEditor = [
  '<div>',
    '<div class="clone">Click here to clone navigation bar from another page.</div>',
    '<div class="hoff1">',
      '<h4 class="offset1">Main Title</h4><input type="text" name="edit-brandName" class="span16" style="float:none;" id="edit-brandname" value="<%= brandName %>">',
    '</div>',
    '<hr>',
    '<h4 class="offset1">Links</h4>',
    '<div class="links-list hoff1">',
      '<ul id="link-editors"></ul>',
      '<div class="well well-small add-link">',
      'Add Link',
      '</div>',
    '</div>',
  '</div>'
].join('\n');

Templates.FooterEditor = [
  '<div>',
    '<div class="clone">Click here to clone footer from another page.</div>',
    '<div class="hoff1">',
      '<h4 class="offset1">Custom Footer Text</h4><input type="text" name="edit-customText" class="span16" style="float:none;" id="edit-customText" value="<%= customText %>">',
    '</div>',
    '<hr>',
    '<h4 class="offset1">Links</h4>',
    '<div class="links-list hoff1">',
      '<ul id="link-editors"></ul>',
      '<div class="well well-small add-link">',
      'Add Link',
      '</div>',
    '</div>',
  '</div>'
].join('\n');

Templates.LinkEditor = [
  '<div class="row">',
    '<div class="span12">',
      '<label>Link title</label>',
      '<input class="link-title" type="text" value="<%= title %>"">',
    '</div>',
    '<div class="span20">',
      '<div class="select-container">',
        '<label>Location</label>',
        '<select class="link-options"></select>',
      '</div>',
      '<div class="url-container" style="display: none">',
        '<label>Url</label>',
        '<input type="url" class="url" id="url" value="<%= url %>">',
      '</div>',
    '</div>',
    '<a class="remove" style="float:right" href="#">Delete Link</a>',
  '</div>'
].join('\n');


Templates.tempLi = [
  '<li id="entity-user-<%= attr %>" class="large single-data">',
  '<span class="name">Show <%= name %> <%= attr %></span></li>'
].join('\n');

Templates.tempLiSingleData = [
  '<li id="entity-<%= cid %>-<%= attr %>" class="large single-data">',
  '<span class="name">Show <%= name %> <%= attr %></span></li>'
].join('\n');

Templates.tempLiEntity = [
  '<li id="entity-<%= cid %>" class="show entity">',
  '<span class="name">List of <%= name %></span></li>'
].join('\n');

Templates.tempLiTable = [
  '<li id="entity-<%= cid %>" class="table-gal entity">',
  '<span class="name"><%= name %> Table</span></li>'
].join('\n');

Templates.tempHrefSelect = [
  '<select class="select-href" id="prop-<%= hash %>">',
  "<% _(listOfPages).each(function(page){ var b = ''; if(('internal://'+page) == val){ b = 'selected';}%>",
  '<option value="internal://<%= page %>" <%= b %>><%= page %></option>',
  '<%  }) %>',
  '<% if(external) { %><option value="<%= external %>" selected><%= external %></option><% }; %>',
  '<option value="external-link">External Link</option>',
  '</select>'
].join('\n');

Templates.tempSourceSelect = [
  '<select class="statics"  id="prop-<%= hash %>">',
  '<option class="upload-image">Placeholder</option>',
  "<% _(statics).each(function(asset){ var b = ''; if(asset == val){ b = 'selected';} %>",
  '<option value="<%= asset.url %>" <%= b %>><%= asset.name %></option>',
  '<%  }) %>',
  '<option class="upload-image" value="upload-image">+ Upload an image</option>',
  '</select>'
].join('\n');

Templates.tableNode = [
  '<table class="table table-bordered">',
    '<tr><% _(fieldsToDisplay).each(function(field) { %> <td><%= field %></td> <% }); %></tr>',
    '<tr><% _(fieldsToDisplay).each(function(field) { %> <td><i><%= field %>Data</i></td> <% }); %></tr>',
    '<tr><% _(fieldsToDisplay).each(function(field) { %> <td><i><%= field %>Data</i></td> <% }); %></tr>',
    '<tr><% _(fieldsToDisplay).each(function(field) { %> <td><i><%= field %>Data</i></td> <% }); %></tr>',
    '<tr><% _(fieldsToDisplay).each(function(field) { %> <td><i><%= field %>Data</i></td> <% }); %></tr>',
  '</table>'
].join('\n');

Templates.createFormButton = [
  '<li id="entity-<%= entity.cid %>-<%= form.cid %>" class="create entity">',
  '<span class="name"><%= form.get(\'name\') %> Form</span></li>'
].join('\n');

Templates.formButton = [
  '<li id="entity-<%= entity.cid %>-<%= form.cid %>" class="<%= form.get(\'action\') %> entity">',
  '<span class="name"><%= form.get(\'name\') %> Form</span></li>'
].join('\n');

var FieldTypes = {
  "single-line-text" : '<input type="text" class="" placeholder="<%= field.get(\'placeholder\') %>">',
  "paragraph-text"   : '<textarea class="" placeholder="<%= field.get(\'placeholder\') %>"></textarea>',
  "dropdown"         : '<select class="drowdown"><% _(field.get(\'options\').split(\',\')).each(function(option, ind){ %><option><%= option %><% }); %></option>',
  "option-boxes"     : '<span class="option-boxes"><% _(field.get(\'options\').split(\',\')).each(function(option, ind){ %><div class="option"><input id="opt-<%= ind %>" class="field-type" type="radio" name="types" value="single-line-text"><label for="opt-<%= ind %>"><%= option %></label></div><% }); %></span>',
  "password-text"    : '<input type="password" class="password" placeholder="<%= field.get(\'placeholder\') %>">',
  "email-text"       : '<input type="text" class="email" placeholder="<%= field.get(\'placeholder\') %>">',
  "button"           : '<input type="submit" class="btn" value="<%= field.get(\'placeholder\') %>">',
  "image-uploader"   : '<div class="upload-image btn">Upload Image</div>',
  "file-uploader"    : '<div class="upload-file btn">Upload File</div>',
  "date-picker"      : '<div class="date-picker-wrapper"><input type="text" placeholder="<%= field.get(\'placeholder\') %>"><img class="date-picker-icon"></div>'
};


Templates.fieldNode = [
'<label><%= field.get(\'label\') %></label>',
  '<% if(field.get(\'displayType\') == "single-line-text") { %>',
    FieldTypes['single-line-text'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "paragraph-text") { %>',
    FieldTypes['paragraph-text'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "dropdown") { %>',
    FieldTypes['dropdown'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "option-boxes") { %>',
    FieldTypes['option-boxes'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "password-text") { %>',
    FieldTypes['password-text'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "email-text") { %>',
    FieldTypes['email-text'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "button") { %>',
    FieldTypes['button'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "image-uploader") { %>',
    FieldTypes['image-uploader'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "file-uploader") { %>',
    FieldTypes['file-uploader'],
  '<% } %>',
  '<% if(field.get(\'displayType\') == "date-picker") { %>',
    FieldTypes['date-picker'],
  '<% } %>'
].join('\n');

Templates.queryView = [
  // '<small>',
  // '<p id="query-description"><%= c.nLang %></p>',
  // '</small>',
  '<div class="sections-container">',
    '<% if(type == "table") { %>',
    '<div class="sect">',
    '<p>What fields would you like to display?</p>',
    '<% _.each(entity.get("fields").models, function(field) { %>',
      '<% var checked = \'\'; var u_id = field.cid; if(_.contains(query.get(\'fieldsToDisplay\'), field.get(\'name\'))) { checked = \'checked\'; } %>',
      '<label><input class="fields-to-display btn" id="field-<%= field.cid %>" type="checkbox" value="<%= field.get(\'name\') %>" <%= checked %>><%= field.get(\'name\') %></label>',
    '<% }) %>',
    '</div>',
    '<% } %>',
    '<div class="sect">',
    '<% queries.each(function(query) { %>',
    '<input type="checkbox" class="query-option" id="query-<%= query.cid %>"><label for="query-<%= query.cid %>"><%= query.get("nl_description") %></label><br  />',
    '<% }); %>',
    '</div>',
    '<div class="sect">',
    '<p>How do you want to sort the rows?</p>',
    '<select class="sort-by">',
    '<option id="by-date" value="Date">From older to newer</option>',
    '<option id="by-date" value="-Date">From newer to older</option>',
    // '<% _.each(entity.get("fields").models, function(field) { %>',
    //   '<% var selected = "";  if("by-" + field.get("name") == query.get("sortAccordingTo")) selected = "selected" %>',
    //   '<option value="by-<%=field.get("name")%>" <%= selected %>>Alphabetically according to <%= field.get("name") %></option>',
    // '<% }); %>',
    '</select>',
    '</div>',

    '<div class="sect">',
    '<p>How many rows would you like to show?</p>',
    '<label><input type="radio" class="nmr-rows" id="all-rows" name="nmrRows" value="All" <%= c.rAll %>> All</label>',
    '<label><input type="radio" class="nmr-rows" id="first-rows" name="nmrRows" value="First" <%= c.rFirst %>> <input type="text" id="first-nmr" value="<%= c.rFirstNmr %>"> rows</label>',
    '</div>',
  '</div>'
].join('\n');


Templates.listEditorView = [
  '<span class="view-type-list type-pick"></span><span class="view-tyle-grid type-pick"></span>',
].join('\n');


Templates.tempUIElement = [
  '<<%= element.get(\'tagName\') %>',
  'class = "<%= element.get(\'class_name\') %>"',
  '<% if(element.get(\'cons_attribs\')) { %>',
  '<% _(element.get(\'cons_attribs\').attributes).each(function(val, key) { %>',
  '<%=key%> = "<%=val%>"<% }); %>',
  '<% } %>',
  '<% _(element.get(\'content_attribs\').attributes).each(function(val, key) { %>',
  '<%=key%> = "<%=val%>"<% }); %>>',
  '<% if(!element.get(\'isSingle\')) { %>',
  '<%= element.get(\'content\') %>',
  '</<%= element.get(\'tagName\') %>>',
  '<% }; %>'
].join('\n');

Templates.sliderTemp = [
  '<div id="slider-<%= cid %>" class="carousel slide">',
    '<ol class="carousel-indicators">',
      '<% for(var i=0; i < slides.length; i++) { %>',
      '<li data-target="#slider-<%= cid %>" data-slide-to="<%= i %>" <% if(i==0) { %>class="active" <% } %>></li>',
      '<% } %>',
    '</ol>',
    '<!-- Carousel items -->',
    '<div class="carousel-inner">',
      '<% _(slides).each(function(slide, index) { %>',
        '<div class="<% if(index == 0) { %>active <% } %>item">',
          '<img src="<%= slide.image %>">',
          '<div class="carousel-caption"><p><%= slide.text %></p></div>',
        '</div>',
      '<% }); %>',
    '</div>',
    '<!-- Carousel nav -->',
    '<a class="carousel-control left" href="#slider-<%= cid %>" data-slide="prev">&lsaquo;</a>',
    '<a class="carousel-control right" href="#slider-<%= cid %>" data-slide="next">&rsaquo;</a>',
  '</div>',
].join('\n');

Templates.twitterfeedTemp = [
'<script src="http://widgets.twimg.com/j/2/widget.js"></script>',
'<script>',
'new TWTR.Widget({',
  'version: 2,',
  'type: \'profile\',',
  'rpp: 4,',
  'interval: 6000,',
  'width: \'auto\',',
  'height: 300,',
  'theme: {',
    'shell: {',
      'background: \'#aacceb\',',
      'color: \'#ffffff\'',
    '},',
    'tweets: {',
      'background: \'#000000\',',
      'color: \'#ffffff\',',
      'links: \'#1398f0\'',
    '}',
  '},',
  'features: {',
    'scrollbar: true,',
    'loop: false,',
    'live: true,',
    'hashtags: true,',
    'timestamp: true,',
    'avatars: true,',
    'behavior: \'all\'',
  '}',
'}).render().setUser(\'<%= username %>\').start();',
'</script>'].join('\n');

Templates.facebookshareTemp = ['<img src="/static/img/fb-share-sample.png" width="300" >'].join('\n');

Templates.sliderEditorTemp = [
  '<div class="row">',
  '<ul class="slider-images" style="height:490px; overflow-y: scroll;">',
  '</ul>',
  '</div>'
].join('\n');

Templates.sliderImageEditorTemp = [
  '<li id="image-editor-<%= cid %>" class="span11 offset1 hoff1">',
    '<div class="thumbnail">',
      //'<img src="<%= image %>>',
      '<img src="<%= image %>">',
      '<p><textarea type="text" class="text" id="edit-<%= cid %>"><%= text %></textarea></p>',
      '<span class="btn btn-danger btn-small remove" id="remove-<%= cid %>">Remove</span>',
    '</div>',
  '</li>'
].join('\n');

Templates.thirdPartyLogin = [
  '<div class="<%= provider %>-login-btn btn"><%= content %></div>'
].join('\n');


Templates.searchboxTemp = [
'<form class="search-box">',
'<input type="text" placeholder="Search for  <%= entityName %>…">',
'<input type="submit" class="btn" value="Search">',
'</form>'
].join('\n');

define("editor/editor-templates", function(){});

define('editor/WidgetView',['backbone', 'jquery.freshereditor', 'mixins/BackboneUI', 'editor/editor-templates'], function() {

    'use strict';

    var WidgetView = Backbone.UIView.extend({

        el: null,
        className: 'widget-wrapper',
        tagName: 'div',
        widgetsContainer: null,
        selected: false,
        editable: false,
        editMode: false,
        shadowElem: null,
        positionHorizontalGrid: 80,
        positionVerticalGrid: 15,

        events: {
            'click': 'select',
            'click .delete': 'remove',
            'mouseover': 'hovered',
            'mouseout': 'unhovered',
            'mousedown': 'mousedown',
            'mouseup': 'mouseup'
        },

        initialize: function(widgetModel) {
            var self = this;
            _.bindAll(this);

            this.model = widgetModel;
            this.listenTo(this.model, "remove", this.close, this);

            this.listenTo(this.model, "rerender", this.reRender, this);
            this.listenTo(this.model, "change", this.reRender, this);
            this.listenTo(this.model, "change:type", this.reRender, this);
            this.listenTo(this.model, "change:tagName", this.reRender, this);
            this.listenTo(this.model, "change:className", this.reRender, this);
            this.listenTo(this.model, "change:src", this.changedSource, this);
            this.listenTo(this.model, "change:value", this.changedValue, this);
            this.listenTo(this.model, "change:style", this.changedStyle, this);

            this.listenTo(this.model.get('layout'), "change:width", this.changedSize, this);
            this.listenTo(this.model.get('layout'), "change:height", this.changedSize, this);
            this.listenTo(this.model.get('layout'), "change:top", this.changedTop, this);
            this.listenTo(this.model.get('layout'), "change:left", this.changedLeft, this);
            this.listenTo(this.model.get('layout'), "change:isFull", this.toggleFull, this);
            this.listenTo(this.model.get('layout'), "change:alignment", this.changedAlignment, this);
            this.listenTo(this.model.get('layout'), "change", this.changedPadding, this);

            this.listenTo(this.model.get('data'), "change:content", this.changedText, this);

            this.listenTo(this.model, "startEditing", this.switchEditModeOn, this);
            this.listenTo(this.model, "deselected", function() {
                this.model.trigger('stopEditing');
                this.$el.removeClass('selected');
                this.selected = false;
            }, this);
            this.listenTo(this.model, "selected", function() {
                this.$el.addClass('selected');
            });

            this.listenTo(this.model, "stopEditing", this.switchEditModeOff);
            this.listenTo(this.model, "cancelEditing", this.cancelEditing);

            keyDispatcher.bind('meta+return', function() {
                self.model.trigger('stopEditing');
            });
            keyDispatcher.bind('esc', function() {
                self.model.trigger('cancelEditing');
            });

        },

        setFreeMovement: function() {
            this.positionVerticalGrid = 1;
            this.positionHorizontalGrid = 1;
        },

        render: function() {
            var spin = util.addLoadingSpin(this.el);
            this.arrangeLayout();

            var expanded = this.model.expand();
            console.log(this.model);

            this.el.innerHTML = this.renderElement(expanded);
            this.innerEl = this.el.firstChild;
            this.$innerEl = $(this.innerEl);

            this.$el.find('a').on('click', function(e) { e.preventDefault(); });

            this.placeCSS(expanded);
            this.placeJS(expanded);

            return this;
        },

        arrangeLayout: function() {
            // var width = this.model.get('layout').get('width');
            // var height = this.model.get('layout').get('height');
            this.el.id = 'widget-wrapper-' + this.model.cid;
        },

        reRender: function() {
            var expanded = this.model.expand();

            this.el.innerHTML = this.renderElement(expanded);
            this.innerEl = this.el.firstChild;
            this.$innerEl = $(this.innerEl);

            this.placeCSS(expanded);
            this.placeJS(expanded);

            this.$el.find('a').on('click', function(e) { e.preventDefault(); });

            return this;
        },

        renderElement: function(expanded) {
            var html = "";
            if (!expanded.html || expanded.html == "") {
                expanded.html = "Custom Widget";
            }
            return expanded.html;
        },


        placeCSS: function(expanded) {
            
            var styleTag = document.getElementById('custom-css-widget-' + this.model.cid);
            if (styleTag) $(styleTag).remove();

            var style = document.createElement('style');
            style.id = 'custom-css-widget-' + this.model.cid;
            style.type = 'text/css';
            
            var css = expanded.css;
            if (style.styleSheet) {
                style.styleSheet.cssText = css;
            } else {
                style.appendChild(document.createTextNode(css));
            }
            document.getElementsByTagName('head')[0].appendChild(style);
        },

        placeJS: function(expanded) {

            if(!expanded.js || expanded.js === '') return;

            var self = this;

            this.model.trigger('selected');

            var jsTag = 'custom-js-widget-' + this.model.cid;
            if (jsTag) $(jsTag).remove();

            var appendJSTag = function() {

                var customJSTemp = [
                    'try {',
                    '<%= code %>',
                    '} catch(err) { console.log("Error executing custom js: "+ err); }',
                ].join('\n');

                try {
                    jsTag = document.createElement('script');
                    jsTag.id = 'custom-js-widget-' + self.model.cid;
                    jsTag.setAttribute("type", "text/javascript");

                    jsTag.text = _.template(customJSTemp, { code: expanded.js });

                    document.body.appendChild(jsTag);
                } catch (err) {
                    console.log('Error adding custom js:' + err);
                }
            };

            setTimeout(function() { $(document).ready(appendJSTag); }, 3000);
            // this.listenTo(v1, 'editor-loaded', appendJSTag, this);
        },

        select: function(e) {

            if (this.selected && !this.editMode) {
                this.model.trigger('doubleClicked');
                return;
            }

            if (!this.editMode) {
                this.model.trigger('selected');
                this.el.style.zIndex = 2003;
                if (this.model.isBgElement()) this.el.style.zIndex = 1000;
                this.selected = true;
            }
        },

        changedWidth: function(a) {
            this.el.style.width = '';
            this.el.className = 'selected widget-wrapper ';
            var width = this.model.get('layout').get('width');
            if (this.positionHorizontalGrid == 80) this.el.className += " span" + width;
            else this.setWidth(width * this.positionHorizontalGrid);
        },

        changedAlignment: function() {
            this.el.style.textAlign = this.model.get('layout').get('alignment');
        },

        changedPadding: function() {
            // this.el.style.paddingTop = this.model.get('layout').get('t_padding') + 'px';
            // this.el.style.paddingBottom = this.model.get('layout').get('b_padding') + 'px';
            // this.el.style.paddingLeft = this.model.get('layout').get('l_padding') + 'px';
            // this.el.style.paddingRight = this.model.get('layout').get('r_padding') + 'px';
        },

        changedSize: function() {
            this.changedHeight();
            this.changedWidth();
        },

        changedHeight: function(a) {
            this.setHeight(this.model.get('layout').get('height') * (this.positionVerticalGrid));
        },

        changedTop: function(a) {
            this.setTop((this.positionVerticalGrid) * (this.model.get('layout').get('top')));
        },

        changedLeft: function(a) {
            this.setLeft((this.positionHorizontalGrid) * (this.model.get('layout').get('left')));
        },

        changedText: function(a) {
            this.reRender();
        },

        changedValue: function(a) {
            this.el.firstChild.value = this.model.get('data').get('content_attribs').get('value');
        },

        changedType: function(a) {
            this.el.firstChild.className = this.model.get('data').get('class_name');
        },

        changedTagName: function(a) {
            this.reRender();
        },

        changedSource: function(a) {
            this.reRender();
        },

        changedStyle: function() {
            this.reRender();
        },

        staticsAdded: function(files) {
            _(files).each(function(file) {
                file.name = file.filename;
                statics.push(file);
            });
            this.model.set('src', _.last(files).url);
            //this.show(this.model);
        },

        hovered: function() {
            if (this.editMode || mouseDispatcher.isMousedownActive) return;
            if (this.model.isBgElement()) return;
            this.hovered = true;
            this.model.trigger('hovered');
        },

        unhovered: function(e) {
            if (this.isMouseOn(e)) return;
            this.model.trigger('unhovered');
        },

        isMouseOn: function(e) {
            var self = this;

            var mouseX = e.pageX;
            var mouseY = e.pageY;
            var div = $('#widget-wrapper-' + this.model.cid);
            if (!div.offset()) return false;

            var divTop = div.offset().top;
            var divLeft = div.offset().left;
            var divRight = divLeft + div.width();
            var divBottom = divTop + div.height();

            if (mouseX >= divLeft && mouseX <= divRight && mouseY >= divTop && mouseY <= divBottom) {
                $('#hover-div').bind('mouseout', function(e) {
                    self.unhovered(e);
                    $(e.target).unbind('mouseout');
                });
                return true;
            }

            return false;
        },

        switchEditModeOn: function() {

            if (this.model.get('content')) {
                this.editMode = true;

                //var el = $(this.el.firstChild);
                this.el.firstChild.style.zIndex = 2003;
                this.$el.addClass('textediting');
                //el.attr('contenteditable', 'true');
                //el.focus();

                var excludes = [
                    'removeFormat',
                    'insertheading1',
                    'insertheading2',
                    'insertheading3',
                    'insertheading4',
                    'fontname',
                    'code',
                    'superscript',
                    'subscript',
                    'forecolor',
                    'backcolor',
                    'strikethrough',
                    'insertimage',
                    'insertparagraph',
                    'blockquote',
                    'justifyfull'
                ];

                if (this.model.isBuyButton()) {
                    excludes = _.union(excludes, [
                        'FontSize',
                        'justifyleft',
                        'justifyright',
                        'justifycenter',
                        'createlink',
                        'bold',
                        'italic',
                        'underline',
                        'insertunorderedlist',
                        'insertorderedlist'
                    ]);
                }

                this.$innerEl.freshereditor({
                    toolbar_selector: ".widget-editor",
                    excludes: excludes
                });
                this.$innerEl.freshereditor("edit", true);
                util.selectText(this.$innerEl);

                keyDispatcher.textEditing = true;
            }

        },

        switchEditModeOff: function(e) {
            if (e) e.preventDefault();
            if (this.editMode === false) return;

            this.editMode = false;
            this.$el.removeClass('textediting');
            var val = this.$innerEl.html();
            this.$innerEl.freshereditor("edit", false);
            this.model.set('content', val);

            keyDispatcher.textEditing = false;
            util.unselectText();
        },

        cancelEditing: function() {
            if (this.editMode === false) return;

            this.editMode = false;
            this.$el.removeClass('textediting');
            var el = $(this.el.firstChild);
            this.model.get('data').trigger('change:content');
            el.attr('contenteditable', 'false');
            keyDispatcher.textEditing = false;
            util.unselectText();
        },

        autoResize: function(hGrid, vGrid) {
            var horizontalGrid = (hGrid || this.positionHorizontalGrid);
            var verticalGrid = (vGrid || this.positionVerticalGrid);

            var node = this.el.firstChild;

            var height = $(node).outerHeight(true);
            var width = $(node).outerWidth(true);

            if (this.model.isImage()) {
                width = Math.max(240, width);
                height = Math.max(150, height);
            }

            var nHeight = Math.ceil(height / verticalGrid);
            var nWidth = Math.ceil((width + 30) / horizontalGrid);

            if (horizontalGrid == 1 && verticalGrid == 1) {
                nHeight = (nHeight < 30) ? 30 : nHeight;
                nWidth = (nWidth < 120) ? 120 : nWidth;

                if (this.model.isBuyButton()) {
                    nWidth = 260;
                    nHeight = 40;
                }

            } else {
                if (nWidth + this.model.get('layout').get('left') > 12) {
                    nWidth = 12 - this.model.get('layout').get('left');
                }
            }

            if (!nHeight) nHeight = 2;
            if (!nWidth) nWidth = 2;

            this.model.get('layout').set('width', nWidth);
            this.model.get('layout').set('height', nHeight);
        },

        autoResizeVertical: function(hGrid, vGrid) {
            var verticalGrid = (vGrid || this.positionVerticalGrid);

            var node = this.el.firstChild;

            var height = $(node).outerHeight(true);

            var nHeight = Math.ceil(height / verticalGrid);

            if (verticalGrid == 1) {
                nHeight = (nHeight < 30) ? 30 : nHeight;
            }
            if (!nHeight) nHeight = 2;

            this.model.get('layout').set('height', nHeight);
        },

        mousedown: function(e) {
            mouseDispatcher.isMousedownActive = true;
        },
        mouseup: function() {
            mouseDispatcher.isMousedownActive = false;
        }

    });

    return WidgetView;
});
define('editor/WidgetContainerView',[
  'react',
  'editor/QueryEditorView',
  'editor/WidgetView',
  'dicts/constant-containers',
  'editor/editor-templates'
],
function( React,
          QueryEditorView,
          WidgetView) {

  var WidgetContainerView = WidgetView.extend({
    el: null,
    className: 'container-create widget-wrapper',
    tagName : 'div',
    entity: null,
    type: null,

    positionHorizontalGrid : 80,
    positionVerticalGrid   : 15,

    events: {
      'click .delete' : 'remove',
      'dblclick'      : 'showDetails',
      'mousedown'     : 'select',
      'mouseover'     : 'hovered',
      'mouseout'      : 'unhovered'
    },

    initialize: function(widgetModel) {
      WidgetContainerView.__super__.initialize.call(this, widgetModel);
      var self = this;
      _.bindAll(this);

      if(this.model.getAction() == "imageslider" ) {
        this.listenTo(this.model.get('data').get('container_info').get('slides'), 'add remove change', this.render);
      }

      if(this.model.get('data').get('container_info').has('uielements')) {
        this.model.get('data').get('container_info').get('uielements').bind("add", this.placeWidget);
      }

      var action = this.model.get('data').get('container_info').get('action');

      if(this.model.get('data').get('container_info').has('query')) {
        this.model.get('data').get('container_info').get('query').bind('change', this.reRender);
      }

      this.listenTo(this.model, "startEditing", this.switchEditModeOn, this);
    },

    render: function() {
      var self = this;
      this.arrangeLayout();
      this.el.innerHTML = '';

      if(this.model.get('data').get('container_info').get('action') == "searchbox") {
        this.el.innerHTML = _.template(Templates.searchboxTemp, {entityName: this.model.get('data').get('searchQuery').get('searchOn') });
      }

      if(this.model.get('data').get('container_info').get('action') == "table") {
        var tableDiv = document.createElement('div');
        tableDiv.innerHTML = _.template(Templates.tableNode, this.model.get('data').get('container_info').get('query').attributes);
        this.el.appendChild(tableDiv);
      }

      if(this.model.get('data').get('container_info').get('action') == "imageslider" ) {
        var slideDiv = document.createElement('div');
        var data = {
          cid: this.model.cid,
          slides: this.model.get('data').get('container_info').get('slides').serialize()
        };
        slideDiv.innerHTML = _.template(Templates.sliderTemp, data);
        $(slideDiv).carousel();
        this.el.appendChild(slideDiv);
      }

      if(this.model.get('data').get('container_info').get('action') == "twitterfeed" ) {
        var feedDiv = document.createElement('div');
        feedDiv.innerHTML = _.template(Templates.twitterfeedTemp, {username: this.model.get('data').get('container_info').get('username') });
        this.el.appendChild(feedDiv);
      }

      if(this.model.get('data').get('container_info').get('action') == "facebookshare" ) {
        var fbdiv = document.createElement('div');
        fbdiv.innerHTML = _.template(Templates.facebookshareTemp, {});
        this.el.appendChild(fbdiv);
      }

      if(this.model.get('data').get('action') == "buy" ) {
        var info = _.extend(uieState["buttons"][0], { content: this.model.get('data').get('content')});
        this.el.innerHTML = _.template(Templates.tempNode, { element: info});
      }

      if(this.model.get('data').get('container_info').get('action') == "videoembed" ) {
        var videoDiv = document.createElement('div');
        var StaticImg = React.createClass({
            render: function() {
                return React.DOM.img({src: "/static/img/youtube-static.png" });
            }
        });
        React.renderComponent(StaticImg({}), videoDiv);
        this.el.appendChild(videoDiv);
      }

      if(this.model.get('data').get('action') == "thirdpartylogin" ) {
        var thirdPartyBtn = document.createElement('div');
        thirdPartyBtn.innerHTML = _.template(Templates.thirdPartyLogin, this.model.get('data').serialize());
        this.el.appendChild(thirdPartyBtn);
      }

      this.renderElements();

      this.innerEl = this.el.firstChild;
      this.$innerEl = $(this.innerEl);

      return this;
    },

    reRender: function() {
      this.render();
      this.renderElements();
    },

    placeWidget: function(model, a) {
      alert('hey');
      this.el.appendChild(widgetView.el);
      model.get('layout').bind('change', this.reRender);
    },

    renderElements : function() {
      var self = this;
      if(this.model.get('data').get('container_info').has('uielements')) {
        this.model.get('data').get('container_info').get('uielements').each(function(widgetModel) {
          self.placeWidget(widgetModel);
        });
      }
    },

    showDetails: function() {
      if(this.model.get('data').get('container_info').get('action') === "table-gal") {
        new QueryEditorView(this.model, 'table');
      }
    }

  });

  return WidgetContainerView;
});

define('editor/WidgetSelectorView',['require','exports','module','mixins/BackboneUI','jquery-ui','util'],function(require, exports, module) {

    'use strict';


    require('mixins/BackboneUI');
    require('jquery-ui');
    require('util');

    var PADDING = 2;
    var ALIGNMENT = 1;

    var WidgetSelectorView = Backbone.UIView.extend({
        className: 'editor-page',
        tagName: 'div',
        selectedEl: null,
        isMobile: false,

        positionHorizontalGrid: 80,
        positionVerticalGrid: 15,

        events: {
            // 'click #hover-div': 'hoverClicked',
            // 'click #select-div': 'doubleClicked',
            // 'mousedown #hover-div': 'mousedown',
            // 'mousedown #select-div': 'selectMousedown',
            // 'mouseup #hover-div': 'mouseup',
            // 'mouseup #select-div': 'mouseup'
        },

        initialize: function(widgetsCollection) {
            _.bindAll(this);

            var self = this;
            this.widgetsCollection = widgetsCollection;
            this.listenTo(this.widgetsCollection, 'add', this.bindWidget, true);
            this.widgetEditorView = v1.currentApp.view.widgetEditorView;
            this.widgetEditorView.isMobile = self.isMobile;

            this.widgetsCollection.each(function(widget) {
                self.bindWidget(widget, false);
            });
            this.doKeyBindings();
        },

        selectMousedown: function(e) {
            //if(!this.isMouseOn(e)) { return true; }
            this.mousedown();
        },

        mousedown: function(e) {
            //g_marqueeView.setZero();
            mouseDispatcher.isMousedownActive = true;
        },

        mouseup: function(e) {
            mouseDispatcher.isMousedownActive = false;
        },

        render: function() {
            var self = this;

            this.elContainer = this.el.getElementById('elements-container');

            var hoverDiv = document.createElement('div');
            hoverDiv.id = "hover-div";
            this.hoverDiv = hoverDiv;
            this.hideNode(hoverDiv);
            // this.elContainer.appendChild(hoverDiv);

            var selectDiv = document.createElement('div');
            selectDiv.id = "select-div";
            this.selectDiv = selectDiv;
            this.hideNode(selectDiv);
            // this.elContainer.appendChild(selectDiv);

            $(selectDiv).resizable({
                handles: "n, e, s, w, nw, ne, sw, se",
                containment: "parent",
                resize: self.resizing,
                stop: self.resized
            });

            $(hoverDiv).draggable({
                containment: "parent",
                drag: self.moving,
                stop: self.moved,
                snapMode: "outer",
                iframeFix: true
            });

            $(selectDiv).draggable({
                containment: "parent",
                drag: self.moving,
                stop: self.moved,
                snapMode: "outer",
                cancel: '#widget-editor',
                iframeFix: true
            });


            selectDiv.style.zIndex = "2005";
            hoverDiv.style.zIndex = "2004";
            //hoverDiv.style.position = "absolute";
            //selectDiv.style.position = "absolute";

            $(document).on('mousedown', this.clickedPage);

            return this;
        },

        bindWidget: function(widget, isNew) {
            var self = this;

            this.listenTo(widget, 'remove', function() {
                self.deselect();
            });

            this.listenTo(widget, 'hovered', function() {
                self.widgetHover(widget);
            });

            this.listenTo(widget, 'unhovered', function() {
                self.widgetUnhover(widget);
            });

            this.listenTo(widget, 'selected', function() {
                if (self.selectedEl && widget && self.selectedEl.cid == widget.cid) return;
                self.widgetUnhover(widget);
                self.newSelected(widget);
            });

            this.listenTo(widget, 'doubleClicked', this.doubleClicked);

            this.listenTo(widget, 'deselect', function() {
                self.deselect();
            });

            this.listenTo(widget, 'editModeOn', function(position) {
                self.unbindAll(position);
            });

            if (isNew) {
                widget.trigger('selected');
            }
        },

        unbindAll: function(position) {
            var widget = this.selectedEl;
            widget.on('editModeOff', function() {
                this.bindWidget(widget);
                this.setLayout(this.selectDiv, this.selectedEl);
                this.makeSelectDivVisible();
            }, this);

            this.stopListening(widget, 'hovered');
            this.stopListening(widget, 'unhovered');
            this.stopListening(widget, 'selected');
            this.makeSelectDivInvisible();
            this.selectDiv.style.left = (((widget.get('layout').get('width') + widget.get('layout').get('left')) * 80) + 4) + 'px';
            if (position == "left") {
                this.selectDiv.style.left = (((widget.get('layout').get('left')) * 80) - 16) + 'px';
            }
        },

        makeSelectDivInvisible: function() {
            this.selectDiv.style.height = 0;
            this.selectDiv.style.width = 0;
            $(this.selectDiv).hide();
        },

        makeSelectDivVisible: function(argument) {
            $(this.selectDiv).fadeIn();
        },

        hideHoverDiv: function() {
            this.hideLayout(this.hoverDiv);
        },

        setLayout: function(node, widgetModel) {
            if (!widgetModel) return;
            $(node).show();

            var element = document.getElementById('widget-wrapper-'+ widgetModel.cid);
            var $element = $(element);
            if(!element) return;

            // var offsetFrame = util.getWindowRelativeOffset(window.document, window);
            var offset = util.getWindowRelativeOffset(window.document, element);

            var leftDist = offset.left; // + offsetFrame.left;
            var topDist = offset.top + $(window).scrollTop();

            // node.style.width =  $element.outerWidth() + 'px';
            // node.style.height = $element.outerHeight() + 'px';
            // node.style.left = (leftDist) + 'px';
            // node.style.top = (topDist) + 'px';

            return node;
        },

        hideLayout: function(node) {
            $(node).hide();
            node.style.width = '0px';
            node.style.height = '0px';
            node.style.left = '0px';
            node.style.top = '0px';
            return node;
        },

        widgetHover: function(widgetModel) {
            if (g_marqueeView.isDrawing) return;
            if (this.selectedEl && widgetModel.cid === this.selectedEl.cid) return;
            // if (g_multiSelectorView.contains(widgetModel)) return;
            this.hoveredEl = widgetModel;
            //this.setLayout(this.hoverDiv, widgetModel);
        },

        widgetUnhover: function(widgetModel) {
            this.hideNode(this.hoverDiv);
        },

        bindLocation: function() {},

        newSelected: function(widgetModel) {
            var self = this;
            if (this.selectedEl && this.selectedEl.cid == widgetModel.cid) {
                this.setLayout(this.selectDiv, widgetModel);
                this.selectedEl.trigger('reselected');
                return;
            }

            if (this.selectedEl) {
                this.stopListening(widgetModel.get('layout'), 'change', self.setLayout);
            }

            this.deselect();
            this.selectedEl = widgetModel;
            this.listenTo(widgetModel.get('layout'), 'change', function() {
                self.setLayout(self.selectDiv, widgetModel);
            });
            this.hideNode(this.hoverDiv);
            // this.setLayout(this.selectDiv, widgetModel);
            this.widgetEditorView.setModel(widgetModel).display();
        },

        resizing: function(e, ui) {
            var cid = this.selectedEl.cid;
            var model = this.selectedEl;

            var elem = this.el.getElementById('widget-wrapper-' + cid);

            //g_guides.hideAll();

            // var valLeft = g_guides.showVertical(ui.position.left / this.positionHorizontalGrid, cid);
            // var valRight = g_guides.showVertical((ui.position.left + ui.size.width) / this.positionHorizontalGrid, cid);

            // if (valLeft) {
            //     var deltaLeft = ui.position.left - (valLeft * this.positionHorizontalGrid) + ALIGNMENT;
            //     ui.size.width = ui.size.width + deltaLeft;
            //     ui.element.width(ui.size.width + PADDING);
            //     ui.position.left = (valLeft * this.positionHorizontalGrid) - ALIGNMENT;
            //     ui.element.css('left', ui.position.left);
            // }
            // if (valRight) {
            //     var deltaRight = valRight * this.positionHorizontalGrid - (ui.position.left + ui.size.width);
            //     ui.size.width = ui.size.width + deltaRight - ALIGNMENT;
            //     ui.element.width(ui.size.width);
            // }

            // var valTop = g_guides.showHorizontal(ui.position.top / this.positionVerticalGrid, cid);
            // var valBottom = g_guides.showHorizontal(ui.position.top / this.positionVerticalGrid + model.get('layout').get('height'), cid);

            // if (valTop) {
            //     var deltaTop = (valTop * this.positionVerticalGrid) - ui.position.top;
            // }
            // if (valBottom) {
            //     var deltaBottom = ui.position.top = (valTop * this.positionVerticalGrid);
            // }

            elem.style.width = (ui.size.width + PADDING) + 'px';
            elem.style.height = (ui.size.height + PADDING) + 'px';
            elem.style.left = (ui.position.left + ALIGNMENT) + 'px';
            elem.style.top = (ui.position.top + ALIGNMENT) + 'px';

        },

        resized: function(e, ui) {
            // g_guides.hideAll();

            var left = Math.round((ui.position.left / this.positionHorizontalGrid));
            var top = Math.round((ui.position.top / this.positionVerticalGrid));

            if (left < 0) left = 0;
            if (top < 0) top = 0;

            var deltaHeight = Math.round((ui.size.height + 2) / this.positionVerticalGrid);
            var deltaWidth = Math.round((ui.size.width + 2) / this.positionHorizontalGrid);
            var elem = this.el.getElementById('widget-wrapper-' + this.selectedEl.cid);
            elem.style.width = '';
            elem.style.height = '';

            if (deltaHeight <= 0) deltaHeight = 1;
            if (deltaWidth <= 0) deltaWidth = 1;

            this.selectedEl.get('layout').set('width', deltaWidth);
            this.selectedEl.get('layout').set('height', deltaHeight);
            this.selectedEl.get('layout').set('left', left);
            this.selectedEl.get('layout').set('top', top);
            this.setLayout(this.selectDiv, this.selectedEl);

            if (this.selectedEl.getRow()) this.selectedEl.getRow().resizeElements(deltaWidth);
        },

        moving: function(e, ui) {
            var model = null;

            if (e.target.id == "hover-div") {
                model = this.hoveredEl;
                // if (!g_multiSelectorView.isEmpty()) {
                //     return g_multiSelectorView.moving(e, ui, model, this.positionHorizontalGrid, this.positionVerticalGrid);
                // }
            } else {
                model = this.selectedEl;
                this.hideNode(this.hoverDiv);
            }

            if (!model) return;

            this.widgetEditorView.hide();

            var cid = model.cid;
            // g_guides.hideAll();


            // var valLeft = g_guides.showVertical(ui.position.left / this.positionHorizontalGrid, cid);
            // var valRight = g_guides.showVertical(ui.position.left / this.positionHorizontalGrid + model.get('layout').get('width'), cid);

            // if (valLeft) {
            //     ui.position.left = valLeft * this.positionHorizontalGrid;
            // }
            // if (valRight) {
            //     ui.position.left = (valRight - model.get('layout').get('width')) * this.positionHorizontalGrid - ALIGNMENT;
            // }

            /* Adjust for the scroll amount of the iframe - hacky */
            // console.log(document);
            // console.log($(document).scrollTop());
            // var scrollTop = $(document).scrollTop();
            // ui.position.top += scrollTop;

            // var valTop = g_guides.showHorizontal(ui.position.top / this.positionVerticalGrid, cid);
            // var valBottom = g_guides.showHorizontal(ui.position.top / this.positionVerticalGrid + model.get('layout').get('height'), cid);

            // if (valTop) {
            //     ui.position.top = valTop * this.positionVerticalGrid;
            // }
            // if (valBottom) {
            //     ui.position.top = (valBottom - model.get('layout').get('height')) * this.positionVerticalGrid - 2;
            // }

            var elem = this.el.getElementById('widget-wrapper-' + model.cid);
            elem.style.top = ui.position.top + ALIGNMENT + 'px';
            elem.style.left = ui.position.left + ALIGNMENT + 'px';
        },

        moved: function(e, ui) {
            
            var self = this;
            //g_guides.hideAll();

            var model = this.selectedEl;
            if (e.target.id == "hover-div") {
                model = this.hoveredEl;
                if (!g_multiSelectorView.isEmpty()) {
                    return g_multiSelectorView.moved(e, ui, model, this.positionHorizontalGrid, this.positionVerticalGrid, function() {
                        self.hideNode(self.hoverDiv);
                    });
                }
            }

            this.hideHoverDiv();

            var top = Math.round((ui.position.top / this.positionVerticalGrid));
            var left = Math.round((ui.position.left / this.positionHorizontalGrid));

            if (left < 0) left = 0;
            if (top < 0) top = 0;

            if (model.get('layout').get('left') == left) {
                model.get('layout').trigger('change:left');
            } else {
                model.get('layout').set('left', left);
            }

            if (model.get('layout').get('top') == top) {
                model.get('layout').trigger('change:top');
            } else {
                model.get('layout').set('top', top);
            }

            this.newSelected(model);
        },

        deselect: function() {
            if (this.selectedEl) {
                this.selectedEl.trigger('deselected');
                this.stopListening(this.selectedEl.get('layout'), 'change');
            }

            this.selectedEl = null;
            this.hideNode(this.selectDiv);
            this.hideNode(this.hoverDiv);
        },

        moveSelectedDown: function(e) {
            if (!this.selectedEl) return;
            if (keyDispatcher.textEditing === true) return;
            if (this.selectedEl.getRow() && this.selectedEl.editMode === true) return;


            // if(this.selectedEl.getBottom() > v1State.getCurrentPage().getHeight()) {
            v1State.getCurrentPage().trigger('scroll', this.selectedEl);
            // }

            this.selectedEl.moveDown();
            e.preventDefault();
        },

        moveSelectedUp: function(e) {
            if (!this.selectedEl) return;
            if (keyDispatcher.textEditing === true) return;
            if (this.selectedEl.getRow() && this.selectedEl.editMode === true) return;

            this.selectedEl.moveUp();
            e.preventDefault();
        },

        moveSelectedLeft: function(e) {
            if (!this.selectedEl) return;
            if (keyDispatcher.textEditing === true) return;
            if (this.selectedEl.getRow() && this.selectedEl.editMode === true) return;

            this.selectedEl.moveLeft();
            e.preventDefault();
        },

        moveSelectedRight: function(e) {
            if (!this.selectedEl) return;
            if (keyDispatcher.textEditing === true) return;
            if (this.selectedEl.getRow() && this.selectedEl.editMode === true) return;

            this.selectedEl.moveRight();
            e.preventDefault();
        },

        deleteSelected: function(e) {
            if (!this.selectedEl) return;
            if (keyDispatcher.textEditing === true) return;
            if (this.selectedEl.getRow() && this.selectedEl.editMode === true) return;

            this.selectedEl.remove();
            e.preventDefault();
        },

        doKeyBindings: function() {
            keyDispatcher.bind('down', this.moveSelectedDown);
            keyDispatcher.bind('up', this.moveSelectedUp);
            keyDispatcher.bind('left', this.moveSelectedLeft);
            keyDispatcher.bind('right', this.moveSelectedRight);
            keyDispatcher.bind('backspace', this.deleteSelected);
        },

        hoverClicked: function(e) {
            if (this.hoveredEl) {
                this.hoveredEl.trigger('selected');
            }
            mouseDispatcher.isMousedownActive = false;
        },

        clickedPage: function(e) {
            if (this.selectedEl && !this.isMouseOn(e) && !mouseDispatcher.isMousedownActive) {
                this.deselect();
            }
        },

        doubleClicked: function(e) {
            //if (!this.isMouseOn(e) || this.selectedEl.editModeOn) return;

            if (this.selectedEl.getContent() && !this.selectedEl.isLoginForm()) {
                this.selectedEl.trigger('startEditing');
                this.listenTo(this.selectedEl, 'stopEditing cancelEditing', this.stoppedEditing);
                this.makeSelectDivInvisible();
            }

            if (this.selectedEl.isBox()) {
                util.guideText(e, "You should drop some text here.");
            }
        },

        stoppedEditing: function() {
            this.makeSelectDivVisible();
            this.setLayout(this.selectDiv, this.selectedEl);
        },

        isMouseOn: function(e) {
            if (!this.selectedEl) return false;

            var self = this;

            var mouseX = e.pageX;
            var mouseY = e.pageY;
            var div = $(this.el.getElementById('widget-wrapper-' + this.selectedEl.cid));
            var divTop = div.offset().top;
            var divLeft = div.offset().left;
            var divRight = divLeft + div.width();
            var divBottom = divTop + div.height();
            if (mouseX >= divLeft && mouseX <= divRight && mouseY >= divTop && mouseY <= divBottom) {
                return true;
            }
            return false;
        },

        clear: function() {
            this.widgetEditorView.clear();
        },

        hideNode: function(node) {
            // node.style.height = 0;
            // node.style.width = 0;
            // $(node).hide();
        },

        close: function() {
            keyDispatcher.unbind('down', this.moveSelectedDown);
            keyDispatcher.unbind('up', this.moveSelectedUp);
            keyDispatcher.unbind('left', this.moveSelectedLeft);
            keyDispatcher.unbind('right', this.moveSelectedRight);
            keyDispatcher.unbind('backspace', this.deleteSelected);
            this.deselect();
            $(document).off('mousedown', this.clickedPage);

            Backbone.View.prototype.close.call(this);
        }

    });

    return WidgetSelectorView;

});
define('editor/list-editor/ListWidgetSelectorView',[
        'editor/WidgetSelectorView',
        'mixins/BackboneUI',
        'util'
    ],
    function(WidgetSelectorView) {

        var ListWidgetSelectorView = WidgetSelectorView.extend({
            className: 'editor-list',
            tagName: 'div',
            type: 'list-widget',
            selectedEl: null,
            isMobile: false,

            positionHorizontalGrid: 1,
            positionVerticalGrid: 1,

            events: {
                'click #list-hover-div': 'hoverClicked',
                'dblclick #list-select-div': 'doubleClicked',
                'mousedown #list-hover-div': 'mousedown',
                'mousedown #list-select-div': 'mousedown',
                'mouseup #list-hover-div': 'mouseup',
                'mouseup #list-select-div': 'mouseup'
            },

            initialize: function(widgetsCollection, parentEl) {
                _.bindAll(this);

                var self = this;

                this.widgetsCollection = widgetsCollection;
                this.listenTo(this.widgetsCollection, 'add', this.bindWidget, true);
                var WidgetEditorView = require('editor/WidgetEditorView');
                this.widgetEditorView = new WidgetEditorView();
                this.widgetEditorView.defaultLocation = "bottom";

                this.widgetEditorView.isMobile = self.isMobile;

                this.parentEl = parentEl;

                this.widgetsCollection.each(function(widget) {
                    self.bindWidget(widget, false);
                });

                this.doKeyBindings();
            },

            mousedown: function(e) {
                mouseDispatcher.isMousedownActive = true;
                mouseDispatcher.isItemMousedownActive = true;
            },
            mouseup: function(e) {
                mouseDispatcher.isMousedownActive = false;
                mouseDispatcher.isItemMousedownActive = false;
            },

            render: function() {
                var self = this;

                var hoverDiv = document.createElement('div');
                hoverDiv.id = "list-hover-div";
                this.hoverDiv = hoverDiv;
                this.hideNode(hoverDiv);
                this.el.appendChild(hoverDiv);

                var selectDiv = document.createElement('div');
                selectDiv.id = "list-select-div";
                this.selectDiv = selectDiv;
                this.hideNode(selectDiv);
                this.el.appendChild(selectDiv);

                $(selectDiv).resizable({
                    handles: "n, e, s, w, nw, ne, sw, se",
                    containment: "parent",
                    resize: self.resizing,
                    stop: self.resized
                });

                $(hoverDiv).draggable({
                    drag: self.moving,
                    stop: self.moved,
                    snapMode: "outer"
                });

                $(selectDiv).draggable({
                    containment: "parent",
                    drag: self.moving,
                    stop: self.moved,
                    snapMode: "outer"
                });


                selectDiv.style.zIndex = "2004";
                hoverDiv.style.zIndex = "2003";
                hoverDiv.style.position = "absolute";
                selectDiv.style.position = "absolute";

                $(this.parentEl).on('mousedown', this.clickedPage);

                return this;
            },

            bindWidget: function(widget, isNew) {
                var self = this;

                this.listenTo(widget, 'remove', function() {
                    this.deselect();
                });

                this.listenTo(widget, 'hovered', function() {
                    self.widgetHover(widget);
                });

                this.listenTo(widget, 'unhovered', function() {
                    self.widgetUnhover(widget);
                });

                this.listenTo(widget, 'selected', function() {
                    self.widgetUnhover(widget);
                    self.newSelected(widget);
                });

                this.listenTo(widget, 'deselect', function() {
                    this.deselect();
                });

                this.listenTo(widget, 'editModeOn', function() {
                    self.unbindAll();
                });

                if (isNew) {
                    widget.trigger('selected');
                }
            },

            unbindAll: function() {
                var widget = this.selectedEl;
                widget.on('editModeOff', function() {
                    self.bindWidget(widget);
                });

                this.stopListening(widget, ['hovered, unhovered, selected']);

                this.selectDiv.style.height = 0;
                this.selectDiv.style.width = 0;
                this.selectDiv.style.left = (((widget.get('layout').get('width') + widget.get('layout').get('left') + 1) * 1) + 4) + 'px';
            },

            setLayout: function(node, widgetModel) {
                if (!node) return;
                $(node).show();
                node.style.width = ((widgetModel.get('layout').get('width') * 1)) + 'px';
                node.style.height = ((widgetModel.get('layout').get('height') * 1)) + 'px';
                node.style.left = ((widgetModel.get('layout').get('left') * 1)) + 'px';
                node.style.top = ((widgetModel.get('layout').get('top') * 1)) + 'px';
                return node;
            },

            widgetHover: function(widgetModel) {
                if (this.selectedEl && widgetModel.cid === this.selectedEl.cid) return;
                this.hoveredEl = widgetModel;
                this.setLayout(this.hoverDiv, widgetModel);
            },

            widgetUnhover: function(widgetModel) {
                this.hideNode(this.hoverDiv);
            },

            bindLocation: function() {},

            newSelected: function(widgetModel) {
                var self = this;
                if (this.selectedEl && this.selectedEl.cid == widgetModel.cid) {
                    this.setLayout(this.selectDiv, widgetModel);
                    return;
                }

                if (this.selectedEl) {
                    this.stopListening(widgetModel.get('layout'), 'change', self.setLayout);
                }

                this.deselect();
                this.selectedEl = widgetModel;
                this.listenTo(widgetModel.get('layout'), 'change', function() {
                    self.setLayout(self.selectDiv, widgetModel);
                });

                this.hideNode(this.hoverDiv);
                this.setLayout(this.selectDiv, widgetModel);
                this.selectDiv.appendChild(this.widgetEditorView.setModel(widgetModel).render().el);
            },

            resizing: function(e, ui) {
                if (!this.selectedEl) return;
                var elem = util.get('widget-wrapper-' + this.selectedEl.cid);
                elem.style.width = ui.size.width - 2 + 'px';
                elem.style.height = (ui.size.height - 2) + 'px';
                elem.style.left = ui.position.left + 1 + 'px';
                elem.style.top = ui.position.top + 1 + 'px';
            },

            resized: function(e, ui) {
                if (!this.selectedEl) return;
                var left = Math.round((ui.position.left / 1));
                var top = Math.round((ui.position.top / 1));
                var deltaHeight = Math.round((ui.size.height));
                var deltaWidth = Math.round((ui.size.width));
                var elem = util.get('widget-wrapper-' + this.selectedEl.cid);
                elem.style.width = '';
                elem.style.height = '';

                if (deltaHeight <= 8) deltaHeight = 15;
                if (deltaWidth <= 8) deltaWidth = 15;

                this.selectedEl.get('layout').set('width', deltaWidth);
                this.selectedEl.get('layout').set('height', deltaHeight);
                this.selectedEl.get('layout').set('left', left);
                this.selectedEl.get('layout').set('top', top);
                this.setLayout(this.selectDiv, this.selectedEl);
            },

            moving: function(e, ui) {
                model = this.selectedEl;
                if (e.target.id == "list-hover-div") {
                    model = this.hoveredEl;
                }
                var elem = util.get('widget-wrapper-' + model.cid);
                elem.style.top = ui.position.top + 1 + 'px';
                elem.style.left = ui.position.left + 1 + 'px';
            },

            moved: function(e, ui) {
                model = this.selectedEl;
                if (e.target.id == "list-hover-div") {
                    model = this.hoveredEl;
                }
                var top = Math.round((ui.position.top / 1));
                var left = Math.round((ui.position.left / 1));

                if (top < 0) top = 1;
                if (left < 0) left = 1;

                model.get('layout').set('top', top);

                if (left == model.get('layout').get('left')) {
                    model.get('layout').trigger('change:left');
                }
                model.get('layout').set('left', left);

                this.newSelected(model);
            },

            deselect: function() {
                if (this.selectedEl) {
                    this.selectedEl.trigger('deselected');
                }
                this.widgetEditorView.clear();
                this.selectedEl = null;
                this.hideNode(this.selectDiv);
                this.hideNode(this.hoverDiv);
            },

            deleteSelected: function(e) {
                if (!this.selectedEl) return;
                if (keyDispatcher.textEditing === true) return;
                e.preventDefault();
                this.selectedEl.remove();
            },

            doKeyBindings: function() {
                keyDispatcher.bind('down', this.moveSelectedDown);
                keyDispatcher.bind('up', this.moveSelectedUp);
                keyDispatcher.bind('left', this.moveSelectedLeft);
                keyDispatcher.bind('right', this.moveSelectedRight);
                keyDispatcher.bind('backspace', this.deleteSelected);
            },

            hoverClicked: function(e) {
                if (this.hoveredEl) {
                    this.hoveredEl.trigger('selected');
                }
                mouseDispatcher.isMousedownActive = false;
            },

            clickedPage: function(e) {
                //mouseDispatcher.isMousedownActive);
                if (this.selectedEl && !this.isMouseOn(e) && !mouseDispatcher.isItemMousedownActive) {
                    this.deselect();
                }
            },

            doubleClicked: function(e) {
                this.selectedEl.trigger('startEditing');
                this.selectedEl.bind('stopEditing', this.stoppedEditing);
                this.hideNode(this.selectDiv);
            },

            stoppedEditing: function() {
                if (!this.selectedEl) return;
                this.setLayout(this.selectDiv, this.selectedEl);
            },

            isMouseOn: function(e) {
                var self = this;

                mouseX = e.pageX;
                mouseY = e.pageY;
                var div = $('#widget-wrapper-' + this.selectedEl.cid);
                divTop = div.offset().top,
                divLeft = div.offset().left,
                divRight = divLeft + div.width(),
                divBottom = divTop + div.height();
                if (mouseX >= divLeft && mouseX <= divRight && mouseY >= divTop && mouseY <= divBottom) {
                    return true;
                }
                return false;
            },

            clear: function() {},

            hideNode: function(node) {
                if (!node) {
                    return;
                }
                node.style.height = 0;
                node.style.width = 0;
                $(node).hide();
            }

        });

        return ListWidgetSelectorView;

    });
define('editor/WidgetListView',[
        'editor/WidgetContainerView',
        'editor/WidgetView',
        'editor/list-editor/ListWidgetSelectorView',
        'dicts/constant-containers',
        'editor/editor-templates'
    ],
    function(WidgetContainerView,
        WidgetView,
        ListWidgetSelectorView) {

        var WidgetListView = WidgetContainerView.extend({
            el: null,
            className: 'container-create list-widget',
            tagName: 'div',
            entity: null,
            type: null,
            highlighted: false,
            subviews: [],

            positionHorizontalGrid: 80,
            positionVerticalGrid: 15,

            events: {
                'click': 'select',
                'click .delete': 'remove',
                'mouseover': 'hovered',
                'mouseout': 'unhovered',
                'mousedown .row': 'rowMousedown',
                'mouseup .row': 'rowMouseup'
            },

            rowMousedown: function() {
                mouseDispatcher.isMousedownActive = true;
            },
            rowMouseup: function() {
                mouseDispatcher.isMousedownActive = false;
            },

            initialize: function(widgetModel) {
                WidgetContainerView.__super__.initialize.call(this, widgetModel);
                _.bindAll(this);

                this.subviews = [];

                this.listenTo(this.model.get('data').get('container_info').get('row').get('uielements'), "add", this.placeWidget, true, true);
                this.listenTo(this.model.get('data').get('container_info').get('row').get('uielements'), "add", this.renderShadowElements);
                this.listenTo(this.model.get('data').get('container_info').get('row').get('uielements'), "remove", this.renderShadowElements);
                if (this.model.get('data').get('container_info').has('query')) {
                    this.listenTo(this.model.get('data').get('container_info').get('query'), "change", this.renderShadowElements);
                }

                this.listenTo(this.model, 'deselected', function() {
                    this.model.trigger('editModeOff');
                }, this);

                this.listenTo(this.model, 'editModeOff', this.switchEditingOff);
                this.listenTo(this.model.get('data').get('container_info').get('row').get('layout'), 'change:height', this.renderShadowElements);

                var action = this.model.get('data').get('container_info').get('action');

                this.entityModel = this.model.get('data').get('container_info').get('entity');
                this.listenTo(this.model, 'highlight', this.highlightFirstRow);
                this.widgetSelectorView = new ListWidgetSelectorView(this.model.get('data').get('container_info').get('row').get('uielements'), this.el);
                this.subviews.push(this.widgetSelectorView);
            },


            render: function() {
                var self = this;
                var form;

                this.el.innerHTML = '';

                var width = this.model.get('layout').get('width');
                var height = this.model.get('layout').get('height');

                this.setTop(this.positionVerticalGrid * this.model.get('layout').get('top'));
                this.setLeft(this.positionHorizontalGrid * this.model.get('layout').get('left'));
                this.setHeight(height * this.positionVerticalGrid);

                this.el.className += ' widget-wrapper span' + width;
                this.el.id = 'widget-wrapper-' + this.model.cid;

                var row = this.model.get('data').get('container_info').get('row');

                var editorRow = document.createElement('div');
                editorRow.className = "row block hi" + row.get('layout').get('height');
                this.editorRow = editorRow;

                row.get('uielements').map(function(widgetModel) {
                    this.placeWidget(widgetModel, false);
                }, this);
                this.widgetSelectorView.setElement(this.el).render();

                this.shadowElements = document.createElement('div');
                var listDiv = document.createElement('div');
                listDiv.className = this.model.get('data').get('class_name');
                this.listDiv = listDiv;
                this.editorRow = editorRow;
                this.listDiv.appendChild(editorRow);
                this.listDiv.appendChild(this.renderShadowElements());

                this.el.appendChild(this.listDiv);
                return this;
            },

            renderShadowElements: function() {

                var nmrRows = 4;

                if (this.model.get('data').get('container_info').has('query') &&
                    this.model.get('data').get('container_info').get('query').get('numberOfRows') > 0) {
                    nmrRows = this.model.get('data').get('container_info').get('query').get('numberOfRows') - 1;
                }

                this.shadowElements.innerHTML = '';
                var sampleNode = this.editorRow.cloneNode(true);
                $('.ui-resizable-handle', sampleNode).remove();
                for (var ii = 0; ii < nmrRows; ii++) {
                    var node = sampleNode.cloneNode(true);
                    node.style.position = 'relative';
                    $(node).removeClass('highlighted');
                    this.shadowElements.appendChild(node);
                }

                if (this.editMode) {
                    $('.fdededfcbcbcd .shadow-x').addClass('trans');
                }
                return this.shadowElements;
            },

            showDetails: function() {

            },

            highlightFirstRow: function() {
                var self = this;
                this.editMode = true;
                this.highlighted = true;
                this.$el.addClass('selected');
                $(this.editorRow).resizable({
                    handles: "s",
                    grid: [20, 15],
                    stop: self.resized
                });
                $(this.editorRow).addClass('highlighted');

                $('.fdededfcbcbcd .shadow-x').addClass('trans');
            },

            placeWidget: function(widgetModel, isNew) {
                widgetModel.setupLoopContext(this.entityModel);
                var widgetView = {};

                if (!widgetModel.isBuyButton()) {
                    widgetView = new WidgetView(widgetModel);
                } else {
                    widgetView = new WidgetContainerView(widgetModel);
                }

                this.subviews.push(widgetView);
                widgetView.setFreeMovement();

                this.editorRow.appendChild(widgetView.render().el);

                this.deepListenTo(widgetModel, 'change', this.renderShadowElements);

                if (isNew) {
                    widgetView.autoResize();
                }
            },

            resized: function(e, ui) {
                var deltaHeight = Math.round((ui.size.height + 6) / this.positionVerticalGrid);
                var elem = util.get('widget-wrapper-' + this.model.cid);
                elem.style.width = '';
                elem.style.height = '';
                this.model.get('data').get('container_info').get('row').get('layout').set('height', deltaHeight);
            },

            autoResize: function() {
                var left = this.model.get('layout').get('left');
                var width = 12 - left;
                if (width > 7) width = 7;

                this.model.get('layout').set('width', width);
                this.model.get('layout').set('height', 46);
            },

            changedType: function(a) {
                this.listDiv.className = this.model.get('data').get('class_name');
            },

            switchEditingOff: function() {
                this.editMode = false;
                this.$el.removeClass('selected');
                this.widgetSelectorView.deselect();
                  if(this.highlighted && $(this.editorRow).hasClass('ui-resizable'))  {
                    $(this.editorRow).resizable("destroy");
                    this.$el.find('.row').first().removeClass('highlighted');
                  }
                      this.$el.find('.row').first().removeClass('highlighted');
                $('.shadow-x.trans').removeClass('trans');
                this.highlighted = false;
            }

        });

        return WidgetListView;
    });
define('editor/WidgetFormView',[
  'editor/WidgetContainerView',
  'editor/WidgetView',
  'editor/list-editor/ListWidgetSelectorView',
  'dicts/constant-containers',
  'editor/editor-templates'
],
function( WidgetContainerView,
          WidgetView,
          ListWidgetSelectorView ) {

  var WidgetListView = WidgetContainerView.extend({
    el: null,
    className: 'widget-wrapper',
    tagName : 'div',
    entity: null,
    type: null,

    positionHorizontalGrid : 80,
    positionVerticalGrid   : 15,

    events: {
      'click .delete' : 'remove',
      'dblclick'      : 'showDetails',
      'mousedown'     : 'select',
      'mouseover'     : 'hovered',
      'mouseout'      : 'unhovered'
    },

    rowMousedown: function() { mouseDispatcher.isMousedownActive = true; },
    rowMouseup:   function() { mouseDispatcher.isMousedownActive = false; },

    initialize: function(widgetModel) {
      WidgetContainerView.__super__.initialize.call(this, widgetModel);
      _.bindAll(this);

      var self = this;
      var action = this.model.get('data').get('container_info').get('action');


      var form = this.model.get('data').get('container_info').get('form');

      this.formModel = form;
      //this.formModel.bind('change', this.reRender);
      this.formModel.get('fields').bind('remove', this.reRender);
      this.formModel.get('fields').bind('add', this.reRender);
      this.formModel.get('fields').bind('change', this.reRender);
      this.formModel.get('fields').each(function(model){ model.bind('change', self.reRender); });
    },

    reRender: function() {
      this.el.innerHTML  = '';
      this.render();
      this.autoResizeVertical();
    },

    render: function() {
      this.arrangeLayout();

      if(this.form) $(this.form).remove();

      this.form = document.createElement('form');
      this.el.appendChild(this.form);
      this.form.innerHTML = '';

      if(!this.model.get('data').has('class_name')) {
        var className = uieState["forms"][0].class_name;
        this.model.get('data').set('class_name', className, {silent: true});
      }

      this.form.className = this.model.get('data').get('class_name');
      this.formModel.get('fields').each(function(field) {
        this.placeFormElement(field);
      }, this);

      return this;
    },

    placeFormElement: function(fieldModel) {
      var inp_class = uieState.textInputs[0].class_name;
      var fieldHtml = _.template(Templates.fieldNode, { field: fieldModel, inpClass: ""});
      $(this.form).append(fieldHtml);
    },

    showDetails: function() {
      if(this.model.get('data').get('container_info').has('form')) {
        new FormEditorView(this.formModel,
                           this.model.get('data').get('container_info').get('entity'));
      }
    }

  });

  return WidgetListView;
});

define('editor/WidgetCustomView',[
  'editor/WidgetView'
],
function( WidgetView ) {

  var WidgetCustomView = WidgetView.extend({
    el: null,
    className: 'custom-widget',
    tagName : 'div',
    entity: null,
    type: null,

    positionHorizontalGrid : 80,
    positionVerticalGrid   : 15,

    events: {
    },

    rowMousedown: function() { mouseDispatcher.isMousedownActive = true; },
    rowMouseup:   function() { mouseDispatcher.isMousedownActive = false; },

    initialize: function(widgetModel) {
      WidgetCustomView.__super__.initialize.call(this, widgetModel);
      _.bindAll(this);

      this.listenTo(this.model, 'custom_edited', this.rePlaceAll);
    },

    reRender: function() {
      this.el.innerHTML  = '';
      this.render();
    },

    render: function() {
      var width = this.model.get('layout').get('width');
      var height = this.model.get('layout').get('height');

      this.setTop(this.positionVerticalGrid * this.model.get('layout').get('top'));
      this.setLeft(this.positionHorizontalGrid * this.model.get('layout').get('left'));
      this.setHeight(height * this.positionVerticalGrid);

      if(this.model.get('layout').has('l_padding')) {
        this.el.style.paddingLeft = this.model.get('layout').get('l_padding') + 'px';
      }

      if(this.model.get('layout').has('r_padding')) {
        this.el.style.paddingRight = this.model.get('layout').get('r_padding') + 'px';
      }

      if(this.model.get('layout').has('t_padding')) {
        this.el.style.paddingTop = this.model.get('layout').get('t_padding') + 'px';
      }

      if(this.model.get('layout').has('b_padding')) {
        this.el.style.paddingBottom = this.model.get('layout').get('b_padding') + 'px';
      }

      this.el.className += ' widget-wrapper span'+width;
      this.el.id = 'widget-wrapper-' + this.model.cid;

      this.placeHTML();
      this.placeCSS();
      this.placeJS();

      return this;
    },

    rePlaceAll: function() {
      this.placeHTML();
      this.placeCSS();
      this.placeJS();
    },

    placeHTML: function() {
      if(this.model.get('data').get('htmlC')) {
        this.el.innerHTML = this.model.get('data').get('htmlC');
      }
      else {
        this.el.innerHTML = '<div class="custom-text-field">CUSTOM WIDGET</div>';
      }
    },

    placeJS: function() {

      var self = this;
  
      var jsTag = 'custom-js-widget-' + this.model.cid;
      if(jsTag) $(jsTag).remove();

      var appendJSTag = function() {

        var customJSTemp = [
          'function($) {',
          // 'try {',
          '<%= code %>',
          // '} catch(err) { console.log("Error executing custom js."); }',
          '}(window.jQuery);'
        ].join('\n');

        try {
          jsTag = document.createElement('script');
          jsTag.id = 'custom-js-widget-' + self.model.cid;
          jsTag.setAttribute("type","text/javascript");
          // console.log(_.template(customJSTemp, { code: this.model.get('data').get('jsC') }));
          jsTag.text = self.model.get('data').get('jsC');

          document.body.appendChild(jsTag);
        }
        catch(err) {
          console.log('Error adding custom js:' + err);
        }
      };

      $(document).ready(appendJSTag);
      // this.listenTo(v1, 'editor-loaded', appendJSTag, this);
    },

    placeCSS: function() {
      var styleTag = document.getElementById('custom-css-widget-' + this.model.cid);
      if(styleTag) $(styleTag).remove();

      var style = document.createElement('style');
      style.id = 'custom-css-widget-' + this.model.cid;
      style.type = 'text/css';
      var css = this.model.get('data').get('cssC');
      if (style.styleSheet){
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
      document.getElementsByTagName('head')[0].appendChild(style);
    },

    close: function() {
      var jsTag = 'custom-js-widget-' + this.model.cid;
      if(jsTag) $(jsTag).remove();
      var styleTag = document.getElementById('custom-css-widget-' + this.model.cid);
      if(styleTag) $(styleTag).remove();
      WidgetCustomView.__super__.close.call(this);
    }

  });

  return WidgetCustomView;
});

define('editor/SectionEditorView',['require','exports','module','editor/WidgetView','editor/WidgetContainerView','models/WidgetModel','editor/WidgetListView','editor/WidgetFormView','editor/WidgetCustomView','editor/CustomWidgetEditorModal','backbone','util'],function(require, exports, module) {

    'use strict';
    var WidgetView = require('editor/WidgetView');
    var WidgetContainerView = require('editor/WidgetContainerView');
    var WidgetModel = require('models/WidgetModel');
    var WidgetListView = require('editor/WidgetListView');
    var WidgetFormView = require('editor/WidgetFormView');
    var WidgetCustomView = require('editor/WidgetCustomView');
    var CustomWidgetEditorModal = require('editor/CustomWidgetEditorModal');
    require('backbone');
    require('util');


    var SectionEditorView = Backbone.View.extend({

        widgetsContainer: null,

        events: {
            'keyup .class_name'     : 'classNameChaged',
            'click .remove-section' : 'removeSection'
        },

        className: "section-editor-view",

        subviews: [],

        initialize: function(sectionModel) {
            _.bindAll(this);
            this.model = sectionModel;
        },

        render: function() {
            var template = [
                    '<div class="btn-group">',
                        '<div class="button dropdown-toggle" data-toggle="dropdown">',
                        '<img width="24" class="icon" src="/static/img/edit.png"><span class="caret"></span>',
                        '</div>',
                        '<ul class="dropdown-menu pull-right action-menu" role="menu">',
                            '<li><a><input type="text" class="class_name" value="<%= className %>" placeholder="Class Name"></a></li>',
                            '<li class="divider"></li>',
                            '<li class="remove-section"><a>Remove Section</a></li>',
                        '</ul>',
                    '</div>'].join('\n');

            var data = this.model.toJSON();
            data.className = data.className || "";

            this.el.innerHTML = _.template(template, data);

            this.$el.find('.dropdown-menu input').click(function(event){
                event.stopPropagation();
            });
            this.$el.find('.dropdown-toggle').dropdown();

            return this;
        },

        classNameChaged: function(e) {
            var value = e.currentTarget.value;
            this.model.set('className', value);
        },

        removeSection: function() {
            this.model.collection.remove(this.model);
        }

    });

    return SectionEditorView;
});
define('editor/SectionShadowView',['require','exports','module','editor/WidgetView','models/WidgetModel','editor/SectionEditorView','backbone','util'],function(require, exports, module) {

    'use strict';

    var WidgetView = require('editor/WidgetView');
    var WidgetModel = require('models/WidgetModel');
    var SectionEditorView = require('editor/SectionEditorView');

    require('backbone');
    require('util');


    var SectionShadowView = Backbone.View.extend({

        widgetsContainer: null,

        events: {
            'mouseover'       : 'hovered',
            'mouseup'         : 'hovered',
            'mouseover .ycol' : 'hoveredColumn',
            'mouseup .ycol'   : 'hoveredColumn'
        },

        className: "section-shadow-view",

        subviews: [],

        initialize: function(sectionCollection) {
            _.bindAll(this);

            this.collection = sectionCollection;
            this.listenToModels(sectionCollection, 'change', this.reRenderSectionShadow);
        },

        render: function() {
            
            this.shadowFrame = document.getElementById('shadow-frame');
            var iframe = v1.currentApp.view.iframe;
            this.iframe = iframe;
            this.iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

            this.shadows = [];

            return this;
        },

        renderSectionShadow: function(sectionModel) {
            
            var el = this.iframeDoc.getElementById('section-wrapper-' + sectionModel.cid);

            var ycols = $(el).find('.ycol');

            var self = this;

            ycols.each(function() {
                var colId = this.id.replace('col','');
                var shadowEl = util.addShadow(this, document.getElementById('page-wrapper'), self.iframe, self.iframeDoc);
                //shadowEl.innerHTML = sectionModel.cid;
                shadowEl.className = "section-shadow";
                self.shadows.push(shadowEl);
                self.shadowFrame.appendChild(shadowEl);

                $(shadowEl).droppable({
                    accept: ".ui-draggable",
                    drop: function( event, ui ) {
                        
                        var extraData = {};

                        var type = $(ui.draggable).data("type");

                        if($(ui.draggable).data("extraData")) {
                            extraData = $(ui.draggable).data("extraData");
                        }

                        if($(ui.draggable).data("genpath")) {
                            sectionModel.addElementWithPath(colId, type, $(ui.draggable).data("genpath"), extraData);
                            return;
                        }
    
                        // var idshit =
                        sectionModel.addElement(colId, type, extraData);
                    },
                    over: function() {
                        shadowEl.className = "section-shadow active";
                    },
                    out: function() {
                        shadowEl.className = "section-shadow";
                    }
                });
            });

        },

        displayColumnShadows: function() {
            this.collection.each(this.renderSectionShadow);
            $(this.shadowFrame).show();
        },

        hideColumnShadows: function() {
            $(this.shadowFrame).hide();
            _.each(this.shadows, function(shadowEl) {
                $(shadowEl).remove();
            });

            this.shadows = [];
        }

    });

    return SectionShadowView;
});
define('editor/EditorView',['require','exports','module','app/pages/UrlView','mixins/SimpleModalView','mixins/ErrorModalView','mixins/DebugOverlay','editor/WidgetEditorView','editor/EditorGalleryView','app/pages/PageView','editor/PageTemplatePicker','editor/NavbarView','editor/FooterView','editor/GuideView','tutorial/TutorialView','app/DeployView','app/RedoController','app/css-editor/CSSEditorView','editor/SectionShadowView','jquery-ui','mixins/BackboneConvenience','editor/editor-templates'],function(require, exports, module) {

    'use strict';

    var UrlView = require('app/pages/UrlView');
    var SimpleModalView = require('mixins/SimpleModalView');
    var ErrorModalView = require('mixins/ErrorModalView');
    var DebugOverlay = require('mixins/DebugOverlay');
    var WidgetEditorView = require('editor/WidgetEditorView');
    var EditorGalleryView = require('editor/EditorGalleryView');
    var PageView = require('app/pages/PageView');

    var PageTemplatePicker = require('editor/PageTemplatePicker');
    var NavbarView = require('editor/NavbarView');
    var FooterView = require('editor/FooterView');
    var GuideView = require('editor/GuideView');
    var TutorialView = require('tutorial/TutorialView');
    var DeployView = require('app/DeployView');
    var RedoController = require('app/RedoController');
    var CSSEditorView = require('app/css-editor/CSSEditorView');
    var SectionShadowView = require('editor/SectionShadowView');

    require('jquery-ui');
    require('mixins/BackboneConvenience');
    require('editor/editor-templates');


    var EditorView = Backbone.View.extend({
        className: 'editor-page',
        css: "bootstrap-editor",

        events: {
            'click .menu-button.help'    : 'help',
            'click .menu-button.question': 'question',
            'click .url-field'           : 'clickedUrl',
            'click .refresh-page'        : 'refreshPage',
            'click #page-info'           : 'pageInfo',
            'click #close-page-info'     : 'closePageInfo',
            'click #design-mode-button'  : 'switchToDesignMode',
            'click #close-css-editor'    : 'switchOffDesignMode'
        },

        initialize: function(options) {
            _.bindAll(this);

            if (options && (options.pageId == "0" || options.pageId  >= 0)) {
                this.pageId = options.pageId;
                pageId = options.pageId;
            }

            this.appModel = options.appModel;

            this.model = this.appModel.get('routes').models[pageId];
            this.pageName = this.model.get('name');

            v1State.currentPage = this.model;
            this.appModel.currentPage = this.model;
            v1State.isMobile = false;
            this.appModel.isMobile = false;


            this.templateModel = this.appModel.get('templates').getTemplateWithName(this.pageName);
            this.sectionsCollection = this.templateModel.getSections();

            this.galleryEditor = new EditorGalleryView(this.sectionsCollection);
            this.sectionsManager = {};
            //this.guides = new GuideView(this.sectionsCollection);
            this.cssEditorView = new CSSEditorView();
            this.pageView = new PageView(this.model, this.templateModel, pageId);

            // TODO: setup redo controller again
            // this.redoController = new RedoController();
            this.widgetEditorView = new WidgetEditorView();
            v1.widgetEditorView = this.WidgetEditorView;

            // keyDispatcher.bindComb('meta+z', this.redoController.undo);
            // keyDispatcher.bindComb('ctrl+z', this.redoController.undo);
            // keyDispatcher.bindComb('meta+shift+z', this.redoController.redo);
            // keyDispatcher.bindComb('ctrl+shift+z', this.redoController.redo);

            //g_guides = this.guides;

            this.navbar = new NavbarView(this.templateModel.get('navbar'));
            this.footer = new FooterView(this.templateModel.get('footer'));
            this.urlModel = this.model.get('url');

            this.title = "Editor";

            this.listenTo(this.model.get('url').get('urlparts'), 'add remove', this.renderUrlBar);
            this.listenTo(this.model, 'scroll', this.scrollTo);

        },

        render: function() {

            var self = this;
            if (!this.el.innerHTML) {
                this.el.innerHTML = _.template(util.getHTML('editor-page'), {
                    pageId: this.pageId
                });
            }

            document.body.style.overflow = "hidden";

            this.renderUrlBar();
            this.galleryEditor.render();

            this.el.appendChild(this.widgetEditorView.render().el);
            this.cssEditorView.setElement($('#css-editor-panel')).render();
            this.pageView.setElement($('#page-view-panel')).render();

            /* Access to elements inside iframe */
            var iframe = document.getElementById('page');
            this.iframe = iframe;

            this.setupPageWrapper();
            this.setupPageHeightBindings();

            window.addEventListener('resize', this.setupPageWrapper);

            $('#loading-gif').fadeOut().remove();

            $('.left-buttons').tooltip({
                position: {
                    my: "left+10 center",
                    at: "right center",
                    using: function(position, feedback) {
                        $(this).css(position);
                        $("<div>")
                            .addClass("arrow")
                            .addClass(feedback.vertical)
                            .addClass(feedback.horizontal)
                            .appendTo(this);
                    }
                }
            });

            this.$pageContainer = this.$el.find('.page-container');
            return this;
        },

        renderIFrameContent: function(proxy) {
            var self = this;
            var iframe = document.getElementById('page');
            innerDoc = iframe.contentDocument || iframe.contentWindow.document;

            this.widgetEditorView.setupScrollEvents();

            keyDispatcher.addEnvironment(innerDoc);

            this.iframeProxy = proxy;
            //this.marqueeView = proxy.setupMarqueeView(this.sectionsCollection.getAllWidgets());

            this.sectionsManager = proxy.setupSectionsManager(this.sectionsCollection);
            this.sectionShadowView = new SectionShadowView(this.sectionsCollection);

            self.iframedoc = innerDoc;
            //self.marqueeView.render();
            self.sectionsManager.render();
            self.sectionShadowView.render();

            self.navbar.setElement(innerDoc.getElementById('navbar')).render();
            self.footer.setElement(innerDoc.getElementById('footer')).render();

            //self.guides.setElement(innerDoc.getElementById('elements-container')).render();
            //$(innerDoc.getElementById('elements-container')).append(self.marqueeView.el);

            self.startUIStateUpdater(proxy);
            self.setupPageHeight();

            /* TODO re-implement page templates
            if (!this.model.get('uielements').length) {
                var templatePicker = new PageTemplatePicker({ model: this.model, callback: function() {
                    $('.options-area').hide();
                    $('.page-wrapper').addClass('show');
                }});

                this.$el.find('.options-area').append(templatePicker.render().el);
            }
            else { */

            this.$el.find('.page-wrapper').addClass('show');
            this.iframeProxy.updateScrollbar();

            /* } */
        },

        getCurrentTemplate: function() {
            return this.templateModel;
        },

        renderUrlBar: function() {
            this.$el.find('.url-field').html(this.urlModel.getUrlString());
        },

        help: function(e) {
            new TutorialView([6]);
        },

        startUIStateUpdater: function(proxy) {
            var self = this;
            this.listenTo(v1UIEState, 'synced', proxy.reArrangeCSSTag);

            this.UIStateTimer = setInterval(function() {
                self.fetchUIState(function(state) {
                    /* crappy fix */
                    _.each(state.texts, function(text) {
                        text.tagName = "div";
                    });

                    if (!_.isEqual(state, uieState)) {
                        self.renewUIEState(state, proxy);
                    }
                });

            }, 10000);
        },

        fetchUIState: function(callback) {
            $.ajax({
                type: "GET",
                url: '/app/' + appId + '/uiestate/',
                statusCode: {
                    200: callback,
                    400: callback,
                },
                dataType: "JSON"
            });
        },

        renewUIEState: function(newState, proxy) {
            uieState = newState;
            proxy.reArrangeCSSTag();
        },

        question: function(e) {
            olark('api.box.show');
            olark('api.box.expand');
        },

        clickedUrl: function() {
            var newView = new UrlView(this.urlModel, this.model);
            newView.onClose = this.renderUrlBar;
        },

        refreshPage: function() {
            this.iframeProxy.reloadPage();
        },

        setupPageWrapper: function() {
            var height = window.innerHeight - 90;
            util.get('page-wrapper').style.height = height + 'px';
            this.$el.find('.page.full').css('height', height - 46);
        },

        setupPageHeightBindings: function() {
            // this.listenTo(this.widgetsCollection, 'add', function(uielem) {
            //     this.setupPageHeight();
            //     this.listenTo(uielem.get('layout'), 'change', this.setupPageHeight);
            // }, this);

            // this.widgetsCollection.each(function(uielem) {
            //     this.listenTo(uielem.get('layout'), 'change', this.setupPageHeight);
            // }, this);
        },

        setupPageHeight: function() {
            // var $container = $(this.iframedoc.getElementById('elements-container'));
            // var oldHeight = this.currentHeight;

            // this.currentHeight = (this.templateModel.getHeight() + 12) * 15;
            // if (this.currentHeight < 800) this.currentHeight = 800;
            // $container.css('height', this.currentHeight);

            // if (this.currentHeight > oldHeight) {
            //     util.scrollToBottom($('#page'));
            // }
        },

        scrollTo: function(widget) {

            var pageHeight = window.innerHeight - 90 - 46;
            var pageTop = $('#page').scrollTop();

            var pageHeightUnit = Math.floor(pageHeight / 15);
            var topUnit = Math.floor(pageTop / 15);

            if ((widget.getBottom() + 6) > (pageHeightUnit + topUnit)) {
                $('#page').scrollTop((widget.getBottom() - pageHeightUnit + widget.get('layout').get('height') + 1) * 15);
            }

        },

        pageInfo: function() {
            this.pageView.expand();
        },

        closePageInfo: function() {
            this.pageView.hide();
            $('.left-buttons').removeClass('invisible');
            this.$pageContainer.removeClass('packed');
            this.galleryEditor.show();
        },

        switchToDesignMode: function() {
            this.cssEditorView.expand();
            $('.left-buttons').addClass('invisible');
            this.$pageContainer.addClass('packed');
            this.galleryEditor.hide();
        },

        switchOffDesignMode: function() {
            this.cssEditorView.hide();
            $('.left-buttons').removeClass('invisible');
            this.$pageContainer.removeClass('packed');
            this.galleryEditor.show();
        },

        close: function() {

            g_guides = null;
            window.removeEventListener('resize', this.setupPageWrapper);
            document.body.style.overflow = "";

            clearInterval(this.UIStateTimer);

            // keyDispatcher.unbind('meta+z', this.redoController.redo);
            // keyDispatcher.unbind('ctrl+z', this.redoController.redo);

            // TODO: fix this
            //EditorView.__super__.close.call(this);
            this.undelegateEvents();
            this.$el.removeData().unbind();
            this.remove();
            this.unbind();
        }

    });

    return EditorView;
});

define('mixins/BackboneDropdownView',[
        'backbone',
        'jquery-ui'
    ],

    function() {

        Backbone.DropdownView = Backbone.View.extend({

            toggleElement: null,
            events: {

            },
            _configure: function(options) {
                Backbone.DropdownView.__super__._configure.call(this, options);
                _.bindAll(this);
            },

            _ensureElement: function(options) {
                Backbone.DropdownView.__super__._ensureElement.call(this, options);
            },

            setToggleEl: function($el) {
                this.$toggleEl = $el;
                var self = this;
                $el.on('click', function() {
                    self.toggle();
                });
            },
            // Set the displacement of the little pointer
            setPointerPosition: function(offset){

            },
            toggle: function() {
                if(this.isExpanded) { this.hide(); } else { this.expand(); }
            },

            expand: function() {
                this.$el.addClass('expanded');
                this.$toggleEl.addClass('expanded');
                this.isExpanded = true;
                $(window).on('mouseup', this.clickedOnElement);
                $(window).on('keydown', this.closeHandler);

            },

            hide: function() {
                this.$el.removeClass('expanded');
                this.$toggleEl.removeClass('expanded');

                this.isExpanded = false;
                $(window).off('mouseup', this.clickedOnElement);
                $(window).off('keydown', this.closeHandler);
            },

            clickedOnElement: function(e) {
                var container = this.$el;
                var toggleEl = this.$toggleEl;
                // if the target of the click isn't the container
                // ... nor a descendant of the container
                if (!container.is(e.target) && !toggleEl.is(e.target) &&
                    container.has(e.target).length === 0 && toggleEl.has(e.target).length === 0)
                {
                    this.hide();
                }
            },

            closeHandler: function(e) {
                if(e.keyCode == 27) {
                    this.hide();
                }
            }

        });

        return Backbone;
    });
define('PluginBrowserView',['require','exports','module','mixins/BackboneModal','util','models/PluginModel'],function(require, exports, module) {

    'use strict';

    require('mixins/BackboneModal');
    require('util');

    var PluginModel = require('models/PluginModel');

    var PluginBrowserView = Backbone.ModalView.extend({
        className: "plugin-browser-panel",
        width: 800,
        height: 630,
        padding: 0,

        events: {
            'click .addPluginButton': 'addPlugin'
        },

        initialize: function() {
            _.bindAll(this);
            this.render();
        },

        currentList: null,

        render: function() {
            var self = this;
            var loadingSpin = util.addLoadingSpin(this.el);

            $.ajax({
                type: "GET",
                url: "/plugins/",
                dataType: "json",
                success: function(data) {
                    $(loadingSpin).remove();
                    self.layoutPlugins(data);
                }
            });

            return this;
        },

        layoutPlugins: function(listPlugins) {
            this.currentList = listPlugins;
            var template = util.getHTML('plugin-browser');
            this.el.innerHTML = _.template(template, {
                pluginsList: listPlugins
            });
        },

        addPlugin: function(e) {
            /* Installs the plugin */
            var ind = e.currentTarget.id.replace('add-', '');
            var plugin = this.currentList[ind];
            v1State.get('plugins').install(plugin);
            e.currentTarget.innerHTML = 'Plugin Installed ✔';
        }

    });

    return PluginBrowserView;
});
define('app/entities/PluginsView',['require','exports','module','util','mixins/BackboneDropdownView','PluginBrowserView'],function(require, exports, module) {

    'use strict';
    require('util');
    require('mixins/BackboneDropdownView');
    var PluginBrowserView = require('PluginBrowserView');

    var PluginsView = Backbone.DropdownView.extend({
        
        title: 'Plugins',

        className: 'plugins-view',

        events: {
            'click .onoffswitch': 'clickedPluginToggle',
            'click .browsePluginsButton': 'browsePlugins'
        },
        
        initialize: function() {
            this.listenTo(v1State.get('plugins'), 'change', this.render);
        },
        
        render: function() {
            var plugins = v1State.get('plugins').serialize();
            plugins = _.map(plugins, function(val, key) { return val; });
            console.log(plugins);
            this.$el.html(_.template(util.getHTML('plugins-page'), {plugins: plugins}));
            return this;
        },
        
        browsePlugins: function(){
            var browserView = new PluginBrowserView({});
        },
        
        clickedPluginToggle: function(e){
            
            var input = $(e.target).closest("[type='checkbox']");
            var pluginName = $(input).attr('pluginName');
            var pluginEnabled = $(input).hasClass('checked');

            if (pluginEnabled){
                $(input).removeClass('checked');
            } else {
                $(input).addClass('checked');
            }
            
            var plugin = v1.currentApp.model.get('plugins').find(
                function (p) {
                    if (p.get('pluginInformation').name === pluginName){
                        if (pluginEnabled){
                            p.disablePlugin();
                        } else {
                            p.enablePlugin();
                        }
                    }
                    return (p.get('pluginInformation').name === pluginName); 
            });
            
            console.log(this.getActivePlugins())
        },
        
        getActivePlugins: function (){
            
            var enabledPlugins = v1.currentApp.model.get('plugins').filter( 
                function (p) { 
                    return p.getPluginStatus() ; 
                }
            );
            
            return enabledPlugins;
        }
    });

    return PluginsView;

});

define('app/SettingsView',['require','exports','module','backbone','util','mixins/BackboneDropdownView'],function(require, exports, module) {

    'use strict';
    require('backbone');
    require('util');
    require('mixins/BackboneDropdownView');

    var SettingsView = Backbone.DropdownView.extend({
        title: 'Plugins',
        className: 'settings-view',
        subviews: [],

        events: {
            "keyup #scripts-content" : "scriptsChanged",
            "keyup #header-content"  : "headerChanged"
        },

        initialize: function() {
            _.bindAll(this);
            this.model = v1State;
        },

        render: function() {

            var template = [
                '<div class="" id="settings-page">',
                    '<h2 class="pheader">App Settings</h2>',
                    '<ul id="list-tables">',
                    '<li>',
                        '<h3>Header</h3>',
                        '<textarea id="header-content"><%= header_content %></textarea>',
                    '</li>',
                    '<li>',
                        '<h3>Scripts</h3>',
                        '<textarea id="scripts-content"><%= scripts_content %></textarea>',
                    '</li>',
                    '</ul>',
                '</div>'].join('\n');

            this.el.innerHTML = _.template(template, { header_content: this.model.get("header") || "",
                                                       scripts_content: this.model.get("scripts") || ""});
            return this;
        },

        scriptsChanged: function(e) {
            console.log(e.currentTarget.value);
            this.model.set("scripts", e.currentTarget.value);
        },

        headerChanged: function(e) {
            this.model.set("header", e.currentTarget.value);
        }

    });

    return SettingsView;
});
define('app/SoftErrorView',['require','exports','module','mixins/BackboneModal'],function(require, exports, module) {
    'use strict';

    require('mixins/BackboneModal');

    var SoftErrorView = Backbone.View.extend({
        className: 'soft-error-modal',
        events: {
            'click': 'close'
        },
        top: false,

        initialize: function(options, closeCallback) {
            _.bindAll(this);

            this.text = options.text;
            this.path = options.path;

            // wrap the callback in a function, since the callback may be undefined
            this.closeCallback = function() {
                if (typeof(closeCallback) == 'function') return closeCallback();
                else return false;
            };
            this.render();
        },

        resolve: function() {
            var arr = this.path.split('/');
            var el = arr[0];
            var str = "<p>";

            switch (el) {
                case "pages":
                    var pageObj = appState.pages[arr[1]];
                    str += "Problem is on <a href='/app/" + appId + "/page/" + arr[1] + "/'>" + pageObj.name + '</a>';
                    break;
            }

            str += "</p>";

            switch (arr[2]) {
                case "uielements":
                    var widgetObj = v1State.get('pages').models[arr[1]].get('uielements').models[arr[3]];

                    var iframe = document.getElementById('page');
                    if (iframe) {
                        var innerDoc = iframe.contentDocument || iframe.contentWindow.document;
                        var domEl = innerDoc.getElementById('widget-wrapper-' + widgetObj.cid);

                        if (domEl) {
                            this.overlayEl = util.addOverlay(domEl);
                        } else {
                            this.listenTo(v1, 'editor-loaded', function() {
                                var domEl = document.getElementById('widget-wrapper-' + widgetObj.cid);
                                var self = this;
                                setTimeout(function() {
                                    self.overlayEl = util.addOverlay(domEl);
                                }, 300);
                            }, this);
                        }
                    }
            }

            return str;
        },

        render: function() {

            var div = document.createElement('div');
            div.className = "modal-bg fadeIn";
            div.style.position = 'fixed';
            div.style.width = '100%';
            div.style.height = '100%';
            div.style.top = '0';
            div.style.left = '0';
            div.style.backgroundColor = '#222';
            div.style.opacity = '0.6';
            div.style.zIndex = 3000;
            document.body.appendChild(div);
            this.bgDiv = div;

            var speech = document.createElement('span');
            speech.innerHTML = this.text + this.resolve(this.path);
            var button = document.createElement('div');
            button.className = 'btn-info btn';
            button.innerHTML = 'OK, Got it!';

            this.el.appendChild(speech);
            this.el.appendChild(button);
            document.body.appendChild(this.el);

            return this;
        },

        close: function() {
            $(this.bgDiv).remove();
            if (this.overlayEl) $(this.overlayEl).remove();
            this.stopListening(v1, 'editor-loaded');
            this.closeCallback();
            SoftErrorView.__super__.close.call(this);
        }

    });

    return SoftErrorView;
});
define('app/entities/UploadExcelView',[
  'backbone',
  'mixins/BackboneModal'
],
function(Backbone) {

  var UploadExcelView = Backbone.ModalView.extend({
    tagName: 'div',
    className: 'upload-excel',
    width: 600,
    height: 500,

    events: {
      'click'             : 'openFileInput',
      'change #pick-file' : 'filePicked'
    },

    initialize: function(entityModel) {
      _.bindAll(this);

      this.entity = entityModel;
      this.name = entityModel.get('name');
      this.fields = entityModel.get('fields').serialize();
      this.render();
      this.setUpDragnDrop();

    },

    render : function(text) {
      this.el.innerHTML = ['<div class="dragndrop">',
                            '<form enctype="multipart/form-data" method="post" class="upload-form" action="/app/'+ appId +'/entities/userxl/">'+
                                  '<span>Drag and drop the excel file you would like to upload, or click to pick your file</span>',
                                  '<div style="display:none;"><input type="file" id="pick-file" name="file_name" value="Upload"/></div>',
                                  '<input type="hidden" name="entity_name" value="'+ this.name+'">',
                                  '<input type="hidden" name="fields" value=\''+ JSON.stringify(this.fields) +'\'>',
                                  '<div type="submit" class="btn pick-btn">Pick File</div>',
                           '</form></div>'].join('\n');
      return this;
    },

    setUpDragnDrop: function() {
      var self = this;

      $(this.el).filedrop({
        // The name of the $_FILES entry:
        paramname:'file_name',

        maxfiles: 1,
        maxfilesize: 10, // in mb
        url: '/app/'+ appId +'/entities/userxl/',

        uploadFinished:function(i,file,response){
          //console.log($.data(file));
          //$.data(file).addClass('done');
          //$.data(file).attr('href', '/doc/show/' + response);
          //$('#dropbox').html('<span id="drop-label">Drag and drop the file here.</span>');
          //$('#dropbox').css('background-color','#FFF');
        },

        error: function(err, file) {
          switch(err) {
            case 'BrowserNotSupported':
              showMessage('Your browser does not support HTML5 file uploads.');
              break;
            case 'TooManyFiles':
              alert('Too many files. Please select 5 at most.');
              break;
            case 'FileTooLarge':
              alert(file.name+' is too large. Please upload files up to 2mb.');
              break;
            default:
              break;
          }
        },

        // Called before each upload is started
        beforeEach: function(file){

        },

        uploadStarted:function(i, file, len){
          self.$el.find('.dragndrop').append('<div class="file-info">'+ file.name +'</div>');

          var tmpl = '<a class="preview">'+
            '<span class="imageHolder">'+
              '<img src="" class="document-icon"/>'+
              '<span class="uploaded"></span></span>'+
            '<div class="progressHolder">'+
              '<div class="progress"></div></div></a>';

          tmpl = $(tmpl);
          //var preview = $('div').html(tmpl);
          var reader = new FileReader();
          reader.readAsDataURL(file);
          self.$el.find('.dragndrop').append(tmpl);
          $.data(file,tmpl);
          // var tmpl = '<a class="preview">'+
          //   '<span class="imageHolder">'+
          //     '<img src="" class="document-icon"/>'+
          //     '<span class="uploaded"></span></span>'+
          //   '<div class="progressHolder">'+
          //     '<div class="progress"></div></div></a>';

          // tmpl = $(tmpl);
          // //var preview = $('div').html(tmpl);
          // var reader = new FileReader();
          // reader.readAsDataURL(file);
          // upperField.append(tmpl);
          // $.data(file,tmpl);
        },

        progressUpdated: function(i, file, progress) {
          $('.progress', $.data(file)).width(progress + "%");
        },

        dragEnter: function() {
          self.el.style.backgroundColor = '#eee';
          // $('#dropbox').html('<span id="drop-label">You can drop the files...</span>');
          // $('#dropbox').css('background-color','#EEE');
        },
        dragLeave: function() {
          self.el.style.backgroundColor = '#fff';
          // $('#dropbox').html('<span id="drop-label">Drag and drop the file here.</span>');
          // $('#dropbox').css('background-color','#FFF');
        },
        drop: function() {
          self.$el.find('form').fadeOut();
        }
      });
    },

    openFileInput: function() {
      document.getElementById('pick-file').click();
    },

    filePicked: function() {
      this.$el.find('form').submit();
    }
  });

  return UploadExcelView;
});

define('app/entities/ShowDataView',[
  'backbone',
  'mixins/BackboneModal'
],
function(Backbone) {

  var ShowDataView = Backbone.ModalView.extend({
    tagName: 'div',
    className: 'show-data',
    width: 800,

    initialize: function(data) {
      this.data = data;
      this.render();
    },

    render : function(text) {
      var html = "";
      var textData = this.data;
      var schema = textData['schema'];
      var rows = textData['data'];
      html += "<tr>";
      for (var i = 0; i < schema.length; i++) {
        html += "<th>" + schema[i] + "</th>";
      }
      html += "</tr>";

      for (var ii = 0; ii < rows.length; ii++) {
        var row = rows[ii];
        html += "<tr>";
        for (var j = 0; j < row.length; j++) {
          html += "<td>" + row[j] + "</td>";
        }
        html += "</tr>";
      }

      this.el.innerHTML = '<div class="table-wrapper"><table>' + html + '</table></div>';
      return this;
    }
  });

  return ShowDataView;
});
define('app/entities/AdminPanelView',[
  'mixins/BackboneModal',
  'util'
],
function() {

  var AdminPanelView = Backbone.ModalView.extend({
    el: null,
    width: 520,
    height: 340,
    padding: 0,
    events: {

    },
    theme: null,

    initialize: function() {
      _.bindAll(this);
      this.render();
    },

    render: function() {
      var template = util.getHTML('admin-panel');
      if(!appUrl) {
        this.el.innerHTML = '<div style="padding:40px">You app needs to be deployed first.</div>';
        return;
      }
      this.el.innerHTML = _.template(template, { username:"admin", pwd: "password", url: appUrl + 'admin/'});
      return this;
    },

    logAdminPanel: function() {
      util.log_to_server('admin panel accessed', {}, appId);
    }
  });

  return AdminPanelView;
});

/*
 *  Project: prettyCheckable
 *  Description: jQuery plugin to replace checkboxes and radios for custom images
 *  Author: Arthur Gouveia
 *  License: Licensed under the MIT License
 */

;(function ( $, window, undefined ) {

    var pluginName = 'prettyCheckable',
      document = window.document,
      defaults = {
        labelPosition: 'right',
        customClass: '',
        color: 'blue'
      };

    function Plugin( element, options ) {
      this.element = element;
      this.options = $.extend( {}, defaults, options) ;

      this._defaults = defaults;
      this._name = pluginName;

      this.init();
    }

    function addCheckableEvents(element) {

      element.find('a, label').on('touchstart click', function(e){

        e.preventDefault();

        var clickedParent = $(this).closest('.clearfix');
        var input = clickedParent.find('input');
        var fakeCheckable = clickedParent.find('a');

        if (input.prop('disabled') === true) {
          console.log('sdf');
          return;

        }

        if (input.prop('type') === 'radio') {

          $('input[name="' + input.attr('name') + '"]').each(function(index, el){

            $(el).prop('checked', false).parent().find('a').removeClass('checked');

          });

        }

        if (input.prop('checked')) {

            input.prop('checked', false).change();

        } else {

            input.prop('checked', true).change();

        }

        fakeCheckable.toggleClass('checked');

      });

      element.find('a').on('keyup', function(e){

        if (e.keyCode === 32) {

          $(this).click();

        }

      });

    }

    Plugin.prototype.init = function () {

      var el = $(this.element);

      el.css('display', 'none');

      var classType = el.data('type') !== undefined ? el.data('type') : el.attr('type');

      var label = el.data('label') !== undefined ? el.data('label') : '';

      var labelPosition = el.data('labelposition') !== undefined ? 'label' + el.data('labelposition') : 'label' + this.options.labelPosition;

      var customClass = el.data('customclass') !== undefined ? el.data('customclass') : this.options.customClass;

      var color =  el.data('color') !== undefined ? el.data('color') : this.options.color;

      var disabled = el.prop('disabled') === true ? 'disabled' : '';

      var containerClasses = ['pretty' + classType, labelPosition, customClass, color, disabled].join(' ');

      el.wrap('<div class="clearfix ' + containerClasses + '"></div>').parent().html();

      var dom = [];
      var isChecked = el.prop('checked') ? 'checked' : '';
      var isDisabled = el.prop('disabled') ? true : false;

      if (labelPosition === 'labelright') {

        dom.push('<a href="#" class="' + isChecked + '"></a>');
        dom.push('<label for="' + el.attr('id') + '">' + label + '</label>');

      } else {

        dom.push('<label for="' + el.attr('id') + '">' + label + '</label>');
        dom.push('<a href="#" class="' + isChecked + '"></a>');

      }

      el.parent().append(dom.join('\n'));
      addCheckableEvents(el.parent());

    };

    Plugin.prototype.disableInput = function () {

      var el = $(this.element);

      el.parent().addClass('disabled');
      el.prop('disabled', true);

    };

    Plugin.prototype.enableInput = function () {

      var el = $(this.element);

      el.parent().removeClass('disabled');
      el.prop('disabled', false);

    };

    $.fn[pluginName] = function ( options ) {
      var inputs = [];
      this.each(function () {
        if (!$.data(this, 'plugin_' + pluginName)) {
          inputs.push($.data(this, 'plugin_' + pluginName, new Plugin( this, options )));
        }
      });
      return inputs;
    };

}(jQuery, window));
define("prettyCheckable", function(){});

define('app/entities/TableDescriptionView',['require','exports','module','models/FieldModel','app/entities/UploadExcelView','app/entities/ShowDataView','app/entities/AdminPanelView','app/SoftErrorView','mixins/DialogueView','mixins/BackboneCardView','prettyCheckable'],function(require, exports, module) {

    'use strict';

    var FieldModel = require('models/FieldModel');
    var UploadExcelView = require('app/entities/UploadExcelView');
    var ShowDataView = require('app/entities/ShowDataView');
    var AdminPanelView = require('app/entities/AdminPanelView');
    var SoftErrorView = require('app/SoftErrorView');
    var DialogueView = require('mixins/DialogueView');
    require('mixins/BackboneCardView');
    require('prettyCheckable');

    var descriptionTemplate = [
    '<div class="description">',
        '<span class="tbl-wrapper">',
            '<span class="tbl">',
                '<ul class="property-list">',
                    '<div class="column header">',
                        '<div class="hdr">Property</div>',
                        '<div class="type-field desc">Type</div>',
                    '</div>',
                    '<div class="column">',
                        '<div class="hdr">Date Created</div>',
                        '<div class="type-field">',
                            '<select class="attribs" id="Name" disabled>',
                                '<option value="text" selected="">Date</option>',
                            '</select>',
                        '</div>',
                    '</div>',
                '</ul>',
                '<div class="column add-property-column">',
                    '<form class="add-property-form" style="display:none">',
                            '<input type="text" class="property-name-input" placeholder="Property Name...">',
                        '<input type="submit" class="done-btn" value="Done">',
                    '</form>',
                    '<span class="add-property-button box-button"><span class="plus-icon"></span>Add Property</span>',
                '</div>',
            '</span>',
        '</span>',
    '</div>'
    ].join('\n');


    var pluginAttribsTemplate = [
    '<div class="plugins-list">',
        '<div class="plugin-li">',
        '<h4>Plugin 1</h4>',
        '<div class="toggleSwitch">',
            '<div class="onoffswitch" >',
                '<input type="checkbox" name="onoffswitch< i >" class="onoffswitch-checkbox" id="myonoffswitch< i >" >',
                '<label class="onoffswitch-label" for="myonoffswitch< i >">',
                    '<div class="onoffswitch-inner"></div>',
                    '<div class="onoffswitch-switch"></div>',
                '</label>',
            '</div>',
        '</div>',
        '<table><tr><td>Prop 1</td><td><input type="text"></td></tr>',
        '<tr><td>Prop 2</td><td><input type="text"></td></tr></table>',
        '</div>',
        '<div class="plugin-li">',
        '<h4>Plugin 2</h4>',
        '<div class="toggleSwitch">',
            '<div class="onoffswitch" >',
                '<input type="checkbox" name="onoffswitch< i >" class="onoffswitch-checkbox" id="myonoffswitch< i >" >',
                '<label class="onoffswitch-label" for="myonoffswitch< i >">',
                    '<div class="onoffswitch-inner"></div>',
                    '<div class="onoffswitch-switch"></div>',
                '</label>',
            '</div>',
        '</div>',
        '<table><tr><td>Prop 1</td><td><input type="text"></td></tr>',
        '<tr><td>Prop 2</td><td><input type="text"></td></tr></table>',
        '</div>',
    '</div>'
    ].join('\n');

    var propertyTemplate = [
    '<div class="column <% if(isNew) { %>newcol<% } %>" id="column-<%- cid %>">',
      '<div class="hdr"><%- name %></div>',
      '<div class="type-field" id="type-row-<%- cid %>">',
        '<select class="attribs" id="type-<%- cid %>">',
          '<option value="text" <% if(type =="text") %> selected <% %>>Text</option>',
          '<option value="number" <% if(type =="number") %> selected <% %>>Number</option>',
          '<option value="email" <% if(type =="email") %> selected <% %>>Email</option>',
          '<option value="image" <% if(type =="image") %> selected <% %>>Image</option>',
          '<option value="date" <% if(type =="date") %> selected <% %>>Date</option>',
          '<option value="file" <% if(type =="file") %> selected <% %>>File</option>',
          '<option value="money" <% if(type =="money") %> selected <% %>>USD($)</option>',
        '</select>',
      '</div>',
      '<div class="prop-cross" id="delete-<%- cid %>">',
        '<div class="remove hoff1">Remove</div>',
      '</div>',
    '</div>'
    ].join('\n');

    var TableDescriptionView = Backbone.View.extend({
        el: null,
        tagName: 'div',
        collection: null,
        parentName: "",
        className: 'description-view',
        subviews: [],

        events: {
            'change .attribs': 'changedAttribs',
            'click .q-mark-circle': 'showTableTutorial',
            'click .remove': 'clickedPropDelete',
            'mouseover .right-arrow': 'slideRight',
            'mousemove .right-arrow': 'slideRight',
            'mouseover .left-arrow': 'slideLeft',
            'mousemove .left-arrow': 'slideLeft',
            'click     .right-arrow': 'slideRight',
            'click .type-field': 'typeClicked'
        },


        initialize: function(tableModel) {
            _.bindAll(this);
            this.model = tableModel;
            this.fieldsCollection = tableModel.getFieldsColl();

            this.listenTo(this.model, 'remove', this.remove);
            this.listenTo(this.model.get('fields'), 'add', this.appendField, true);
            this.listenTo(this.model.get('fields'), 'remove', this.removeField);
            this.listenTo(this.model, 'newRelation removeRelation', this.renderRelations);
            
            this.userRoles = v1State.get('users').pluck('name');
            this.otherEntities = _(v1State.get('tables').pluck('name')).without(this.model.get('name'));
            this.bindDupeWarning();
        },

        render: function() {

            var html = _.template(descriptionTemplate, this.model.serialize());
            html    += _.template(pluginAttribsTemplate, {});

            this.$el.html(html);

            this.renderProperties();
            this.renderRelations();

            this.addPropertyBox = new Backbone.NameBox({}).setElement(this.$el.find('.add-property-column').get(0)).render();
            this.subviews.push(this.addPropertyBox);
            this.addPropertyBox.on('submit', this.createNewProperty);

            return this;
        },

        renderProperties: function() {
            this.fieldsCollection.each(function(field) {
                // only render non-relational properties
                if (!field.isRelatedField()) {
                    this.appendField(field);
                }
            }, this);
        },

        bindDupeWarning: function() {
            this.listenTo(this.fieldsCollection, 'duplicate', function(key, val) {
                new SoftErrorView({
                    text: "Duplicate entry should not be duplicate. " + key + " of the field should not be the same: " + val,
                    path: ""
                });
            });
        },

        clickedAddProperty: function(e) {
            this.$el.find('.add-property-button').hide();
            this.$el.find('.add-property-form').fadeIn();
            $('.property-name-input', this.el).focus();
        },

        createNewProperty: function(val) {
            var name = val;
            if (!name.length) return;
            var newField = new FieldModel({
                name: name
            });
            this.fieldsCollection.push(newField);
        },

        appendField: function(fieldModel, isNew) {
            // don't append field if it's a relational field
            if (fieldModel.isRelatedField()) {
                return false;
            }
            var page_context = {};
            page_context = _.clone(fieldModel.attributes);
            page_context.cid = fieldModel.cid;
            page_context.nlType = fieldModel.getNLType();
            page_context.entityName = this.model.get('name');
            page_context.entities = this.userRoles.concat(this.otherEntities);
            page_context.isNew = isNew;

            var template = _.template(propertyTemplate, page_context);

            this.$el.find('.property-list').append(template);
        },

        removeField: function(fieldModel) {
            this.$('#column-' + fieldModel.cid).remove();
        },

        changedAttribs: function(e) {
            var props = String(e.target.id).split('-');
            var cid = props[1];
            var attrib = props[0];
            var value = e.target.options[e.target.selectedIndex].value || e.target.value;
            this.fieldsCollection.get(cid).set(attrib, value);
        },

        addedEntity: function(item) {
            var optString = '<option value="{{' + item.get('name') + '}}">List of ' + item.get('name') + 's</option>';
            $('.attribs', this.el).append(optString);
        },

        clickedDelete: function(e) {
            this.askToDelete(v1State.get('tables'));
        },

        askToDelete: function(tableColl) {
            var widgets = v1State.getWidgetsRelatedToTable(this.model);
            var model = this.model;
            if (widgets.length) {

                var widgetsNL = _.map(widgets, function(widget) {
                    return widget.widget.get('type') + ' on ' + widget.pageName;
                });
                var widgetsNLString = widgetsNL.join('\n');
                new DialogueView({
                    text: "The related widgets listed below will be deleted with this table. Do you want to proceed? <br><br> " + widgetsNLString
                }, function() {
                    tableColl.remove(model.cid);
                    v1State.get('pages').removePagesWithContext(model);
                    _.each(widgets, function(widget) {
                        widget.widget.collection.remove(widget.widget);
                    });
                });

            } else {
                tableColl.remove(model.cid);
                v1State.get('pages').removePagesWithContext(model);
            }
        },

        clickedPropDelete: function(e) {
            var cid = String(e.target.id || e.target.parentNode.id).replace('delete-', '');

            var model = this.fieldsCollection.get(cid);
            var widgets = v1State.getWidgetsRelatedToField(model);

            _.each(widgets, function(widget) {
                widget.widget.getForm().removeFieldsConnectedToField(model);
            });

            this.fieldsCollection.remove(cid);
            $('#column-' + cid).remove();
        },

        clickedUploadExcel: function(e) {
            new AdminPanelView();
        },

        renderRelations: function() {
            var userRelations = v1State.get('users').getRelationsWithEntityName(this.model.get('name'));
            var tableRelations = v1State.get('tables').getRelationsWithEntityName(this.model.get('name'));
            var list = this.$el.find('.related-fields').empty();
            var arr = _.union(tableRelations, userRelations);
            _(arr).each(function(relation) {
                var suffix;
                var text = 'Has ' + relation.related_name;
                if (relation.type == "m2m" || relation.type == "fk") suffix = 'List of ' + util.pluralize(relation.entity);
                if (relation.type == "o2o") suffix = 'Single ' + relation.entity;
                list.append('<a href="#relation-' + relation.cid + '"class="related-tag offset1">' + text + ' (' + suffix + ')</a>');
            });
            list.append('<a href="#relation-new" class="related-tag offset1"><span style="font-size: 13px">+</span>  Add a data relationship</a>');
        },

        showData: function(e) {
            $.ajax({
                type: "POST",
                url: '/app/' + appId + '/entities/fetch_data/',
                data: {
                    model_name: this.model.get('name')
                },
                success: function(data) {
                    new ShowDataView(data);
                },
                dataType: "JSON"
            });
        },

        initializeTableWidth: function() {
            var width = (this.model.getFieldsColl().length + 2) * 100;
            width += 120;
            this.width = width;
            if (this.width < 300) this.width = 300;
            this.$el.find('.tbl').width(this.width);
            if (width > 870 && !this.hasArrow) {
                this.hasArrow = true;
                var div = document.createElement('div');
                div.className = 'right-arrow';
                this.$el.find('.description').append(div);
            }
        },

        slideRight: function() {
            var left = this.$el.find('.tbl-wrapper').scrollLeft();
            this.$el.find('.tbl-wrapper').scrollLeft(left + 6);
            if (!this.hasLeftArrow) {
                var div = document.createElement('div');
                div.className = 'left-arrow';
                this.$el.find('.description').append(div);
                this.hasLeftArrow = true;
            }
        },

        slideLeft: function() {
            var tblWrapper = this.$el.find('.tbl-wrapper');
            var left = tblWrapper.scrollLeft();
            tblWrapper.scrollLeft(left - 6);
            if (tblWrapper.scrollLeft() === 0) {
                this.$el.find('.left-arrow').remove();
                this.hasLeftArrow = false;
            }
        },

        typeClicked: function(e) {
            var cid = e.target.id.replace('type-row-', '');
            $('#type-' + cid).click();
            e.preventDefault();
        },

        showTableTutorial: function(e) {
            v1.showTutorial("Tables");
        }

    });

    return TableDescriptionView;
});
var TableTemplates = {};




TableTemplates.UserTable = [
'<div class="row">',
  '<div class="span58 entity" id="user-entity">',
    '<div class="header">',
      '<div class="offset2 hi4 span20">',
        '<h2><%= name %></h2>',
        '<div class="q-mark-circle"></div>',
      '</div>',
      '<span class="right">',
        /*'<span class="hi4 show-data right-icon">',
          '<span class="icon"></span>',
          '<span>Description</span>',
        '</span><span class="hi4 show-data right-icon">',
          '<span class="icon"></span>',
          '<span>See User Data</span>',*/
         '<span class="hi4 excel right-icon">',
          '<span class="icon"></span>',
          '<span>Access Data</span>',
        '</span><span class="hi4 trash right-icon">',
          '<span class="icon"></span>',
        '</span>',
      '</span>',
    '</div><div class="description"><div class="title">Description</div>',
      '<span class="tbl-wrapper span58">',
        '<span class="tbl">',
          '<ul class="property-list">',
            '<div class="column span6">',
              '<div class="hi3 hdr">Property</div>',
              '<div class="hi3 desc">Type</div>',
            '</div>',
          '</ul>',
          '<div class="column span8 add-property-column">',
            '<form class="add-property-form" style="display:none">',
              '<div class="hi2 hdr">',
                '<input type="text" class="property-name-input span7" placeholder="Property Name...">',
              '</div>',
              '<input type="submit" class="done-btn" value="Done">',
            '</form>',
            '<span class="add-property-button box-button"><span class="plus-icon"></span>Add Property</span>',
          '</div>',
        '</span>',
      '</span>',
    '</div>',
    '</div>',
    '<div class="hi3 span58">',
        '<div class="related-fields"></div>',
    '</div>',
  '</div>'
].join('\n');

TableTemplates.Navbar = [
'<div class="span58 entity-nav">',
  '<ul class="form-list offset1 hoff1">',
  '</ul>',
'</div>'
].join('\n');

TableTemplates.NewRelationTemplate = [
'<div class="new-relation">',
  'A <%= table1.get(\'name\') %> has ',
  '<select id="relation-type-<%= table1.cid %>">',
    '<option value="many" <%= (selected=="many") ? "selected" : "" %>>a list of <%= util.pluralize(table2.get(\'name\')) %></option>',
    '<option value="one" <%= (selected=="one") ? "selected" : "" %>>a <%= table2.get(\'name\') %></option>',
  '</select>',
  'called <input id="relation-name-<%= table1.cid %>" type="text">',
'</div>'
].join('\n');

TableTemplates.relationalNL = {};

TableTemplates.relationalNL["o2o"] = [
'<div class="pane span28 hboff2 relation" data-owner="<%= entity_name %>" data-entity="<%= entity_name %>" id="relation-<%= cid %>">',
  '<span class="remove-relation">×</span>',
  '<div class="icon-o2o"></div>',
  '<span class="span16 hoff1 offset1">',
  '<div class="row">A <%= entity_name %> has a <%= owner_entity %> <div>called <strong><%= related_name %></strong></div></div>',
  '<div class="row hoff2">A <%= owner_entity %> has a <%= entity_name %> <div>called <strong><%= name %></strong></div></div>',
  '</span>',
'</div>'
].join('\n');

TableTemplates.relationalNL["fk"] = [
'<div class="pane span28 hboff2 relation" data-owner="<%= entity_name %>" data-entity="<%= entity_name %>"  id="relation-<%= cid %>">',
  '<span class="remove-relation">×</span>',
  '<div class="icon-fk"></div>',
  '<span class="offsetr1 hoff1 offset1">',
  '<div class="row">A <%= entity_name %> has a list of <%= util.pluralize(owner_entity) %> <div>called <strong><%= related_name %></strong></div></div>',
  '<div class="row hoff2"><%= util.pluralize(owner_entity) %> belong to a <%= entity_name %> <div>called <strong><%= name %></strong></div></div>',
  '</span>',
'</div>'
].join('\n');


TableTemplates.relationalNL["m2m"] = [
'<div class="pane span28 offsetr1 hboff2 relation" data-owner="<%= entity_name %>" data-entity="<%= entity_name %>"  id="relation-<%= cid %>">',
  '<span class="remove-relation">×</span>',
  '<div class="icon-m2m"></div>',
  '<span class="span16 hoff1 offset1">',
    '<div class="row">A <%= entity_name %> has many <%= util.pluralize(owner_entity) %> <div>called <strong><%= name %></strong></div></div>',
    '<div class="row hoff2">A <%= owner_entity %> has many <%= util.pluralize(entity_name) %> <div>called <strong><%= related_name %></strong></div></div>',
  '</span>',
'</div>'
].join('\n');

define("app/templates/TableTemplates", function(){});

define('app/entities/TableDataView',['require','exports','module','app/SoftErrorView','mixins/DialogueView','app/templates/TableTemplates','prettyCheckable'],function(require, exports, module) {

    'use strict';

    var SoftErrorView = require('app/SoftErrorView');
    var DialogueView = require('mixins/DialogueView');
    require('app/templates/TableTemplates');
    require('prettyCheckable');


    var TableDataView = Backbone.View.extend({
        el: null,
        tagName: 'div',
        collection: null,
        parentName: "",
        className: 'data-view',
        subviews: [],

        events: {
        },


        initialize: function(tableModel) {
            _.bindAll(this);
            this.model = tableModel;
        },

        render: function() {
            this.el.innerHTML = 'Coming soon...';
            return this;
        },

    
    });

    return TableDataView;
});

define('app/entities/TableCodeView',['require','exports','module','app/SoftErrorView','mixins/DialogueView','models/TableCodeModel','app/templates/TableTemplates','prettyCheckable'],function(require, exports, module) {

    'use strict';

    var SoftErrorView = require('app/SoftErrorView');
    var DialogueView = require('mixins/DialogueView');
    var TableCodeModel = require('models/TableCodeModel');

    require('app/templates/TableTemplates');
    require('prettyCheckable');


    var funcTemplate = [
        '<div class="code-chunk">',
            '<span class="title"><%= name %></span>',
            '<div class="code-editor" id="func-editor-<%= cid %>"></div>',
        '</div>'
    ].join('\n');

    var TableCodeView = Backbone.View.extend({

        tagName: 'div',
        parentName: "",
        className: 'code-view',
        subviews: [],

        events: {

        },


        initialize: function(tableModel) {
            _.bindAll(this);
            this.model = tableModel;

            this.listenTo(this.model.get('functions'), 'add', this.renderStaticMethod);

        },

        render: function() {

            this.el.innerHTML = [
                '<div class="static sect">',
                    '<span class="title">Functions</span>',
                    '<div id="static-methods-list"></div>',
                    '<div id="add-static-box">',
                        '<form style="display:none;">',
                            '<input type="text" class="property-name-input" placeholder="Property Name...">',
                            '<input type="submit" class="done-btn" value="Done">',
                        '</form>',
                        '<div class="add-button box-button">+ Create a New Function</div>',
                    '</div>',
                '</div>'
            ].join('\n');

            var self = this;

            this.model.get('functions').each(function(methodModel){
                self._inject_ace_html(methodModel, 'static-methods-list');
            });

            this.addPropertyBox = new Backbone.NameBox({}).setElement(this.$el.find('#add-static-box')).render();
            this.addPropertyBox.on('submit', this.createStaticFunction);

            return this;
        },


        setupAce: function() {
            this.model.get('functions').each(function(methodModel) {
                if (methodModel.isGenerator()) {
                    this.setupFakeGeneratorAce(methodModel);
                } else {
                    this.setupSingleAce(methodModel);
                }
            }, this);

            // this.editor.getSession().setMode("ace/mode/css");
            // this.editor.setValue(this.model.get('basecss'), -1);
            // this.editor.on("change", this.keyup);
        },

        setupFakeGeneratorAce: function(methodModel) {
            this.$el.find("#func-editor-" + methodModel.cid).text(methodModel.getCode());
        },
        setupSingleAce: function(methodModel) {
            /* this breaks when this.el is not rendered */
            var self = this;

            var editor = ace.edit("func-editor-" + methodModel.cid);
            editor.getSession().setMode("ace/mode/javascript");
            editor.setValue(methodModel.getCode(), -1);

            editor.on("change", function() {
                self.codeChanged(methodModel, editor.getValue());
            });
        },

        '_inject_ace_html': function(methodModel, id) {
            /* this will work even if the el is not yet rendered */
            this.$el.find('#'+id).append(_.template(funcTemplate, _.extend(methodModel.getGenerated(), {cid: methodModel.cid})));
        },
        renderStaticMethod: function(methodModel) {
            /* this breaks when this.el is not rendered */
            this._inject_ace_html(methodModel, 'static-methods-list');
            this.setupSingleAce(methodModel);
        },

        createStaticFunction: function(functionName) {
            this.model.get('functions').add(new TableCodeModel({ name: functionName }));
        },

        codeChanged: function(methodModel, newValue) {
            methodModel.set('code', newValue);
        }

    });

    return TableCodeView;
});

define('entities/TableView',['require','exports','module','models/FieldModel','app/entities/UploadExcelView','app/entities/ShowDataView','app/entities/AdminPanelView','app/entities/TableDescriptionView','app/entities/TableDataView','app/entities/TableCodeView','app/SoftErrorView','mixins/DialogueView','mixins/BackboneCardView','prettyCheckable'],function(require, exports, module) {

    'use strict';

    var FieldModel = require('models/FieldModel');
    var UploadExcelView = require('app/entities/UploadExcelView');
    var ShowDataView = require('app/entities/ShowDataView');
    var AdminPanelView = require('app/entities/AdminPanelView');

    var TableDescriptionView = require('app/entities/TableDescriptionView');
    var TableDataView        = require('app/entities/TableDataView');
    var TableCodeView        = require('app/entities/TableCodeView');


    var SoftErrorView = require('app/SoftErrorView');
    var DialogueView = require('mixins/DialogueView');
    require('mixins/BackboneCardView');
    require('prettyCheckable');


    var tableTemplate = [
            '<div class="header">',
                '<div>',
                '<h2><%= name %></h2>',
                '<div class="q-mark-circle"></div>',
                '</div>',
                '<ul class="tabs">',
                    '<li class="description-li right-icon">',
                    '<span>Description</span>',
                    '</li><li class="code-li right-icon">',
                    '<span>Code</span>',
                    '</li><li class="data-li right-icon">',
                    '<span>Access Data</span>',
                    '</li>',
                '</ul>',
            '</div>',
            '<div class="current-content"></div>',
    ].join('\n');

    var TableView = Backbone.CardView.extend({
        el: null,
        tagName: 'div',
        collection: null,
        parentName: "",
        className: 'entity-pane',
        subviews: [],

        events: {
            'change .attribs'     : 'changedAttribs',
            'click .q-mark-circle': 'showTableTutorial',
            'click .right-icon'   : 'tabClicked'
        },


        initialize: function(tableModel) {
            _.bindAll(this);
            this.model = tableModel;
            this.listenTo(this.model, 'remove', this.remove);
            this.listenTo(this.model, 'newRelation removeRelation', this.renderRelations);
            this.otherEntities = _(v1State.get('tables').pluck('name')).without(this.model.get('name'));
        },

        render: function() {
            this.el.innerHTML = _.template(tableTemplate, this.model.serialize());
            this.el.id = 'table-' + this.model.cid;
            this.renderDescription();

            return this;
        },

        renderDescription: function() {
            this.$el.find('.current-content').html('');
            this.$el.find('.current-content').append(new TableDescriptionView(this.model).render().el);
            this.$el.find('.description-li').addClass('active');
        },

        renderData: function() {
            this.$el.find('.current-content').html('');
            this.$el.find('.current-content').append(new TableDataView(this.model).render().el);
            this.$el.find('.data-li').addClass('active');
        },

        renderCode: function() {
            var tableCodeView = new TableCodeView(this.model);
            this.$el.find('.current-content').html('');
            this.$el.find('.current-content').append(tableCodeView.render().el);
            tableCodeView.setupAce();
            this.$el.find('.code-li').addClass('active');
        },

        tabClicked: function(e) {
            this.$el.find('.active').removeClass('active');
            if($(e.currentTarget).hasClass('description-li')) {
                this.renderDescription();
            }
            else if($(e.currentTarget).hasClass('data-li')) {
                this.renderData();
            }
            else if($(e.currentTarget).hasClass('code-li')) {
                this.renderCode();
            }
        },

        addedEntity: function(item) {
            var optString = '<option value="{{' + item.get('name') + '}}">List of ' + item.get('name') + 's</option>';
            $('.attribs', this.el).append(optString);
        },

        clickedDelete: function(e) {
            this.askToDelete(v1State.get('tables'));
        },

        askToDelete: function(tableColl) {
            var widgets = v1State.getWidgetsRelatedToTable(this.model);
            var model = this.model;
            if (widgets.length) {

                var widgetsNL = _.map(widgets, function(widget) {
                    return widget.widget.get('type') + ' on ' + widget.pageName;
                });
                var widgetsNLString = widgetsNL.join('\n');
                new DialogueView({
                    text: "The related widgets listed below will be deleted with this table. Do you want to proceed? <br><br> " + widgetsNLString
                }, function() {
                    tableColl.remove(model.cid);
                    v1State.get('pages').removePagesWithContext(model);
                    _.each(widgets, function(widget) {
                        widget.widget.collection.remove(widget.widget);
                    });
                });

            } else {
                tableColl.remove(model.cid);
                v1State.get('pages').removePagesWithContext(model);
            }
        },

        clickedUploadExcel: function(e) {
            new AdminPanelView();
        },

        showData: function(e) {
            $.ajax({
                type: "POST",
                url: '/app/' + appId + '/entities/fetch_data/',
                data: {
                    model_name: this.model.get('name')
                },
                success: function(data) {
                    new ShowDataView(data);
                },
                dataType: "JSON"
            });
        },

        typeClicked: function(e) {
            var cid = e.target.id.replace('type-row-', '');
            $('#type-' + cid).click();
            e.preventDefault();
        },

        showTableTutorial: function(e) {
            v1.showTutorial("Tables");
        }

    });

    return TableView;
});

define('app/entities/EntitiesView',['require','exports','module','models/UserTableModel','models/TableModel','entities/TableView','util','mixins/BackboneDropdownView'],function(require, exports, module) {

    'use strict';

    var UserTableModel = require('models/UserTableModel');
    var TableModel = require('models/TableModel');
    var TableView = require('entities/TableView');

    require('util');
    require('mixins/BackboneDropdownView');

    var EntitiesView = Backbone.DropdownView.extend({
        title: 'Tables',
        className: 'entities-view',
        events: {
            'click .table-name': 'clickedTableName'
        },
        subviews: [],

        initialize: function() {
            _.bindAll(this);
            this.subviews = [this.tablesView, this.userTablesView, this.relationsView, this.createRelationView];
            this.collection = v1State.get('tables');
            this.listenTo(this.collection, 'add', this.renderTable);

            this.title = "Tables";
        },

        render: function() {

            this.$el.html(_.template(util.getHTML('entities-page'), {}));
            this.renderTables();
            // this.renderRelations();

            var addTableBtn = document.createElement('div');
            addTableBtn.id = 'add-entity';
            addTableBtn.innerHTML = '<span class="box-button">+ Create Table</span>';

            var createTableBox = new Backbone.NameBox({}).setElement(addTableBtn).render();
            createTableBox.on('submit', this.createTable);
            this.subviews.push(createTableBox);

            this.$el.append(addTableBtn);
            return this;
        },

        renderTables: function() {
            this.collection.each(this.renderTable);
            //this.$('#users').append(this.userTablesView.render().el);
        },

        renderTable: function(tableModel) {
            this.$el.find('#list-tables').append('<li class="table-name" id="table-' + tableModel.cid + '">' + tableModel.get('name') + '</li>');
        },

        clickedTableName: function(e) {
            var cid = String(e.currentTarget.id).replace('table-', '');
            var tableModel = v1State.get('tables').get(cid);
            var tableView = new TableView(tableModel);
            tableView.render();
            // this.el.appendChild(tableView.render().el);
        },

        renderRelations: function() {
            //util.get('relations').appendChild(this.createRelationView.render().el);
            //util.get('relations').appendChild(this.relationsView.render().el);
        },

        createUserRole: function(val) {
            //force user role names to be singular
            var name = util.singularize(val);

            var elem = new UserTableModel({
                name: name
            });

            if (v1State.get('tables').findWhere({
                name: name
            })) {
                v1State.get('users').trigger('duplicate', "name");
                return;
            }

            v1State.get('users').push(elem);
            return elem;
        },


        createTable: function(val) {
            //force table names to be singular
            var name = util.singularize(val);

            var elem = new TableModel({
                name: name,
                fields: []
            });

            if (v1State.get('users').findWhere({
                name: name
            })) {
                v1State.get('tables').trigger('duplicate', "name");
                return;
            }

            v1State.get('tables').push(elem);
            return elem;
        },

        showCreateRelationForm: function() {
            var self = this;
            this.createRelationView.$el.fadeIn('fast');
            util.scrollToElement(self.$('#new-relation'));
        },

        scrollToRelation: function(e) {
            e.preventDefault();
            var hash = e.currentTarget.hash;
            if (hash === '#relation-new') {
                this.showCreateRelationForm();
                return;
            }
            util.scrollToElement($(hash));
        }
    });

    return EntitiesView;

});

define('app/AppView',['require','exports','module','backbone','./DeployManagerModel','editor/ToolBarView','editor/EditorView','app/entities/PluginsView','app/SettingsView','app/SoftErrorView','mixins/ErrorDialogueView','app/entities/EntitiesView'],function(require, exports, module) {

    'use strict';
    require('backbone');
    var DeployManagerModel = require('./DeployManagerModel');
    var ToolBarView = require('editor/ToolBarView');
    var EditorView = require('editor/EditorView');
    var PluginsView = require('app/entities/PluginsView');
    var SettingsView = require('app/SettingsView');


    var SoftErrorView = require("app/SoftErrorView");
    var ErrorDialogueView = require('mixins/ErrorDialogueView');
    var EntitiesView = require('app/entities/EntitiesView');


    var AppView = Backbone.View.extend({

        events: {
            'click #save': 'save',
            'click #left-menu-toggle': 'toggleTopMenu',
            'click #deploy': 'deployApp'
        },

        el: document.getElementById('app-content'),

        initialize: function(options) {
            _.bindAll(this);

            this.model = options.model;
            this.appId = options.appId;
            this.pageId = options.pageId;

            this.toolBar = this.createSubview(ToolBarView, { pageId: -1 });

            this.listenTo(this.model.get('tables'), 'add', this.entityAdded);
            this.autoAddLinksToNavbar();

            this.entitiesView = this.createSubview(EntitiesView);
            this.entitiesView.setToggleEl($('.menu-app-entities'));
            this.entitiesView.setPointerPosition("180px")

            this.pluginsView = this.createSubview(PluginsView);
            this.pluginsView.setToggleEl($('.menu-app-plugins'));
            this.pluginsView.setPointerPosition("230px");

            this.settingsView = this.createSubview(SettingsView);
            this.settingsView.setToggleEl($('.menu-app-settings'));
            this.settingsView.setPointerPosition("30px");

            this.deployManager = new DeployManagerModel(this.appId);

            //var autoSave = setInterval(this.save, 30000);
            this.render();
        },

        render: function() {
            var pageId = 0;
            this.pageId = 0;

            var cleanDiv = document.createElement('div');
            cleanDiv.className = "clean-div";
            var mainContainer = document.getElementById('main-container');
            mainContainer.appendChild(cleanDiv);

            this.toolBar.setPage(this.pageId);
            this.toolBar.setElement(document.getElementById('tool-bar')).render();
            
            this.el.appendChild(this.entitiesView.render().el);
            this.el.appendChild(this.pluginsView.render().el);
            this.el.appendChild(this.settingsView.render().el);

            
            this.changePage(EditorView, { pageId: this.pageId, appModel: this.model }, "", function() {});

            this.$leftMenu = this.$el.find('.left-menu-panel-l1 ');
            this.setupMenuHeight();

            $("html, body").animate({
                scrollTop: 0
            });
    
        },

        getCurrentPage: function() {
            return this.view.getCurrentTemplate();
        },

        doKeyBindings: function() {
            keyDispatcher.bindComb('meta+s', this.save);
            keyDispatcher.bindComb('ctrl+s', this.save);
            keyDispatcher.bindComb('meta+c', this.copy);
            keyDispatcher.bindComb('ctrl+c', this.copy);
            keyDispatcher.bindComb('meta+v', this.paste);
            keyDispatcher.bindComb('ctrl+v', this.paste);
        },

        info: function(appId, tutorial) {
            var self = this;
            require(['app/AppInfoView'], function(InfoView) {
                self.tutorialPage = "Application Settings";
                self.changePage(InfoView, {}, tutorial, function() {
                    $('.menu-app-info').addClass('active');
                });
                olark('api.box.show');
            });
        },

        tables: function(tutorial) {
            var self = this;
            this.entitiesView.expand();
        },

        themes: function(tutorial) {
            var self = this;
            self.tutorialPage = "Themes";
            require(['app/ThemesGalleryView'], function(ThemesGalleryView) {
                self.changePage(ThemesGalleryView, {}, tutorial, function() {
                    self.trigger('themes-loaded');
                    $('.menu-app-themes').addClass('active');
                });
                olark('api.box.show');
            });
        },

        pages: function(appId, tutorial) {
            var self = this;
            self.tutorialPage = "Pages";
            require(['app/pages/PagesView'], function(PagesView) {
                $('#page').fadeIn();
                self.changePage(PagesView, {}, tutorial, function() {
                    self.trigger('pages-loaded');
                    $('.menu-app-pages').addClass('active');
                });
                olark('api.box.show');
            });
        },

        page: function(pageId) {
            if(pageId == this.pageId) return;
            if (!pageId) pageId = 0;
            
            var self = this;

            this.pageId = pageId;
            self.tutorialPage = "Editor";
            self.tutorialPage = "Introduction";
            self.changePage(EditorView, { pageId: pageId, appModel: this.model }, "", function() {});
            this.toolBar.setPage(this.pageId);
            this.$leftMenu = this.$el.find('.left-menu-panel-l1 ');
            this.setupMenuHeight();
            self.trigger('editor-loaded');
            olark('api.box.hide');
        },

        emails: function(tutorial) {
            // var self = this;
            // self.tutorialPage = "Emails";
            // this.changePage(EmailsView, {}, tutorial, function() {
            //     $('.menu-app-emails').addClass('active');
            // });
        },

        plugins: function(tutorial) {
            var self = this;
            this.pluginsView.expand();
        },

        renderIFrameContent: function(proxy) {
            this.view.renderIFrameContent(proxy);
        },

        changePage: function(NewView, options, tutorial, post_render) {

            if (this.view) this.view.close();

            var cleanDiv = document.createElement('div');
            cleanDiv.className = "clean-div";
            var mainContainer = document.getElementById('main-container');
            mainContainer.appendChild(cleanDiv);

            this.view = this.createSubview(NewView, options);
            this.view.setElement(cleanDiv).render();

            //v1.changeTitle(this.view.title);

            $("html, body").animate({
                scrollTop: 0
            });
            $('#page').fadeIn();
            post_render.call();
            
            if (tutorial && tutorial === 'tutorial/') {
                this.showTutorial();
            } else if (tutorial) {
                // remove random ending string from url path
                this.navigate(window.location.pathname.replace(tutorial, ''), {
                    replace: true
                });
            } else {
                if (this.tutorialIsVisible) {
                    this.tutorial.closeModal();
                }
            }
        },

        entityAdded: function(entityModel) {
            var pageName = entityModel.get('name') + ' Page';
            var newPage = {
                name: pageName,
                url: {
                    urlparts: [pageName.replace(/ /g, '_'), '{{' + entityModel.get('name') + '}}']
                }
            };
            this.model.get('routes').push(newPage);
        },

        autoAddLinksToNavbar: function() {
            // TODO: fix this
            // this.listenTo(this.model.get('routes'), 'add', function(pageM) {
            //     if (!pageM.isContextFree()) return;
            //     var homePageNav = this.model.get('routes').first().get('navbar');
            //     homePageNav.get('links').push({
            //         url: 'internal://' + pageM.get('name'),
            //         title: pageM.get('name')
            //     });

            // }, this);
        },

        deployApp: function() {
            $('.deploy-text').html('Publishing');
            var threeDots = util.threeDots();
            $('.deploy-text').append(threeDots.el);

            var success_callback = function(data) {
                $('.deploy-text').html('Publish');
                clearInterval(threeDots.timer);
            };

            var hold_on_callback = function() {
                $('.deploy-text').html('Hold On, Still deploying.');
            };

            this.deployManager.deploy.call(this, success_callback, hold_on_callback);
        },

        save: function(e, callback) {
            if (v1.disableSave === true) return;
            if (appId === 0) return;

            $('#save-icon').attr('src', '/static/img/ajax-loader-white.gif');
            var $el = $('.menu-button.save');
            $el.fadeOut().html("<span>Saving...</span>").fadeIn();

            var self = this;
            appState = v1State.serialize();
            if(DEBUG) console.log(appState);

            var successHandler = function(data) {
                util.dontAskBeforeLeave();
                v1.disableSave = false;

                v1State.set('version_id', data.version_id);

                $('#save-icon').attr('src', '/static/img/checkmark.png').hide().fadeIn();
                var timer = setTimeout(function() {
                    $('#save-icon').attr('src', '/static/img/save.png').hide().fadeIn();
                    clearTimeout(timer);
                }, 1000);
                $('.menu-button.save').html("<span>Saved</span>").fadeIn();

                if ((typeof(callback) !== 'undefined') && (typeof(callback) == 'function')) {
                    callback();
                }

                var timer2 = setTimeout(function() {
                    $el.html("<span>Save</span>").fadeIn();
                    clearTimeout(timer2);
                }, 3000);
            };
            var softErrorHandler = function(jqxhr) {
                var data = JSON.parse(jqxhr.responseText);
                v1State.set('version_id', data.version_id);
                v1.disableSave = true;
                new SoftErrorView({
                    text: data.message,
                    path: data.path
                }, function() {
                    v1.disableSave = false;
                });
            };
            var browserConflictHandler = function(jqxhr) {
                v1.disableSave = true;
                var content = {
                    text: "Looks like you (or someone else) made a change to your app in another browser window. Please make sure you only use one window with Appcubator or you may end up overwriting your app with an older version. Please refresh the browser to get the updated version of your app."
                };
                if (BROWSER_VERSION_ERROR_HAPPENED_BEFORE) {
                    content.text += '<br><br><br>Refreshing in <span id="countdown-ksikka">6</span> seconds...\n';
                }
                var errorModal = new ErrorDialogueView(content, function() {
                    v1.disableSave = false;
                });
                if (BROWSER_VERSION_ERROR_HAPPENED_BEFORE) {
                    errorModal._countdownToRefresh();
                }
                // global
                BROWSER_VERSION_ERROR_HAPPENED_BEFORE = true;
            };
            var hardErrorHandler = function(jqxhr) {
                v1.disableSave = true;
                var content = {};
                if (DEBUG)
                    content = {
                        text: jqxhr.responseText
                    };
                else
                    content = {
                        text: "There has been a problem. Please refresh your page. We're really sorry for the inconvenience and will be fixing it very soon."
                    };
                new ErrorDialogueView(content, function() {
                    v1.disableSave = false;
                });
            };

            // for now, no difference
            var notFoundHandler = hardErrorHandler;
            v1.disableSave = true;

            $.ajax({
                type: "POST",
                url: '/app/' + this.appId + '/state/',
                data: JSON.stringify(appState),
                statusCode: {
                    200: successHandler,
                    400: softErrorHandler,
                    409: browserConflictHandler,
                    500: hardErrorHandler,
                    404: notFoundHandler,
                },
                dataType: "JSON"
            });

            if (e) e.preventDefault();
            return false;
        },

        toggleTopMenu: function() {
            return (this.menuExpanded ? this.hideTopMenu : this.expandTopMenu)();
        },

        expandTopMenu: function() {
                $('#tool-bar').addClass('open');
                $('#main-container').addClass('open');
                this.menuExpanded = true;
                $('#main-container').on('click', this.hideTopMenu);
        },

        hideTopMenu: function() {
                $('#tool-bar').removeClass('open');
                $('#main-container').removeClass('open');
                this.menuExpanded = false;
                $('#main-container').off('click', this.hideTopMenu);
        },

        download: function(callback) {
            var jqxhrToJson = function(jqxhr) {
                var data = {};
                try {
                    data = JSON.parse(jqxhr.responseText);
                } catch (e) {
                    data.errors = ["JSON response from server failed to parse", jqxhr.responseText];
                }
                return data;
            };

            // this is copy pasted from the save code. i dont know how to modularize these functions properly. ~ks
            var softErrorHandler = function(data) {
                v1State.set('version_id', data.version_id);
                v1.disableSave = true;
                new SoftErrorView({
                    text: data.message,
                    path: data.path
                }, function() {
                    v1.disableSave = false;
                });
                return data;
            };

            var hardErrorHandler = function(data) {
                var content = {};
                if (DEBUG) content.text = data.responseText;
                else content.text = "There has been a problem. Please refresh your page. We're really sorry for the inconvenience and will be fixing it very soon.";
                new ErrorDialogueView(content);
                util.log_to_server('deployed app', {
                    status: 'FAILURE',
                    deploy_time: data.deploy_time + " seconds",
                    message: data.errors
                }, this.appId);
                return data;
            };

            var downloadApp = function(callback) {
                var url = '/app/' + appId + '/zip/';
                var hiddenIFrameID = 'hiddenDownloader',
                    iframe = document.getElementById(hiddenIFrameID);
                if (iframe === null) {
                    iframe = document.createElement('iframe');
                    iframe.id = hiddenIFrameID;
                    iframe.style.display = 'none';
                    document.body.appendChild(iframe);
                }
                iframe.src = url;
                callback();
            };

            $.ajax({
                type: "GET",
                url: '/app/' + appId + '/zip/',
                statusCode: {
                    200: function(data) {
                        util.log_to_server('code downloaded', {}, appId);
                        downloadApp(callback);
                    },
                    400: function(jqxhr) {
                        var data = jqxhrToJson(jqxhr);
                        data = softErrorHandler(data);
                        data = callback(data);
                    },
                    500: function(jqxhr) {
                        var data = jqxhrToJson(jqxhr);
                        data = hardErrorHandler(data);
                        data = callback(data);
                    },
                },
                dataType: "JSON"
            });
        },

        copy: function(e) {
            if (keyDispatcher.textEditing === true) return;
            if (this.view.marqueeView.multiSelectorView.contents.length) {
                this.contents = [];
                _(this.view.marqueeView.multiSelectorView.contents).each(function(model) {
                    this.contents.push(_.clone(model.serialize()));
                }, this);
            } else if (this.view.widgetsManager.widgetSelectorView.selectedEl) {
                this.contents = [];
                this.contents.push(_.clone(this.view.widgetsManager.widgetSelectorView.selectedEl.serialize()));
            }
        },

        paste: function(e) {
            if (keyDispatcher.textEditing === true) return;
            if (!this.contents) return;

            _(this.contents).each(function(cont) {
                cont.layout.left++;
                cont.layout.top++;
                cont.layout.top++;
            });

            if (this.view.widgetsCollection) {
                var coll = this.view.widgetsCollection.add(_.clone(this.contents));
                if (this.contents.length == 1) {
                    coll.last(function(widgetModel) {
                        widgetModel.trigger('selected');
                    });
                } else if (this.contents.length > 1) {
                    var newContents = coll.last(this.contents.length);
                    this.view.marqueeView.multiSelectorView.setContents(newContents);
                }
            }
        },

        setupMenuHeight: function() {
            var height = $(document).height();
            
            this.$leftMenu.each(function() {
                $(this).height(height);
            });

            var self = this;
            $( window ).resize(function() {
                var height = $(document).height();
                self.$leftMenu.height(height);
            });
        }

    });

    return AppView;
});
define('app/AccountDropdownView',['require','exports','module','util','mixins/BackboneDropdownView'],function(require, exports, module) {

    'use strict';

    require('util');
    require('mixins/BackboneDropdownView');

    var AccountDropdownView = Backbone.DropdownView.extend({
        events: {

        },
        subviews: [],

        initialize: function() {

        },

        render: function() {
            return this;
        }
    });

    return AccountDropdownView;

});

define('app/Striper',[
  'mixins/SimpleDialogueView',
  'mixins/ErrorDialogueView',
  'jquery',
  'backbone',
  'https://checkout.stripe.com/v2/checkout.js'
],
  function(SimpleDialogueView, ErrorDialogueView) {

    var Striper = Backbone.View.extend({

      initialize: function() {
        _.bindAll(this);
      },

      render: function() {
        return this;
      },

      bindPayment: function(selector, formId) {
        var self = this;
        $(selector).on('click', {token: this.token, formId: formId}, this.checkoutOpen);
      },

      bindChangeCard: function(selector, formId) {
        var self = this;
        $(selector).on('click', {token: this.tokenChangeCard, formId: formId}, this.checkoutOpen);
      },

      bindChangePlan: function(selector, formId) {
        var self = this;
        $(selector).on('click', {token: this.tokenChangePlan, formId: formId}, this.tokenChangePlan);
      },

      bindCancel: function(selector, formId) {
        var self = this;
        $(selector).on('click', {token: this.tokenCancel, formId: formId}, this.tokenCancel);
      },

      checkoutOpen: function(e) {
        e.preventDefault();
        this.form = $('#' + e.data.formId);
        StripeCheckout.open({
          key       :   $('#' + e.data.formId).data("stripe-key"),
          name      :  'Payment Method',
          panelLabel:  'Add Payment Method',
          token     :   e.data.token
        });
      },

      token: function(result) {
        var self = this;
        var form = this.form;
        this.form.find("input[name=stripe_token]").val(result.id);
        $.ajax({
             type: 'POST',
             url: '/payments/a/subscribe/',
             data: this.form.serialize(),
             success: function(data, statusStr, xhr) {
              if (data.error && data.error.length > 0) {
                self.showPlanErrorModal(data.error);
              } else {
                form.remove();
                self.showPlanSuccessModal();
              }
            }
        });
      },

      tokenChangeCard: function(result) {
        var self = this;
        var form = this.form;
        this.form.find("input[name=stripe_token]").val(result.id);
        $.ajax({
             type: 'POST',
             url: '/payments/a/change/card/',
             data: this.form.serialize(),
             success: function(data, statusStr, xhr) {
              console.log(data);
              if (data.error && data.error.length > 0) {
                self.showPlanErrorModal(data.error);
              } else {
                form.remove();
                location.reload();
              }
            },
            complete: function (data) {
              console.log(data);  
            }
        });
      },

      tokenChangePlan: function(e) {
        e.preventDefault();
        var self = this;
        var form = $('#' + e.data.formId);
        // form.find("input[name=stripe_token]").val(e.id);
        $.ajax({
             type: 'POST',
             url: '/payments/a/change/plan/',
             data: form.serialize(),
             success: function(data, statusStr, xhr) {
              console.log(data);
              if (data.error && data.error.length > 0) {
                self.showPlanErrorModal(data.error);
              } else {
                self.showPlanSuccessModal("You are succesfully subscribed.");
              }
            }
        });
      },

      tokenCancel: function(data) {
        var self = this;
        var form = $('#' + e.data.formId);
        // form.find("input[name=stripe_token]").val(result.id);
        $.ajax({
             type: 'POST',
             url: '/payments/a/cancel/',
             data: form.serialize(),
             success: function(data, statusStr, xhr) {
              form.remove();
              // self.showPlanSuccessModal("Your payment plan has been cancelled.");
            }
        });
      },

      showPlanErrorModal: function(html) {
        var self = this;
        var text = (html);
        var modal = new ErrorDialogueView({ text: text});
        modal.onClose = function() {
          location.reload();
        };
      },

      showPlanSuccessModal: function(html) {
        var self = this;
        var text = (html||"Thank you! Your payment has been received and your preferences has been saved.");
        var modal = new SimpleDialogueView({ text: text});
        modal.onClose = function() {
          //self.onSuccess.call();
          location.reload();
        };
      }
    });

    return Striper;
});

define('app/AnalyticsView',['require','exports','module','app/templates/AnalyticsTemplates','backbone'],function(require, exports, module) {
    'use strict';

    require('app/templates/AnalyticsTemplates');
    require('backbone');

    var AnalyticsView = Backbone.View.extend({

        css: 'app-page',
        className: 'row hoff1',
        events: {},

        initialize: function(options) {
            var self = this;
            _.bindAll(this);

            this.appId = (options.appId || appId);
            this.render();

            var v1 = (v1 || null);
            if (v1) {
                v1.on('deployed', function() {
                    self.$('.coming-soon-overlay').hide();
                });
            }
        },

        render: function() {
            this.setElement(document.getElementById('dashboard-' + this.appId));
            this.fetchInfo();
            return this;
        },

        renderData: function(data) {

            var self = this;

            this.$el.find('.total-users').html(data.total_users || 0);
            this.$el.find('.total-visitors').html(data.total_visitors || 0);
            this.$el.find('.total-active-users').html(data.total_active_users || 0);

            var blackList = ['/favicon.ico', '/robots.txt'];
            var total_page_views = data.total_page_views || 0;

            _.each(_.pick(data.total_page_views_dict, blackList), function(val, key) {
                total_page_views -= val;
            });

            var innerHTML = '<span class="analyitcs-title">Page Visits</span><br>';
            _.each(_.omit(data.total_page_views_dict, blackList), function(val, key) {
                innerHTML += '<em>' + key + '</em> :  ' + val + ' views<br>';
            });

            this.$el.find('.total-page-visits').html(innerHTML);
            this.$el.find('.total-page-views').html(total_page_views);

        },

        fetchInfo: function() {
            var self = this;
            $.ajax({
                type: "GET",
                url: '/app/' + self.appId + '/analytics/',
                success: function(data) {
                    self.renderData(data);
                },
                error: function(data) {
                    console.log("No analytics data.");
                },
                dataType: "JSON"
            });
        }

    });

    return AnalyticsView;
});
define('app/ShareModalView',[
  'mixins/BackboneConvenience',
  'mixins/BackboneModal',
  'util'
],
function() {

  var ShareModalView = Backbone.ModalView.extend({
    el: null,
    className: "deploy-panel",
    width: 600,
    height: 340,
    events: {
      'click .download-pane': 'logDownload'
    },
    theme: null,

    initialize: function(data) {
      _.bindAll(this);
      this.data = data;
      this.render();
    },

    render: function() {
      var template = util.getHTML('share-panel');
      this.el.innerHTML = _.template(template, {site_url : appUrl});

      this.g_js = {};
      var self = this;
      !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s); self.g_js = js; js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');
      return this;
    },

    logDownload: function() {
      util.log_to_server('code downloaded', {}, appId);
    },

    close: function() {
      this.g_js.parentNode.removeChild(this.g_js);
      ShareModalView.__super__.close.call(this);
    }
  });

  return ShareModalView;
});

define('app/DownloadModalView',[
        'mixins/BackboneModal',
        'util'
    ],
    function() {

        var DownloadModalView = Backbone.ModalView.extend({
            el: null,
            className: "download-panel",
            width: 600,
            height: 360,
            events: {
                'click .clone-url'    : 'cloneInputClicked',
                'click .download-pane' : 'downloaded'
            },
            theme: null,

            initialize: function() {
                _.bindAll(this);
                this.render();
            },

            render: function() {
                var template = util.getHTML('download-panel');
                var context = {
                    clone_url: appGitRepo
                };
                this.el.innerHTML = _.template(template, context);
                return this;
            },

            logDownload: function() {
                util.log_to_server('code downloaded', {}, appId);
            },

            cloneInputClicked: function() {
                //util.copyToClipboard(appGitRepo);
                $('.clone-url').select();
            },

            downloaded: function() {
                $(".download-pane .loading-wheel").css('visibility','visible');

                var hideWheel = function() {
                    $(".download-pane .loading-wheel").css('visibility','hidden');
                };

                var v1 = v1||null;
                if(v1) v1.download(hideWheel);
                else if(dboard) dboard.download(hideWheel);
            }
        });

        return DownloadModalView;
    });

define('app/CollaboratorsView',['require','exports','module','backbone'],function(require, exports, module) {
    'use strict';

    require('backbone');

    var CollaboratorsView = Backbone.View.extend({
        css: 'app-page',

        events: {
            'click .add-collaborator-btn': 'showCollabBox',
        },

        initialize: function(options) {
            _.bindAll(this);
        },

        render: function() {
            this.$addCollaboratorForm = this.$el.find('.add-collaborator-form');
        },

        showCollabBox: function(e) {
            console.log("swag");
            $(e.currentTarget).hide();
            this.$addCollaboratorForm.fadeIn();
            this.$addCollaboratorForm.find('input[type="text"]').focus();
        }

    });

    return CollaboratorsView;
});

var MainTemplates = {};

MainTemplates.infoPage = [
  '<div class="row hoff1">',
    '<div class="span11 offsetr1">',
    '</div>',
    '<div class="span36">',
      '<div class="hoff1">',
        '<h3 class="span10">App Name</h3>',
        '<input type="text" class="span26" id="app-name" placeholder="Name of the Applications..." value="<%= name %>">',
      '</div>',
      '<hr>',
      '<div class="hoff2">',
        '<h3 class="span10">Description</h3>',
        '<textarea class="span26 hi6" id="app-description" placeholder="Description of the application..."><%= description %></textarea>',
      '</div>',
      '<hr>',
      '<div class="hoff2">',
        '<h3 class="span10">Keywords</h3>',
        '<textarea class="span26 hi6" id="app-keywords" placeholder="Keywords..."><%= keywords %></textarea>',
      '</div>',
    '</div>',
    '<div class="span4 offset3 hoff1">',
      '<a class="delete-btn-nofix hoff1" id="delete"></a>',
    '</div>',
  '</div>'
].join('\n');


MainTemplates.entitiesPage = [

].join('\n');
define("app/templates/MainTemplates", function(){});

define('app/OverviewPageView',['require','exports','module','app/AnalyticsView','mixins/SimpleModalView','app/ShareModalView','app/entities/AdminPanelView','app/DownloadModalView','app/CollaboratorsView','app/templates/MainTemplates','util','util.filepicker'],function(require, exports, module) {
    'use strict';

    var AnalyticsView = require('app/AnalyticsView');
    var SimpleModalView = require('mixins/SimpleModalView');
    var ShareModalView = require('app/ShareModalView');
    var AdminPanelView = require('app/entities/AdminPanelView');
    var DownloadModalView = require('app/DownloadModalView');
    var CollaboratorsView = require('app/CollaboratorsView');
    require('app/templates/MainTemplates');
    require('util');
    require('util.filepicker');

    var OverviewPageView = Backbone.View.extend({
        css: 'app-page',

        events: {
            'click .tutorial': 'showTutorial',
            'click .feedback': 'showFeedback',
            'click #deploy': 'deploy',
            'click .browse': 'browse',
            'click .download': 'download',
            'click #share': 'share',
            'click .edit-btn': 'settings',
            'click .logo': 'changeLogo'
        },

        initialize: function(options) {
            _.bindAll(this);

            options = (options || {});
            this.appId = (options.appId || appId);
            this.analyticsView = new AnalyticsView({
                appId: this.appId
            });
            this.collaboratorsView = new CollaboratorsView();
            this.subviews = [this.analyticsView, this.collaboratorsView];

            this.title = "The Garage";
        },

        render: function() {
            var page_context = {};
            this.collaboratorsView.setElement(this.$el.find('.collaborators-section')).render();
            this.setLogoImage();
        },

        deploy: function() {
            var threeDots = util.threeDots();
            $('#deploy').find('h4').html('Publishing').append(threeDots.el);

            v1.deploy(function() {
                $('#deploy').find('h4').html('Go To App');
                clearInterval(threeDots.timer);
            });
        },

        share: function() {
            new ShareModalView();
        },

        download: function() {
            new DownloadModalView();
        },

        browse: function() {
            new AdminPanelView();
        },

        changeLogo: function() {
            var self = this;
            util.filepicker.openSinglePick(function(file) {
                app.info.logo = file.url;
                self.setLogoImage();
                $.ajax({
                    type: "POST",
                    url: '/app/' + self.appId + '/state/',
                    data: JSON.stringify(app),
                    dataType: "JSON"
                });

            });
        },

        setLogoImage: function() {
            if (app.info.logo) {
                this.$el.find('.logo').css('backgroundImage', 'url(' + app.info.logo + ')');
            }
        },

        settings: function(e) {
            e.preventDefault();
            window.location = '/app/' + this.appId + '/info/';
        }

    });

    return OverviewPageView;
});
define('app/DashboardsView',[
        'app/OverviewPageView',
        'util',
        'backbone'
],
function(OverviewPageView) {

    var DashboardsView = Backbone.View.extend({
        el: document.getElementById('dashboards'),

        events: {
            'click .menu-item' : 'changePage'
        },

        initialize: function() {
            this.render();
            this.appId = initAppId;
        },

        render: function() {

            this.dashboardView = new OverviewPageView({ appId: initAppId });
            this.dashboardView.setElement(document.getElementById('dashboard-' + initAppId)).render();

        },

        changePage: function(e) {
            var appId = e.currentTarget.id.replace('menu-item-','');
            this.appId = appId;
            $('.current').removeClass('current');
            $('.selected').removeClass('selected');
            $('#menu-item-' + appId).addClass('selected');
            $('#dashboard-' + appId).addClass('current');

            if(this.dashboardView) this.dashboardView.undelegateEvents();
            appUrl = app_urls[appId];
            app = apps[appId];
            appGitRepo = app_gitRepos[appId];
            this.dashboardView = new OverviewPageView({ appId: appId });
            this.dashboardView.setElement(document.getElementById('dashboard-' + appId)).render();
        },

        download: function(callback) {

            var appId = this.appId;

            var jqxhrToJson = function(jqxhr){
                var data = {};
                try {
                    data = JSON.parse(jqxhr.responseText);
                } catch (e) {
                    data.errors = ["JSON response from server failed to parse", jqxhr.responseText];
                }
                return data;
            };

            var mergeConflictHandler = function(data){
                var text = "<h1>Merge Conflict</h1>";
                text += "\n<p>We tried to generate the code but we couldn't resolve a conflict between our code and your code.</p>";
                text += "\n<p>To fix this, please resolve the conflict and push a commit with your fix in <span class=\"branch\">master</span>.</p>";
                text += "\n<p>We stored the conflict details in <span class=\"branch\">" + data.branch + "</span>.</p>";
                text += "\n<div>";
                text += "\n  <h2>Affected files</h2>";
                text += "\n  <ol>";
                for (var i = 0; i < data.files.length; i++) {
                    text += "\n    <li class=\"file\">" + data.files[i] + "</li>";
                }
                text += "\n  </ol>";
                text += "\n<div>";

                var content = {
                    text: text
                };
                new SimpleModalView(content);
                util.log_to_server('deployed app', {
                    status: 'merge conflict',
                    deploy_time: data.deploy_time + " seconds",
                    message: data
                }, appId);
                return data;
            };

            // this is copy pasted from the save code. i dont know how to modularize these functions properly. ~ks
            var softErrorHandler = function(data) {
                v1State.set('version_id', data.version_id);
                v1.disableSave = true;
                new SoftErrorView({
                    text: data.message,
                    path: data.path
                }, function() {
                    v1.disableSave = false;
                });
                return data;
            };

            var hardErrorHandler = function(data){
                var content = {};
                if (DEBUG) content.text = data.responseText;
                else content.text = "There has been a problem. Please refresh your page. We're really sorry for the inconvenience and will be fixing it very soon.";
                new ErrorDialogueView(content);
                util.log_to_server('deployed app', {
                    status: 'FAILURE',
                    deploy_time: data.deploy_time + " seconds",
                    message: data.errors
                }, appId);
                return data;
            };

            var downloadApp = function(callback) {
                var url =  '/app/' + appId + '/zip/';
                var hiddenIFrameID = 'hiddenDownloader',
                iframe = document.getElementById(hiddenIFrameID);
                if (iframe === null) {
                    iframe = document.createElement('iframe');
                    iframe.id = hiddenIFrameID;
                    iframe.style.display = 'none';
                    document.body.appendChild(iframe);
                }
                iframe.src = url;
                callback();
            };

            $.ajax({
                type: "GET",
                url: '/app/' + appId + '/zip/',
                statusCode: {
                    200: function(data){
                        util.log_to_server('code downloaded', {}, appId);
                        downloadApp(callback);
                    },
                    400: function(jqxhr){
                        var data = jqxhrToJson(jqxhr);
                        data = softErrorHandler(data);
                        data = callback(data);
                    },
                    409: function(jqxhr){
                        var data = jqxhrToJson(jqxhr);
                        data = mergeConflictHandler(data);
                        data = callback(data);
                    },
                    500: function(jqxhr){
                        var data = jqxhrToJson(jqxhr);
                        data = hardErrorHandler(data);
                        data = callback(data);
                    },
                },
                dataType: "JSON"
            });
        }
    });

    return DashboardsView;
});

define('app/AppRouter',['require','exports','module','mixins/SimpleModalView','mixins/ErrorDialogueView','mixins/SimpleDialogueView','tutorial/TutorialView','app/AppView','app/DeployView','app/AccountDropdownView','app/Striper','app/DashboardsView'],function(require, exports, module) {
    'use strict';

    var SimpleModalView = require("mixins/SimpleModalView");
    var ErrorDialogueView = require("mixins/ErrorDialogueView");
    var SimpleDialogueView = require("mixins/SimpleDialogueView");

    var TutorialView = require("tutorial/TutorialView"),
        AppView = require("app/AppView"),
        DeployView = require("app/DeployView"),
        AccountDropdownView = require("app/AccountDropdownView"),
        Striper = require('app/Striper'),
        DashboardsView = require('app/DashboardsView');

    var AppRouter = Backbone.Router.extend({

        routes: {
            "app/new/"                     : "newapp",
            "app/:appid/info/*tutorial"    : "info",
            "app/:appid/tables/*tutorial"  : "tables",
            "app/:appid/gallery/*tutorial" : "themes",
            "app/:appid/pages/*tutorial"   : "pages",
            "app/:appid/page/:pageid/"     : "appmain",
            "app/:appid/plugins/*tutorial" : "plugins",
            "app/:appid/mobile-editor/:pageid/": "mobileEditor",
            "app/:appid/emails/*tutorial"  : "emails",
            "app/:appid/*tutorial"         : "appmain",
            "app/:appid/*anything/"        : "appmain",
            "account"                      : "accountPage",
        },

        tutorialPage: 0,

        initialize: function() {
            var self = this;
            v1.view = null;

            _.bindAll(this);

            this.route(username +"/", "dashboard", v1.dashboard);

            $('#tutorial').on('click', function(e) {
                self.showTutorial();
                window.history.pushState(null, null, window.location.href.concat("tutorial/"));
            });

            var accountDropdownView = new AccountDropdownView();
            accountDropdownView.setElement($('.account-dropdown-menu')).render();
            accountDropdownView.setToggleEl($('.account-menu-toggle'));

            this.currentApp = null;
        },

        configApp: function() {
            if(this.currentApp) return;

            this.currentApp = new AppView({
                model: v1State,
                appId: appId
            });
            v1.view = this.currentApp;
        },

        info: function(appId, tutorial) {
            v1.configApp();
            var self = this;
            v1.currentApp.info(tutorial);
        },

        tables: function(appId, tutorial) {
            v1.configApp();
            v1.currentApp.tables(tutorial);
        },

        themes: function(appId, tutorial) {
            v1.configApp();
            v1.currentApp.themes(tutorial);
        },

        pages: function(appId, tutorial) {
            v1.configApp();
            v1.currentApp.pages(tutorial);
        },

        appmain: function(appId, pageId) {
            v1.configApp();
            if (!pageId) pageId = 0;
            v1.currentApp.page(pageId);
        },

        emails: function(appId, tutorial) {
            v1.configApp();
            v1.currentApp.emails(tutorial);
        },

        plugins: function(appId, tutorial) {
            v1.configApp();
            //v1.currentApp.plugins(tutorial);
        },

        showTutorial: function(dir) {
            var inp = (dir) ? dir : this.tutorialPage;
            if (this.tutorialIsVisible) {
                this.tutorial.chooseSlide(inp);
            } else {
                this.tutorial = new TutorialView({
                    initial: inp
                });
                this.tutorialIsVisible = true;
            }
        },

        accountPage: function() {
            var PaymentsMain = function() {
                var striper = new Striper();
                striper.bindChangeCard('.change-card', 'change-card-form');
                striper.onSuccess = function() {
                    window.location = "/account/";
                };

                // striper.bindChangePlan('#change-plan-btn','change-subscription');
                striper.bindCancel('#cancel-btn', 'cancel-form');
            };

            $(document).ready(new PaymentsMain());


            this.$nav = $('.navigator .left-nav');

            // make left nav links scroll page
            this.$nav.find('a').click(function() {
                var elem = this.getAttribute('href');
                var topPos = $(elem).offset().top - 75;
                $('html,body').animate({
                    scrollTop: topPos
                });
                return false;
            });

            $('.left-nav').affix({
                offset: 0
            });

            $('#add-key-btn').on('click', function() {
                $('#add-key-btn').hide();
                $('#add-key-panel').fadeIn();
            });

            // @ksikka's code
            $(document).ready(function() {
                $('form').not('.no-ajax').each(function(ind, node) {
                    $(node).submit(function(e) {
                        var self = this;
                        var ajax_info = {
                            type: $(node).attr('method'),
                            url: $(node).attr('action'),
                            data: $(node).serialize(),
                            success: function(data, statusStr, xhr) {
                                if (typeof(data.redirect_to) !== 'undefined') {
                                    location.href = data.redirect_to;
                                } else {
                                    _.each(data, function(val, key, ind) {
                                        if (key === '__all__') {
                                            $(self).find('.form-error.field-all').html(val.join('<br />')).show();
                                        } else {
                                            $(self).find('.form-error.field-name-' + key).html(val.join('<br />')).show();
                                        }
                                    });
                                }
                            }
                        };
                        $.ajax(ajax_info);
                        $(self).find('.form-error').html("");
                        return false;
                    });
                });
            });
        },

        newapp: function() {

            $('#skip-racoon').hover(function() {
                $('#mascot').addClass('happy');
            }, function() {
                $('#mascot').removeClass('happy');
            });

        },

        dashboard: function() {
            console.log("DASHBOARD");

            var dboard = new DashboardsView();

            $( document ).tooltip({
              position: {
                my: "center bottom-10",
                at: "center top",
                using: function( position, feedback ) {
                  $( this ).css( position );
                  $( "<div>" )
                    .addClass( "arrow" )
                    .addClass( feedback.vertical )
                    .addClass( feedback.horizontal )
                    .appendTo( this );
                }
              }
            });

        },

        changeTitle: function(title) {
            var newTitle = "";
            if (title) {
                newTitle = " | " + title;
            }
            document.title = "Appcubator" + newTitle;
        }

    });

    return AppRouter;

});
define('app/RouteLogger',[
  'jquery'
],
function() {

  var RouteLogger = function(options) {
      this.router = options.router;
      this.router.bind('route', this.logRoute, this);
  };

  RouteLogger.prototype.logRoute = function(router, route, params) {
    var appID = route[0];
    if(router) {
      util.log_to_server('visited page', {page_name: router || "unknown" }, appID);
    }
  };

  return RouteLogger;

});

/*
 * jQuery Hotkeys Plugin
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Based upon the plugin by Tzury Bar Yochay:
 * http://github.com/tzuryby/hotkeys
 *
 * Original idea by:
 * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/
*/

/*
 * One small change is: now keys are passed by object { keys: '...' }
 * Might be useful, when you want to pass some other data to your handler
 */

(function(jQuery){

  jQuery.hotkeys = {
    version: "0.8",

    specialKeys: {
      8: "backspace", 9: "tab", 10: "return", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause",
      20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home",
      37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del", 
      96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7",
      104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111 : "/", 
      112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8", 
      120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 186: ";", 191: "/",
      220: "\\", 222: "'", 224: "meta"
    },

    shiftNums: {
      "`": "~", "1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&", 
      "8": "*", "9": "(", "0": ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<", 
      ".": ">",  "/": "?",  "\\": "|"
    }
  };

  function keyHandler( handleObj ) {
    if ( typeof handleObj.data === "string" ) {
      handleObj.data = { keys: handleObj.data };
    }

    // Only care when a possible input has been specified
    if ( !handleObj.data || !handleObj.data.keys || typeof handleObj.data.keys !== "string" ) {
      return;
    }

    var origHandler = handleObj.handler,
      keys = handleObj.data.keys.toLowerCase().split(" "),
      textAcceptingInputTypes = ["text", "password", "number", "email", "url", "range", "date", "month", "week", "time", "datetime", "datetime-local", "search", "color", "tel"];

    handleObj.handler = function( event ) {
      // Don't fire in text-accepting inputs that we didn't directly bind to
      if ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||
        jQuery.inArray(event.target.type, textAcceptingInputTypes) > -1 ) ) {
        return;
      }

      var special = jQuery.hotkeys.specialKeys[ event.keyCode ],
        // character codes are available only in keypress
        character = (event.type === "keypress"||event.type === "keydown") && String.fromCharCode( event.which ).toLowerCase(),
        //modified by @icanberk to allow keydown
        //character = event.type === "keypress" && String.fromCharCode( event.which ).toLowerCase(),

        modif = "", possible = {};

      // check combinations (alt|ctrl|shift+anything)
      if ( event.altKey && special !== "alt" ) {
        modif += "alt+";
      }

      if ( event.ctrlKey && special !== "ctrl" ) {
        modif += "ctrl+";
      }

      // TODO: Need to make sure this works `istently across platforms
      if ( event.metaKey && !event.ctrlKey && special !== "meta" ) {
        modif += "meta+";
      }

      if ( event.shiftKey && special !== "shift" ) {
        modif += "shift+";
      }

      if ( special ) {
        possible[ modif + special ] = true;
      }

      if ( character ) {
        possible[ modif + character ] = true;
        possible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;

        // "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
        if ( modif === "shift+" ) {
          possible[ jQuery.hotkeys.shiftNums[ character ] ] = true;
        }
      }

      for ( var i = 0, l = keys.length; i < l; i++ ) {
        if ( possible[ keys[i] ] ) {
          return origHandler.apply( this, arguments );
        }
      }
    };
  }

  jQuery.each([ "keydown", "keyup", "keypress" ], function() {
    jQuery.event.special[ this ] = { add: keyHandler };
  });

})( this.jQuery );
define("jquery.hotkeys", ["jquery"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.$;
    };
}(this)));

define('editor/KeyDispatcher',[
  'jquery.hotkeys'
],
function () {

  var KeyDispatcher = function() {
    
    this.bindings = {};
    this.environments  = [ document ];
    this.store = [];

    this.addEnvironment = function(env) {
      this.environments.push(env);
      this.initializeEnvironment(env);
    };

    this.bind = function(keyComb, fn, type) {
      _.each(this.environments, function(env) {
        $(env).bind('keydown', keyComb, fn);
      });
    };

    this.bindComb = function(keyComb, fn, type) {
      this.store.push({keyComb: keyComb, fn: fn, type: type });
      _.each(this.environments, function(env) {
        $(env).bind('keydown', keyComb, fn);
      });
    };

    this.unbind = function(keyComb, fn, type) {
      _.each(this.environments, function(env) {
        $(env).unbind('keydown', keyComb, fn);
      });
      this.removeFromStore(keyComb, fn, type);
    };

    this.removeFromStore = function(keyComb, fn, type) {
      var indToRemove = [];
      _.each(this.store, function(binding, ind) {
        if(binding.keyComb == keyComb && binding.fn == fn) {
          intToRemove.push(ind);
        }
      });
    };

    this.initializeEnvironment = function(env) {
      _.each(this.store, function(binding) {
        $(env).bind('keydown', binding.keyComb, binding.fn);
      });
    };

  };

  return KeyDispatcher;
});
define('editor/MouseDispatcher',[ ], function () {

  var MousDispatcher = function() {
    this.isMousedownActive = false;
  };

  return MousDispatcher;
});
// Generated by CoffeeScript 1.4.0
var Heyoffline, addEvent, destroy, extend, setStyles,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

extend = function(destination, source) {
  var property;
  if (source) {
    for (property in source) {
      if (source[property] && source[property].constructor && source[property].constructor === Object) {
        destination[property] = destination[property] || {};
        arguments.callee(destination[property], source[property]);
      } else {
        destination[property] = source[property];
      }
    }
  }
  return destination;
};

addEvent = function(element, event, fn, useCapture) {
  if (useCapture == null) {
    useCapture = false;
  }
  return element.addEventListener(event, fn, useCapture);
};

setStyles = function(element, styles) {
  var key, _results;
  _results = [];
  for (key in styles) {
    _results.push(element.style[key] = styles[key]);
  }
  return _results;
};

destroy = function(element) {
  return element.parentNode.removeChild(element);
};

Heyoffline = (function() {

  Heyoffline.prototype.version = '1.1.1';

  Heyoffline.prototype.options = {
    text: {
      title: "You're currently offline",
      content: "Seems like you've gone offline,                you might want to wait until your network comes back before continuing.<br /><br />                This message will self-destruct once you're online again.",
      button: "Relax, I know what I'm doing"
    },
    monitorFields: false,
    prefix: 'heyoffline',
    noStyles: false,
    disableDismiss: false,
    elements: ['input', 'select', 'textarea', '*[contenteditable]']
  };

  Heyoffline.prototype.modified = false;

  function Heyoffline(options) {
    this.hideMessage = __bind(this.hideMessage, this);

    this.offline = __bind(this.offline, this);

    this.online = __bind(this.online, this);
    extend(this.options, options);
    this.setup();
  }

  Heyoffline.prototype.setup = function() {
    this.events = {
      element: ['keyup', 'change'],
      network: ['online', 'offline']
    };
    this.elements = {
      fields: document.querySelectorAll(this.options.elements.join(',')),
      overlay: document.createElement('div'),
      modal: document.createElement('div'),
      heading: document.createElement('h2'),
      content: document.createElement('p'),
      button: document.createElement('a')
    };
    this.defaultStyles = {
      overlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        background: 'rgba(0, 0, 0, 0.3)',
        zIndex: 500
      },
      modal: {
        padding: '15px',
        background: '#fff',
        boxShadow: '0 2px 30px rgba(0, 0, 0, 0.3)',
        width: '450px',
        margin: '0 auto',
        position: 'relative',
        top: '30%',
        color: '#444',
        borderRadius: '2px',
        zIndex: 600
      },
      heading: {
        fontSize: '1.7em',
        paddingBottom: '15px'
      },
      content: {
        paddingBottom: '15px'
      },
      button: {
        fontWeight: 'bold',
        cursor: 'pointer'
      }
    };
    return this.attachEvents();
  };

  Heyoffline.prototype.createElements = function() {
    this.createElement(document.body, 'overlay');
    this.resizeOverlay();
    this.createElement(this.elements.overlay, 'modal');
    this.createElement(this.elements.modal, 'heading', this.options.text.title);
    this.createElement(this.elements.modal, 'content', this.options.text.content);
    if (!this.options.disableDismiss) {
      this.createElement(this.elements.modal, 'button', this.options.text.button);
      return addEvent(this.elements.button, 'click', this.hideMessage);
    }
  };

  Heyoffline.prototype.createElement = function(context, element, text) {
    this.elements[element].setAttribute('class', "" + this.options.prefix + "_" + element);
    this.elements[element] = context.appendChild(this.elements[element]);
    if (text) {
      this.elements[element].innerHTML = text;
    }
    if (!this.options.noStyles) {
      return setStyles(this.elements[element], this.defaultStyles[element]);
    }
  };

  Heyoffline.prototype.resizeOverlay = function() {
    return setStyles(this.elements.overlay, {
      height: "" + window.innerHeight + "px"
    });
  };

  Heyoffline.prototype.destroyElements = function() {
    if (this.elements.overlay) {
      return destroy(this.elements.overlay);
    }
  };

  Heyoffline.prototype.attachEvents = function() {
    var event, field, _i, _j, _len, _len1, _ref, _ref1,
      _this = this;
    _ref = this.elements.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      this.elementEvents(field);
    }
    _ref1 = this.events.network;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      event = _ref1[_j];
      this.networkEvents(event);
    }
    return addEvent(window, 'resize', function() {
      return _this.resizeOverlay();
    });
  };

  Heyoffline.prototype.elementEvents = function(field) {
    var event, _i, _len, _ref, _results,
      _this = this;
    _ref = this.events.element;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      event = _ref[_i];
      _results.push((function(event) {
        return addEvent(field, event, function() {
          return _this.modified = true;
        });
      })(event));
    }
    return _results;
  };

  Heyoffline.prototype.networkEvents = function(event) {
    return addEvent(window, event, this[event]);
  };

  Heyoffline.prototype.online = function(event) {
    return this.hideMessage();
  };

  Heyoffline.prototype.offline = function() {
    if (this.options.monitorFields) {
      if (this.modified) {
        return this.showMessage();
      }
    } else {
      return this.showMessage();
    }
  };

  Heyoffline.prototype.showMessage = function() {
    this.createElements();
    if (this.options.onOnline) {
      return this.options.onOnline.call(this);
    }
  };

  Heyoffline.prototype.hideMessage = function(event) {
    if (event) {
      event.preventDefault();
    }
    this.destroyElements();
    if (this.options.onOffline) {
      return this.options.onOffline.call(this);
    }
  };

  return Heyoffline;

})();

define("heyoffline", (function (global) {
    return function () {
        var ret, fn;
        return ret || global.Heyoffline;
    };
}(this)));

define('comp',['jquery-ui'], function() {

  var comp = function() {

    this.el = null;

    this.assign = function(node) {
      if(this.el) {
        this.el.appendChild(node);
        this.lastChild = node;
      }
      else {
        this.el = node;
      }
    };

    this.div = function(txt) {
      var newEl = document.createElement('div');
      newEl.appendChild(document.createTextNode(txt));
      this.assign(newEl);
      return this;
    };

    this.h1 = function(txt) {
      var newEl = document.createElement('h1');
      newEl.appendChild(document.createTextNode(txt));
      this.assign(newEl);
      return this;
    };

    this.span = function(txt) {
      var newEl = document.createElement('span');
      newEl.appendChild(document.createTextNode(txt));
      this.assign(newEl);
      return this;
    };

    this.select = function(txt) {
      var newEl = document.createElement('select');
      newEl.appendChild(document.createTextNode(txt));
      this.assign(newEl);
      return this;
    };

    this.option = function(txt) {
      var newEl = document.createElement('option');
      newEl.appendChild(document.createTextNode(txt));
      this.assign(newEl);
      return this;
    };

    this.valProp = function(val) {
      this.el.setAttribute('value', val);
      return this;
    };

    this.textarea = function(txt) {
      var newEl = document.createElement('textarea');
      newEl.value = txt;
      this.assign(newEl);
      return this;
    };

    this.style = function(style) {
      this.el.setAttribute('style', style);
      return this;
    };

    this.id = function(id) {
      this.el.id = id;
      return this;
    };

    this.classN = function(clsName) {
      this.el.className = clsName;
      return this;
    };

    this.html = function(html) {
      this.el.innerHTML += html;
      return this;
    };
  };


  window.comp = comp;

  if (typeof window.define === "function" && window.define.amd) {
    window.define("comp", [], function() {
      return window.comp;
    });
  }

});

/**
 * @license xrayquire 0.0.0 Copyright (c) 2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/xrayquire for details
 */
/*jslint nomen: true */
/*global requirejs, console, window */

/**
 * Put a script tag in the HTML that references this script right after the
 * script tag for require.js.
 */

var xrayquire;
(function () {
    'use strict';

    var contexts = {},
        config = typeof xrayquire === 'undefined' ? {} : xrayquire,
        s = requirejs.s,
        oldNewContext = s.newContext,
        tokenRegExp = /\{(\w+)\}/g,
        standardDeps = {
            require: true,
            exports: true,
            module: true
        },
        prop;

    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return obj.hasOwnProperty(prop);
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     * This is not robust in IE for transferring methods that match
     * Object.prototype names, but the uses of mixin here seem unlikely to
     * trigger a problem related to that.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value !== 'string') {
                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    function isRequire(id) {
        return id.indexOf('_@r') !== -1;
    }

    function formatId(id) {
        //If the ID is for a require call, make it prettier.
        return isRequire(id) ? 'require()' : id;
    }

    function formatUrl(url) {
        return !url || isRequire(url) ? '' : url;
    }

    function getX(context) {
        if (!context.xray) {
            context.xray = {
                traced: {},
                traceOrder: [],
                mixedCases: {}
            };
        }
        return context.xray;
    }

    function modContext(context) {
        var oldLoad = context.load,
            modProto = context.Module.prototype,
            oldModuleEnable = modProto.enable,
            xray = getX(context),
            traced = xray.traced,
            mixedCases = xray.mixedCases;

        function trackModule(mod) {
            var id = mod.map.id,
                traceData;

            //If an intermediate module from a plugin, do not
            //track it
            if (mod.map.prefix && id.indexOf('_unnormalized') !== -1) {
                return;
            }

            //Cycle through the dependencies now, wire this up here
            //instead of context.load so that we get a recording of
            //modules as they are encountered, and not as they
            //are fetched/loaded, since things could fall over between
            //now and then.
            if (!traced[id] || !traced[id].deps || !traced[id].deps.length) {
                each(mod.depMaps, function (dep) {
                    var depId = dep.id,
                        lowerId = depId.toLowerCase();

                    if (mixedCases[lowerId] && depId !== mixedCases[lowerId].id) {
                        console.error('Mixed case modules may conflict: ' +
                                        formatId(mixedCases[lowerId].refId) +
                                        ' asked for: "' +
                                        mixedCases[lowerId].id +
                                        '" and ' +
                                        formatId(id) +
                                        ' asked for: "' +
                                        depId +
                                        '"');
                    } else {
                        mixedCases[lowerId] = {
                            refId: id,
                            id: depId
                        };
                    }
                });

                traceData = {
                    map: mod.map,
                    deps: mod.depMaps
                };

                //Only add this to the order if not previously added.
                if (!traced[id]) {
                    xray.traceOrder.push(id);
                }

                //Set the data again in case this enable has the
                //real dependencies. Some first calls of enable do
                //not have the dependencies known yet.
                traced[id] = traceData;
            }
        }

        modProto.enable = function () {
            var result = oldModuleEnable.apply(this, arguments);
            trackModule(this);
            return result;
        };

        //Collect any modules that are already in process
        eachProp(context.registry, function (mod) {
            if (mod.enabled) {
                trackModule(mod);
            }
        });

        return context;
    }

    //Mod any existing contexts.
    eachProp(requirejs.s.contexts, function (context) {
        modContext(context);
    });

    //Apply mods to any new context.
    s.newContext = function (name) {
        return modContext(oldNewContext);
    };

    requirejs.onResourceLoad = function (context, map, deps) {
        var id = map.id;

        if (typeof context.defined[id] === 'undefined') {
            //May be a problem with a circular dependency.
            //console.error(id + ' has undefined module value, may be part ' +
            //              'of a bad circular reference');
        }
    };


    function sortTraceOrder(traceOrder) {
        //Sort the traceOrder, but do it by lowercase comparisons,
        //to keep 'something' and 'Something' next to each other.
        traceOrder.sort(function (a, b) {
            return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
        });
    }

    function htmlEscape(id) {
        return (id || '')
            .replace('<', '&lt;')
            .replace('>', '&gt;')
            .replace('&', '&amp;')
            .replace('"', '&quot;');
    }

    function template(contents, data) {
        return contents.replace(tokenRegExp, function (match, token) {
            var result = data[token];

            //Just use empty string for null or undefined
            if (result === null || result === undefined) {
                result = '';
            }

            return result;
        });
    }


    function findCycle(mod, traced, masterVisited, visited) {
        var id = mod.map.id,
            depArray = mod.deps,
            foundModule;

        //Do not bother with require calls or standard deps,
        //or things that are already listed in a cycle
        if (isRequire(id) || masterVisited[id] || standardDeps[id]) {
            return;
        }

        //Found the cycle.
        if (visited[id]) {
            return {
                mod: mod,
                visited: visited
            };
        }

        visited[id] = true;

        //Trace through the dependencies.
        each(depArray, function (depMap) {
            var depId = depMap.id,
                depMod = traced[depId];

            if (!depMod) {
                return;
            }

            //mixin visited to a new object for each dependency, so that
            //sibling dependencies in this object to not generate a
            //false positive match on a cycle. Ideally an Object.create
            //type of prototype delegation would be used here, but
            //optimizing for file size vs. execution speed since hopefully
            //the trees are small for circular dependency scans relative
            //to the full app perf.
            return (foundModule = findCycle(depMod, traced, masterVisited, mixin({}, visited)));
        });

        return foundModule;
    }

    function showHtml(html) {
        //Convert to URL encoded data
        html = encodeURIComponent(html);

        //Display the HTML
        window.open('data:text/html;charset=utf-8,' + html, '_blank');
    }

    /**
     * Public API
     */
    xrayquire = {
        treeHtml: '<!DOCTYPE html>\n<html>\n<head>\n<title>Module Dependencies</title>\n<style>\nbody {\n    font-family: \"Inconsolata\",Andale Mono,Monaco,Monospace;\n    color: green;\n}\n\na {\n    color: #2E87DD;\n    text-decoration: none;\n}\n\na:hover {\n    text-decoration: underline;\n}\n\n.mod {\n    background-color: #FAFAFA;\n    border: 1px solid #E6E6E6;\n    border-radius: 5px 5px 5px 5px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n    font-size: 13px;\n    line-height: 18px;\n    margin: 7px 0 21px;\n    overflow: auto;\n    padding: 5px 10px;\n}\n\n.url {\n    font-size: smaller;\n    color: grey;\n}\n\nli.standard {\n    color: grey;\n}\n\n</style>\n</head>\n<body>\n{content}\n</body>\n</html>\n',
        treeDepItemHtml: '<li><a href=\"#mod-{htmlId}\">{id}</a></li>',
        treeDepItemNoLinkHtml: '<li class=\"standard\">{id}</li>',
        treeItemHtml: '<div class=\"mod\" id=\"mod-{htmlId}\">\n    <span class=\"id\">{id}</span>\n    <span class=\"url\">{url}</span>\n    <ul class=\"deps\">\n        {depItems}\n    </ul>\n</div>\n',

        makeHtmlId: function (id) {
            return encodeURIComponent(id);
        },

        makeTemplateData: function (mod) {
            return {
                htmlId: xrayquire.makeHtmlId(mod.id),
                id: htmlEscape(formatId(mod.id)),
                url: htmlEscape(formatUrl(mod.url))
            };
        },

        showTree: function (contextName) {
            var context = requirejs.s.contexts[contextName || '_'],
                xray = getX(context),
                traced = xray.traced,
                html = '';

            sortTraceOrder(xray.traceOrder);

            //Generate the HTML
            each(xray.traceOrder, function (id) {
                var mod = traced[id],
                    templateData = xrayquire.makeTemplateData(mod.map);

                //Do not bother if this is a require() call with no
                //dependencies
                if (isRequire(mod.map.id) && (!mod.deps || !mod.deps.length)) {
                    return;
                }

                templateData.depItems = '';

                each(mod.deps, function (dep) {
                    var depHtmlTemplate = standardDeps[dep.id] ?
                                          xrayquire.treeDepItemNoLinkHtml :
                                          xrayquire.treeDepItemHtml;

                    templateData.depItems += template(depHtmlTemplate,
                                             xrayquire.makeTemplateData(dep));
                });

                html += template(xrayquire.treeItemHtml, templateData);
            });

            //Put the HTML in a full HTML document.
            html = template(xrayquire.treeHtml, {
                content: html
            });

            showHtml(html);
        },

        getCycles: function (contextName) {
            var context = requirejs.s.contexts[contextName || '_'],
                cycles = {},
                xray = getX(context),
                traced = xray.traced,
                masterVisited = {},
                foundCycle = false;

            sortTraceOrder(xray.traceOrder);

            each(xray.traceOrder, function (id) {
                var mod = traced[id],
                    cycleInfo = findCycle(mod, traced, masterVisited, {});

                if (cycleInfo) {
                    foundCycle = true;
                    mod = cycleInfo.mod;
                    mixin(masterVisited, cycleInfo.visited);

                    cycles[mod.map.id] = {
                        visited: cycleInfo.visited
                    };
                }
            });

            return foundCycle ? cycles : null;
        },

        cycleHtml: '<!DOCTYPE html>\n<html>\n<head>\n<title>Module Cycles</title>\n<style>\nbody {\n    font-family: \"Inconsolata\",Andale Mono,Monaco,Monospace;\n    color: green;\n}\n\na {\n    color: #2E87DD;\n    text-decoration: none;\n}\n\na:hover {\n    text-decoration: underline;\n}\n\n.mod {\n    background-color: #FAFAFA;\n    border: 1px solid #E6E6E6;\n    border-radius: 5px 5px 5px 5px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n    font-size: 13px;\n    line-height: 18px;\n    margin: 7px 0 21px;\n    overflow: auto;\n    padding: 5px 10px;\n}\n\n</style>\n</head>\n<body>\n{content}\n</body>\n</html>\n',
        cycleEntryHtml: '<div class=\"mod\">\n    <span class=\"id\">{id}</span>\n    <ul class=\"chain\">\n        {chain}\n    </ul>\n</div>\n',
        cycleChainEntryHtml: '<li>{id}</li>',

        showCycles: function (contextName) {
            var cycles = xrayquire.getCycles(contextName),
                html = '';

            if (cycles) {
                eachProp(cycles, function (cycle, id) {
                    var chainHtml = '';
                    eachProp(cycle.visited, function (value, cycleId) {
                        if (cycleId !== id) {
                            chainHtml += template(xrayquire.cycleChainEntryHtml, {
                                id: cycleId
                            });
                        }
                    });

                    html += template(xrayquire.cycleEntryHtml, {
                        id: id,
                        chain: chainHtml
                    });
                });
            } else {
                html = 'No cycles found';
            }

            html = template(xrayquire.cycleHtml, {
                content: html
            });

            showHtml(html);
        }
    };
}());
define("xrayquire", function(){});

(function() {
  var _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Tourist = window.Tourist || {};

  /*
  A model for the Tour. We'll only use the 'current_step' property.
  */


  Tourist.Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      _ref = Model.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Model.prototype._module = 'Tourist';

    return Model;

  })(Backbone.Model);

  window.Tourist.Tip = window.Tourist.Tip || {};

  /*
  The flyout showing the content of each step.
  
  This is the base class containing most of the logic. Can extend for different
  tooltip implementations.
  */


  Tourist.Tip.Base = (function() {
    Base.prototype._module = 'Tourist';

    _.extend(Base.prototype, Backbone.Events);

    Base.prototype.skipButtonTemplate = '<button class="btn btn-small pull-right tour-next">Skip this step →</button>';

    Base.prototype.nextButtonTemplate = '<button class="btn btn-primary btn-small pull-right tour-next">Next step →</button>';

    Base.prototype.finalButtonTemplate = '<button class="btn btn-primary btn-small pull-right tour-next">Finish up</button>';

    Base.prototype.closeButtonTemplate = '<a class="btn btn-close tour-close" href="#"><i class="icon icon-remove"></i></a>';

    Base.prototype.okButtonTemplate = '<button class="btn btn-small tour-close btn-primary">Okay</button>';

    Base.prototype.actionLabelTemplate = _.template('<h4 class="action-label"><%= label %></h4>');

    Base.prototype.actionLabels = ['Do this:', 'Then this:', 'Next this:'];

    Base.prototype.highlightClass = 'tour-highlight';

    Base.prototype.template = _.template('<div>\n  <div class="tour-container">\n    <%= close_button %>\n    <%= content %>\n    <p class="tour-counter <%= counter_class %>"><%= counter%></p>\n  </div>\n  <div class="tour-buttons">\n    <%= buttons %>\n  </div>\n</div>');

    function Base(options) {
      this.options = options != null ? options : {};
      this.onClickNext = __bind(this.onClickNext, this);
      this.onClickClose = __bind(this.onClickClose, this);
      this.el = $('<div/>');
      this.initialize(options);
      this._bindClickEvents();
      Tourist.Tip.Base._cacheTip(this);
    }

    Base.prototype.destroy = function() {
      return this.el.remove();
    };

    Base.prototype.render = function(step) {
      this.hide();
      if (step) {
        this._setTarget(step.target || false, step, step.iframe);
        this._setZIndex('');
        this._renderContent(step, this._buildContentElement(step));
        if (step.target) {
          this.show();
        }
        if (step.zIndex) {
          this._setZIndex(step.zIndex, step);
        }
      }
      return this;
    };

    Base.prototype.show = function() {};

    Base.prototype.hide = function() {};

    Base.prototype.setTarget = function(targetElement, step) {
      return this._setTarget(targetElement, step);
    };

    Base.prototype.cleanupCurrentTarget = function() {
      if (this.target && this.target.removeClass) {
        this.target.removeClass(this.highlightClass);
      }
      return this.target = null;
    };

    /*
    Event Handlers
    */


    Base.prototype.onClickClose = function(event) {
      this.trigger('click:close', this, event);
      return false;
    };

    Base.prototype.onClickNext = function(event) {
      this.trigger('click:next', this, event);
      return false;
    };

    /*
    Private
    */


    Base.prototype._getTipElement = function() {};

    Base.prototype._renderContent = function(step, contentElement) {};

    Base.prototype._bindClickEvents = function() {
      var el;

      el = this._getTipElement();
      el.delegate('.tour-close', 'click', this.onClickClose);
      return el.delegate('.tour-next', 'click', this.onClickNext);
    };

    Base.prototype._setTarget = function(target, step, iframe) {
      this.cleanupCurrentTarget();
      if (target && step && step.highlightTarget) {
        target.addClass(this.highlightClass);
      }
      return this.target = target;
    };

    Base.prototype._setZIndex = function(zIndex) {
      var el;

      el = this._getTipElement();
      return el.css('z-index', zIndex || '');
    };

    Base.prototype._buildContentElement = function(step) {
      var buttons, content;

      buttons = this._buildButtons(step);
      content = $($.parseHTML(this.template({
        content: step.content,
        buttons: buttons,
        close_button: this._buildCloseButton(step),
        counter: step.final ? '' : "step " + (step.index + 1) + " of " + step.total,
        counter_class: step.final ? 'final' : ''
      })));
      if (!buttons) {
        content.find('.tour-buttons').addClass('no-buttons');
      }
      this._renderActionLabels(content);
      return content;
    };

    Base.prototype._buildButtons = function(step) {
      var buttons;

      buttons = '';
      if (step.okButton) {
        buttons += this.okButtonTemplate;
      }
      if (step.skipButton) {
        buttons += this.skipButtonTemplate;
      }
      if (step.nextButton) {
        buttons += step.final ? this.finalButtonTemplate : this.nextButtonTemplate;
      }
      return buttons;
    };

    Base.prototype._buildCloseButton = function(step) {
      if (step.closeButton) {
        return this.closeButtonTemplate;
      } else {
        return '';
      }
    };

    Base.prototype._renderActionLabels = function(el) {
      var action, actionIndex, actions, label, _i, _len, _results;

      actions = el.find('.action');
      actionIndex = 0;
      _results = [];
      for (_i = 0, _len = actions.length; _i < _len; _i++) {
        action = actions[_i];
        label = $($.parseHTML(this.actionLabelTemplate({
          label: this.actionLabels[actionIndex]
        })));
        label.insertBefore(action);
        _results.push(actionIndex++);
      }
      return _results;
    };

    Base._cacheTip = function(tip) {
      if (!Tourist.Tip.Base._cachedTips) {
        Tourist.Tip.Base._cachedTips = [];
      }
      return Tourist.Tip.Base._cachedTips.push(tip);
    };

    Base.destroy = function() {
      var tip, _i, _len, _ref1;

      if (!Tourist.Tip.Base._cachedTips) {
        return;
      }
      _ref1 = Tourist.Tip.Base._cachedTips;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tip = _ref1[_i];
        tip.destroy();
      }
      return Tourist.Tip.Base._cachedTips = null;
    };

    return Base;

  })();

  /*
  Bootstrap based tip implementation
  */


  Tourist.Tip.Bootstrap = (function(_super) {
    __extends(Bootstrap, _super);

    function Bootstrap() {
      _ref1 = Bootstrap.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Bootstrap.prototype.initialize = function(options) {
      var defs;

      defs = {
        showEffect: null,
        hideEffect: null
      };
      this.options = _.extend(defs, options);
      return this.tip = new Tourist.Tip.BootstrapTip();
    };

    Bootstrap.prototype.destroy = function() {
      this.tip.destroy();
      return Bootstrap.__super__.destroy.call(this);
    };

    Bootstrap.prototype.show = function() {
      var fn;

      if (this.options.showEffect) {
        fn = Tourist.Tip.Bootstrap.effects[this.options.showEffect];
        return fn.call(this, this.tip, this.tip.el);
      } else {
        return this.tip.show();
      }
    };

    Bootstrap.prototype.hide = function() {
      var fn;

      if (this.options.hideEffect) {
        fn = Tourist.Tip.Bootstrap.effects[this.options.hideEffect];
        return fn.call(this, this.tip, this.tip.el);
      } else {
        return this.tip.hide();
      }
    };

    /*
    Private
    */


    Bootstrap.prototype._getTipElement = function() {
      return this.tip.el;
    };

    Bootstrap.prototype._setTarget = function(target, step) {
      var iframe = step.iframe;
      Bootstrap.__super__._setTarget.call(this, target, step);
      return this.tip.setTarget(target, iframe);
    };

    Bootstrap.prototype._renderContent = function(step, contentElement) {
      var at, my;

      my = step.my || 'left center';
      at = step.at || 'right center';
      this.tip.setContainer(step.container || $('body'));
      this.tip.setContent(contentElement);
      return this.tip.setPosition(step.target || false, my, at);
    };

    return Bootstrap;

  })(Tourist.Tip.Base);

  Tourist.Tip.Bootstrap.effects = {
    slidein: function(tip, element) {
      var OFFSETS, css, easing, easings, offset, side, value, _i, _len;

      OFFSETS = {
        top: 80,
        left: 80,
        right: -80,
        bottom: -80
      };
      side = tip.my.split(' ')[0];
      side = side || 'top';
      offset = OFFSETS[side];
      if (side === 'bottom') {
        side = 'top';
      }
      if (side === 'right') {
        side = 'left';
      }
      value = parseInt(element.css(side));
      element.stop();
      css = {};
      css[side] = value + offset;
      element.css(css);
      element.show();
      css[side] = value;
      easings = ['easeOutCubic', 'swing', 'linear'];
      for (_i = 0, _len = easings.length; _i < _len; _i++) {
        easing = easings[_i];
        if ($.easing[easing]) {
          break;
        }
      }
      element.animate(css, 300, easing);
      return null;
    }
  };

  /*
  Simple implementation of tooltip with bootstrap markup.
  
  Almost entirely deals with positioning. Uses the similar method for
  positioning as qtip2:
  
    my: 'top center'
    at: 'bottom center'
  */


  Tourist.Tip.BootstrapTip = (function() {
    BootstrapTip.prototype.template = '<div class="popover">\n  <div class="arrow"></div>\n  <div class="popover-content"></div>\n</div>';

    BootstrapTip.prototype.FLIP_POSITION = {
      bottom: 'top',
      top: 'bottom',
      left: 'right',
      right: 'left'
    };

    function BootstrapTip(options) {
      var defs;

      defs = {
        offset: 10,
        tipOffset: 10
      };
      this.options = _.extend(defs, options);
      this.el = $($.parseHTML(this.template));
      this.el.get(0).addEventListener("webkitAnimationEnd", function(){
        this.style.webkitAnimationName = "";
      }, false);
      this.hide();
    }

    BootstrapTip.prototype.destroy = function() {
      return this.el.remove();
    };

    BootstrapTip.prototype.show = function() {
      return this.el.show().addClass('visible');
    };

    BootstrapTip.prototype.hide = function() {
      return this.el.hide().removeClass('visible');
    };

    BootstrapTip.prototype.setTarget = function(target, iframe) {
      this.target = target;
      return this._setPosition(this.target, this.my, this.at, iframe);
    };

    BootstrapTip.prototype.setPosition = function(target, my, at, iframe) {
      this.target = target;
      this.my = my;
      this.at = at;
      return this._setPosition(this.target, this.my, this.at, iframe);
    };

    BootstrapTip.prototype.setContainer = function(container) {
      return container.append(this.el);
    };

    BootstrapTip.prototype.setContent = function(content) {
      return this._getContentElement().html(content);
    };

    /*
    Private
    */


    BootstrapTip.prototype._getContentElement = function() {
      return this.el.find('.popover-content');
    };

    BootstrapTip.prototype._getTipElement = function() {
      return this.el.find('.arrow');
    };

    BootstrapTip.prototype._setPosition = function(target, my, at, iframe) {
      var clas, css, originalDisplay, position, shift, targetPosition, tip, tipOffset, tipPosition, _ref2;

      if (my == null) {
        my = 'left center';
      }
      if (at == null) {
        at = 'right center';
      }
      if (!target) {
        return;
      }
      _ref2 = my.split(' '), clas = _ref2[0], shift = _ref2[1];
      originalDisplay = this.el.css('display');
      this.el.css({
        top: 0,
        left: 0,
        margin: 0,
        display: 'block'
      }).removeClass('top').removeClass('bottom').removeClass('left').removeClass('right').addClass(this.FLIP_POSITION[clas]);
      if (!target) {
        return;
      }
      tip = this._getTipElement().css({
        left: '',
        right: '',
        top: '',
        bottom: ''
      });
      if (shift !== 'center') {
        tipOffset = {
          left: tip[0].offsetWidth / 2,
          right: 0,
          top: tip[0].offsetHeight / 2,
          bottom: 0
        };
        css = {};
        css[shift] = tipOffset[shift] + this.options.tipOffset;
        css[this.FLIP_POSITION[shift]] = 'auto';
        tip.css(css);
      }

      targetPosition = this._caculateTargetPosition(at, target, iframe);
      tipPosition = this._caculateTipPosition(my, targetPosition);
      position = this._adjustForArrow(my, tipPosition);
      this.el.css(position);
      return this.el.css({
        display: originalDisplay
      });
    };

    BootstrapTip.prototype._caculateTargetPosition = function(atPosition, target, iframe) {
      var bounds, pos;

      if (Object.prototype.toString.call(target) === '[object Array]') {
        return {
          left: target[0],
          top: target[1]
        };
      }


      bounds = this._getTargetBounds(target);
      pos = this._lookupPosition(atPosition, bounds.width, bounds.height);

      if(iframe) {
        var iPos = document.querySelector(iframe).getBoundingClientRect();
        pos[1] = pos[1] + iPos['top'];
      }

      return {
        left: bounds.left + pos[0],
        top: bounds.top + pos[1]
      };
    };

    BootstrapTip.prototype._caculateTipPosition = function(myPosition, targetPosition) {
      var height, pos, width;

      width = this.el[0].offsetWidth;
      height = this.el[0].offsetHeight;
      pos = this._lookupPosition(myPosition, width, height);
      return {
        left: targetPosition.left - pos[0],
        top: targetPosition.top - pos[1]
      };
    };

    BootstrapTip.prototype._adjustForArrow = function(myPosition, tipPosition) {
      var clas, height, position, shift, tip, width, _ref2;

      _ref2 = myPosition.split(' '), clas = _ref2[0], shift = _ref2[1];
      tip = this._getTipElement();
      width = tip[0].offsetWidth;
      height = tip[0].offsetHeight;
      position = {
        top: tipPosition.top,
        left: tipPosition.left
      };
      switch (clas) {
        case 'top':
          position.top += height + this.options.offset;
          break;
        case 'bottom':
          position.top -= height + this.options.offset;
          break;
        case 'left':
          position.left += width + this.options.offset;
          break;
        case 'right':
          position.left -= width + this.options.offset;
      }
      switch (shift) {
        case 'left':
          position.left -= width / 2 + this.options.tipOffset;
          break;
        case 'right':
          position.left += width / 2 + this.options.tipOffset;
          break;
        case 'top':
          position.top -= height / 2 + this.options.tipOffset;
          break;
        case 'bottom':
          position.top += height / 2 + this.options.tipOffset;
      }
      return position;
    };

    BootstrapTip.prototype._lookupPosition = function(position, width, height) {
      var height2, posLookup, width2;

      width2 = width / 2;
      height2 = height / 2;
      posLookup = {
        'top left': [0, 0],
        'left top': [0, 0],
        'top right': [width, 0],
        'right top': [width, 0],
        'bottom left': [0, height],
        'left bottom': [0, height],
        'bottom right': [width, height],
        'right bottom': [width, height],
        'top center': [width2, 0],
        'left center': [0, height2],
        'right center': [width, height2],
        'bottom center': [width2, height]
      };

      return posLookup[position];
    };

    BootstrapTip.prototype._getTargetBounds = function(target) {
      var el, size;

      el = (target[0]||target);
      if (typeof el.getBoundingClientRect === 'function') {
        size = el.getBoundingClientRect();
      } else {
        size = {
          width: el.offsetWidth,
          height: el.offsetHeight
        };
      }
      return $.extend({}, size, target.offset());
    };

    return BootstrapTip;

  })();

  /*
  Qtip based tip implementation
  */


  Tourist.Tip.QTip = (function(_super) {
    var ADJUST, OFFSETS, TIP_HEIGHT, TIP_WIDTH;

    __extends(QTip, _super);

    function QTip() {
      this._renderTipBackground = __bind(this._renderTipBackground, this);      _ref2 = QTip.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    TIP_WIDTH = 6;

    TIP_HEIGHT = 14;

    ADJUST = 10;

    OFFSETS = {
      top: 80,
      left: 80,
      right: -80,
      bottom: -80
    };

    QTip.prototype.QTIP_DEFAULTS = {
      content: {
        text: '..'
      },
      show: {
        ready: false,
        delay: 0,
        effect: function(qtip) {
          var css, el, offset, side, value;

          el = $(this);
          side = qtip.options.position.my;
          if (side) {
            side = side[side.precedance];
          }
          side = side || 'top';
          offset = OFFSETS[side];
          if (side === 'bottom') {
            side = 'top';
          }
          if (side === 'right') {
            side = 'left';
          }
          value = parseInt(el.css(side));
          css = {};
          css[side] = value + offset;
          el.css(css);
          el.show();
          css[side] = value;
          el.animate(css, 300, 'easeOutCubic');
          return null;
        },
        autofocus: false
      },
      hide: {
        event: null,
        delay: 0,
        effect: false
      },
      position: {
        adjust: {
          method: 'shift shift',
          scroll: false
        }
      },
      style: {
        classes: 'ui-tour-tip',
        tip: {
          height: TIP_WIDTH,
          width: TIP_HEIGHT
        }
      },
      events: {},
      zindex: 2000
    };

    QTip.prototype.initialize = function(options) {
      options = $.extend(true, {}, this.QTIP_DEFAULTS, options);
      this.el.qtip(options);
      this.qtip = this.el.qtip('api');
      return this.qtip.render();
    };

    QTip.prototype.destroy = function() {
      if (this.qtip) {
        this.qtip.destroy();
      }
      return QTip.__super__.destroy.call(this);
    };

    QTip.prototype.show = function() {
      return this.qtip.show();
    };

    QTip.prototype.hide = function() {
      return this.qtip.hide();
    };

    /*
    Private
    */


    QTip.prototype._getTipElement = function() {
      return $('#qtip-' + this.qtip.id);
    };

    QTip.prototype._setTarget = function(targetElement, step) {
      QTip.__super__._setTarget.call(this, targetElement, step);
      return this.qtip.set('position.target', targetElement || false);
    };

    QTip.prototype._renderContent = function(step, contentElement) {
      var at, my,
        _this = this;

      my = step.my || 'left center';
      at = step.at || 'right center';
      this._adjustPlacement(my, at);
      this.qtip.set('content.text', contentElement);
      this.qtip.set('position.container', step.container || $('body'));
      this.qtip.set('position.my', my);
      this.qtip.set('position.at', at);
      this.qtip.set('position.viewport', step.viewport || false);
      this.qtip.set('position.target', step.target || false);
      return setTimeout(function() {
        return _this._renderTipBackground(my.split(' ')[0]);
      }, 10);
    };

    QTip.prototype._adjustPlacement = function(my, at) {
      if (my.indexOf('top') === 0) {
        return this._adjust(0, ADJUST);
      } else if (my.indexOf('bottom') === 0) {
        return this._adjust(0, -ADJUST);
      } else if (my.indexOf('right') === 0) {
        return this._adjust(-ADJUST, 0);
      } else {
        return this._adjust(ADJUST, 0);
      }
    };

    QTip.prototype._adjust = function(adjustX, adjusty) {
      this.qtip.set('position.adjust.x', adjustX);
      return this.qtip.set('position.adjust.y', adjusty);
    };

    QTip.prototype._renderTipBackground = function(direction) {
      var bg, el;

      el = $('#qtip-' + this.qtip.id + ' .qtip-tip');
      bg = el.find('.qtip-tip-bg');
      if (!bg.length) {
        bg = $('<div/>', {
          'class': 'icon icon-tip qtip-tip-bg'
        });
        el.append(bg);
      }
      bg.removeClass('top left right bottom');
      return bg.addClass(direction);
    };

    return QTip;

  })(Tourist.Tip.Base);

  /*
  Simplest implementation of a tooltip. Used in the tests. Useful as an example
  as well.
  */


  Tourist.Tip.Simple = (function(_super) {
    __extends(Simple, _super);

    function Simple() {
      _ref3 = Simple.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Simple.prototype.initialize = function(options) {
      return $('body').append(this.el);
    };

    Simple.prototype.show = function() {
      return this.el.show();
    };

    Simple.prototype.hide = function() {
      return this.el.hide();
    };

    Simple.prototype._getTipElement = function() {
      return this.el;
    };

    Simple.prototype._renderContent = function(step, contentElement) {
      return this.el.html(contentElement);
    };

    return Simple;

  })(Tourist.Tip.Base);

  /*
  
  A way to make a tour. Basically, you specify a series of steps which explain
  elements to point at and what to say. This class manages moving between those
  steps.
  
  The 'step object' is a simple js obj that specifies how the step will behave.
  
  A simple Example of a step object:
    {
      content: '<p>Welcome to my step</p>'
      target: $('#something-to-point-at')
      closeButton: true
      highlightTarget: true
      setup: (tour, options) ->
        # do stuff in the interface/bind
      teardown: (tour, options) ->
        # remove stuff/unbind
    }
  
  Basic Step object options:
  
    content - a string of html to put into the step.
    target - jquery object or absolute point: [10, 30]
    highlightTarget - optional bool, true will outline the target with a bright color.
    container - optional jquery element that should contain the step flyout.
                default: $('body')
    viewport - optional jquery element that the step flyout should stay within.
               $(window) is commonly used. default: false
  
    my - string position of the pointer on the tip. default: 'left center'
    at - string position on the element the tip points to. default: 'right center'
    see http://craigsworks.com/projects/qtip2/docs/position/#basics
  
  Step object button options:
  
    okButton - optional bool, true will show a red ok button
    closeButton - optional bool, true will show a grey close button
    skipButton - optional bool, true will show a grey skip button
    nextButton - optional bool, true will show a red next button
  
  Step object function options:
  
    All functions on the step will have the signature '(tour, options) ->'
  
      tour - the Draw.Tour object. Handy to call tour.next()
      options - the step options. An object passed into the tour when created.
                It has the environment that the fns can use to manipulate the
                interface, bind to events, etc. The same object is passed to all
                of a step object's functions, so it is handy for passing data
                between steps.
  
    setup - called before step is shown. Use to scroll to your target, hide/show things, ...
  
      'this' is the step object itself.
  
      MUST return an object. Properties in the returned object will override
      properties in the step object.
  
      i.e. the target might be dynamic so you would specify:
  
      setup: (tour, options) ->
        return { target: $('#point-to-me') }
  
    teardown - function called right before hiding the step. Use to unbind from
      things you bound to in setup().
  
      'this' is the step object itself.
  
      Return nothing.
  
    bind - an array of function names to bind. Use this for event handlers you use in setup().
  
      Will bind functions to the step object as this, and the first 2 args as tour and options.
  
      i.e.
  
      bind: ['onChangeSomething']
      setup: (tour, options) ->
        options.document.bind('change:something', @onChangeSomething)
      onChangeSomething: (tour, options, model, value) ->
        tour.next()
      teardown: (tour, options) ->
        options.document.unbind('change:something', @onChangeSomething)
  */


  Tourist.Tour = (function() {
    _.extend(Tour.prototype, Backbone.Events);

    function Tour(options) {
      var defs, tipOptions;

      this.options = options != null ? options : {};
      this.onChangeCurrentStep = __bind(this.onChangeCurrentStep, this);
      this.next = __bind(this.next, this);
      defs = {
        tipClass: 'Bootstrap'
      };
      this.options = _.extend(defs, this.options);
      this.model = new Tourist.Model({
        current_step: null
      });
      tipOptions = _.extend({
        model: this.model
      }, this.options.tipOptions);
      this.view = new Tourist.Tip[this.options.tipClass](tipOptions);
      this.view.bind('click:close', _.bind(this.stop, this, true));
      this.view.bind('click:next', this.next);
      this.model.bind('change:current_step', this.onChangeCurrentStep);
    }

    /*
    Public
    */


    Tour.prototype.start = function() {
      this.trigger('start', this);
      return this.next();
    };

    Tour.prototype.stop = function(doFinalStep) {
      if (doFinalStep) {
        return this._showCancelFinalStep();
      } else {
        return this._stop();
      }
    };

    Tour.prototype.next = function() {
      var currentStep, index;

      currentStep = this._teardownCurrentStep();
      index = 0;
      if (currentStep) {
        index = currentStep.index + 1;
      }
      if (index < this.options.steps.length) {
        return this._showStep(this.options.steps[index], index);
      } else if (index === this.options.steps.length) {
        return this._showSuccessFinalStep();
      } else {
        return this._stop();
      }
    };

    Tour.prototype.setStepOptions = function(stepOptions) {
      return this.options.stepOptions = stepOptions;
    };

    /*
    Handlers
    */


    Tour.prototype.onChangeCurrentStep = function(model, step) {
      return this.view.render(step);
    };

    /*
    Private
    */


    Tour.prototype._showCancelFinalStep = function() {
      return this._showFinalStep(false);
    };

    Tour.prototype._showSuccessFinalStep = function() {
      return this._showFinalStep(true);
    };

    Tour.prototype._teardownCurrentStep = function() {
      var currentStep;

      currentStep = this.model.get('current_step');
      this._teardownStep(currentStep);
      return currentStep;
    };

    Tour.prototype._stop = function() {
      this._teardownCurrentStep();
      this.model.set({
        current_step: null
      });
      return this.trigger('stop', this);
    };

    Tour.prototype._showFinalStep = function(success) {
      var currentStep, finalStep;

      currentStep = this._teardownCurrentStep();
      finalStep = success ? this.options.successStep : this.options.cancelStep;
      if (_.isFunction(finalStep)) {
        finalStep.call(this, this, this.options.stepOptions);
        finalStep = null;
      }
      if (!finalStep) {
        return this._stop();
      }
      if (currentStep && currentStep.final) {
        return this._stop();
      }
      finalStep.final = true;
      return this._showStep(finalStep, this.options.steps.length);
    };

    Tour.prototype._showStep = function(step, index) {
      if (!step) {
        return;
      }
      step = _.clone(step);
      step.index = index;
      step.total = this.options.steps.length;
      if (!step.final) {
        step.final = this.options.steps.length === index + 1 && !this.options.successStep;
      }
      step = _.extend(step, this._setupStep(step));
      return this.model.set({
        current_step: step
      });
    };

    Tour.prototype._setupStep = function(step) {
      var fn, _i, _len, _ref4;

      if (!(step && step.setup)) {
        return {};
      }
      if (step.bind) {
        _ref4 = step.bind;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          fn = _ref4[_i];
          step[fn] = _.bind(step[fn], step, this, this.options.stepOptions);
        }
      }
      var defOpts = { };
      if(step.target) {
        defOpts.target = step.target;
      }
      return step.setup.call(step, this, this.options.stepOptions) || defOpts;
    };

    Tour.prototype._teardownStep = function(step) {
      if (step && step.teardown) {
        step.teardown.call(step, this, this.options.stepOptions);
      }
      return this.view.cleanupCurrentTarget();
    };

    return Tour;

  })();

}).call(this);
define("tourist", ["backbone"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.Tourist;
    };
}(this)));

define('tourist-omer',[
  'tourist'
  ],
  function() {

    var findPos = function (obj) {
      var curleft = curtop = 2;

      // stylesheet style not getting...
      if(obj.style.position == "fixed") return [2,2];
      if (obj.offsetParent) {
        do {
          curleft += obj.offsetLeft;
          curtop += obj.offsetTop;
        } while (obj = obj.offsetParent);
      }

      return [curleft,curtop];
    };

    //var timer = {};

    var waitUntilAppears = function(selector, iframe, callbackFn, cont_args, count) {
      //clearTimeout(timer);
      var cnt = (count || 0);

      if(iframe) {
        el = document.querySelector(iframe).contentWindow.document.querySelector(selector);
      }
      else {
        el = document.querySelector(selector);
      }
      
      if(el && !el.tagName) { el = el[0]; }

      var repeat = function() {
        cnt++;
        //timer = 
        window.setTimeout(function() {
          waitUntilAppears.call(this, selector, iframe, callbackFn, cont_args, cnt);
        }, 500);
      };

      var fail = function() {
        alert('There has been a problem with the flow of the Walkthrough. Please refresh your page. Don\'t worry, you\'ll start from where you left off!');
      };

      if(cnt > 60) return fail();
      if(!el) return repeat();

      var pos = findPos(el);
      if($(el).height() === 0 || $(el).width() === 0 || pos[0] <= 1) return repeat();
      callbackFn.apply(undefined, cont_args);
    };

    var waitUntilOnDom = function(selector, iframe, callbackFn, cont_args, count) {
      //clearTimeout(timer);
      var cnt = (count || 0);

      if(iframe) {
        el = document.querySelector(iframe).contentWindow.document.querySelector(selector);
      }
      else {
        el = document.querySelector(selector);
      }
      
      if(el && !el.tagName) { el = el[0]; }

      var repeat = function() {
        cnt++;
        //timer = 
        window.setTimeout(function() {
          waitUntilOnDom.call(this, selector, iframe, callbackFn, cont_args, cnt);
        }, 500);
      };

      var fail = function() {
        alert('There has been a problem with the flow of the Walkthrough. Please refresh your page. Don\'t worry, you\'ll start from where you left off!');
      };

      if(cnt > 60) return fail();
      if(!el) return repeat();

      //if($(selector).length === 0) return repeat();
      callbackFn.apply(undefined, cont_args);
    };

    /* ----------- */
    
    Tourist.Tour.prototype.onChangeCurrentStep = function(model, step) {
      if(this.options.onEachStep) this.options.onEachStep.call(this, step);
      return this.view.render(step);
    };

    Tourist.Tour.prototype._showStep = function(step, index) {
      if (!step) {
        return;
      }
      step = _.clone(step);
      step.index = index;
      step.total = this.options.steps.length;
      if (!step.final) {
        step.final = this.options.steps.length === index + 1 && !this.options.successStep;
      }
      /* Needs to be after the wait */
      //step = _.extend(step, this._setupStep(step));
      return this.model.set({
        current_step: step
      });
    };

    Tourist.Tip.Base.prototype.template = _.template('<div>\n  <div class="tour-container">\n    <%= close_button %>\n  <h3><%= title %></h3>  <p class="content"><%= content %></p>\n<em><p><%= tip %></em></p>    <p class="tour-counter <%= counter_class %>"><%= counter%></p>\n  </div>\n  <div class="tour-buttons">\n    <%= buttons %>\n  </div>\n</div>');

    Tourist.Tip.Base.prototype._buildContentElement = function(step) {
      var buttons, content;

      buttons = this._buildButtons(step);

      content = $($.parseHTML(this.template({
        content: step.content,
        title: step.title,
        tip: step.tip||"",
        buttons: buttons,
        close_button: this._buildCloseButton(step),
        counter: step.final ? '' : "step " + (step.index + 1) + " of " + step.total,
        counter_class: step.final ? 'final' : ''
      })));

      if (!buttons) {
        content.find('.tour-buttons').addClass('no-buttons');
      }

      this._renderActionLabels(content);
      return content;
    };


    Tourist.Tour.prototype.next = function() {
      var currentStep, index;

      currentStep = this._teardownCurrentStep();
      index = 0;
      if (currentStep) {
        index = currentStep.index + 1;
      }

      if (index < this.options.steps.length) {

        var step = this.options.steps[index];
        var self = this;
        setTimeout(function() {
          waitUntilAppears(self.options.steps[index].target.selector, self.options.steps[index].iframe, function() {
            self._setupStep(self.options.steps[index]);
          });
        }, step.prepareTime||1);

        return this._showStep(this.options.steps[index], index);
      } else if (index === this.options.steps.length) {
        return this._showSuccessFinalStep();
      } else {
        return this._stop();
      }
    };

    // Tourist.Tour.prototype._setupStep = function(step) {
    //   var fn, _i, _len, _ref4;

    //   if (!(step && step.setup)) {
    //     return {};
    //   }
    //   if (step.bind) {
    //     _ref4 = step.bind;
    //     for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
    //       fn = _ref4[_i];
    //       step[fn] = _.bind(step[fn], step, this, this.options.stepOptions);
    //     }
    //   }
    //   var defOpts = { };
    //   if(step.target) {
    //     defOpts.target = step.target;
    //   }
    //   return step.setup.call(step, this, this.options.stepOptions) || defOpts;
    // };


    Tourist.Tip.Base.prototype.render = function(step) {
      this.hide();
      if (step) {


        var self = this;

        var goToNext = function() {
          waitUntilAppears(step.target.selector, step.iframe, function() {

            if(step.iframe) {
              step.target = $(step.iframe).contents().find(step.target.selector);
            }
            else {
              step.target = $(step.target.selector);
            }

            self._setTarget(step.target || false, step);
            self._setZIndex('');
            self._renderContent(step, self._buildContentElement(step));
            if (step.target) {
              self.show();
            }
            if (step.zIndex) {
              self._setZIndex(step.zIndex, step);
            }
          });
        };

        waitUntilOnDom(step.target.selector, step.iframe, function() {
          if(step.prepare) { step.prepare.call(this); }
          if(step.prepareTime) { setTimeout(function() { goToNext(); }, step.prepareTime); }
          else { goToNext(); }
        });

      }
      return this;
    };


    Tourist.Tip.Bootstrap.prototype._renderContent = function(step, contentElement) {
      var at, my;

      my = String(step.loc.split(',')[0]).trim() || 'left center';
      at = String(step.loc.split(',')[1]).trim() || 'right center';
      this.tip.setContainer(step.container || $('body'));
      this.tip.setContent(contentElement);
      return this.tip.setPosition(step.target || false, my, at, step.iframe);
    };

    return Tourist;
  });
require.config({
    paths: {
        "jquery": "../../libs/jquery/jquery",
        "jquery-ui": "../../libs/jquery-ui/jquery-ui",
        "jquery.hotkeys": "../../libs/jquery/jquery.hotkeys",
        "jquery.freshereditor": "../../libs/jquery/jquery.freshereditor",
        "shortcut": "../../libs/shortcut",
        "underscore": "../../libs/underscore-amd/underscore",
        "backbone": "../../libs/backbone-amd/backbone",
        "react": "../../libs/react",
        "heyoffline": "../../libs/heyoffline",
        "util": "../../libs/util/util",
        "util.filepicker": "../../libs/util/util.filepicker",
        "comp": "../../libs/util/comp",
        "bootstrap": "../../libs/bootstrap/bootstrap",
        "app": "../main-app",
        "editor": "../main-app/editor",
        "m-editor": "../main-app/mobile-editor",
        "dicts": "../main-app/dicts",
        "mixins": "../../mixins",
        "prettyCheckable": "../../libs/jquery/prettyCheckable",
        "list": "../../libs/list",
        "snap": "../../libs/snap.min",
        "tourist": "../../libs/tourist.min",
        "tourist-omer": "../../libs/tourist-omer",
        "models": "../data/models",
        "collections": "../data/collections",
        "tutorial": "../tutorial",
        "wizard": "../wizard",
        "xrayquire": "../../libs/xrayquire",
        // "ace": "../../libs/ace",
        "ace": "//d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace",
        "fontselect": "../../libs/fontselect/jquery.fontselect"
    },

    shim: {
        "jquery-ui": {
            exports: "$",
            deps: ['jquery']
        },
        "jquery.hotkeys": {
            exports: "$",
            deps: ['jquery']
        },
        "jquery.freshereditor": {
            exports: "$",
            deps: ['jquery', 'shortcut']
        },
        "underscore": {
            exports: "_"
        },
        "heyoffline": {
            exports: "Heyoffline"
        },
        "backbone": {
            exports: "Backbone",
            deps: ["underscore", "jquery"]
        },
        "bootstrap": {
            deps: ["jquery"]
        },
        "snap": {
            exports: "Snap"
        },
        "tourist": {
            exports: "Tourist",
            deps: ["backbone"]
        },
        "tourist-omer": {
            exports: "TouristOmer",
            deps: ["tourist"]
        },
        "util.filepicker": {
            exports: "util"
        },
        "react": {
            exports: "React"
        },
        "fontselect": {
            exports: "$",
            deps: ['jquery']
        }
    },

    urlArgs: "bust="

});
require.config({
    urlArgs: "bust=" + staticVersion
});

require.onError = function(err) {
    if (err.requireType === 'timeout' || err.requireType === "scripterror") {
        var el = document.createElement('a');
        el.style.width = '100%';
        el.style.position = 'fixed';
        el.style.top = '120px';
        el.style.textAlign = 'center';
        el.style.cursor = 'pointer';
        el.innerHTML = '<img src="/static/img/mascot-timeout.png">';
        el.addEventListener('click', function() {
            location.reload();
        });
        document.body.appendChild(el);
    } else {
        throw err;
    }
};


//libs
require([
        "models/AppModel",
        "models/ThemeModel",
        "collections/RouteCollection",
        "app/AppRouter",
        "editor/CustomWidgetEditorModal",
        "app/RouteLogger",
        "editor/KeyDispatcher",
        "editor/MouseDispatcher",
        "heyoffline",
        "backbone",
        "bootstrap",
        "util",
        "comp",
        "xrayquire",
        "mixins/BackboneConvenience",
        "tourist-omer"
    ],
    function(AppModel,
        ThemeModel,
        RouteCollection,
        AppRouter,
        CustomWidgetEditorModal,
        RouteLogger,
        KeyDispatcher,
        MouseDispatcher,
        Heyoffline,
        Backbone) {

        // making the dashboard work

        //var CustomWidgetEditorModal = require('editor/CustomWidgetEditorModal');

        $(document).ready(function() {

            if (appState) {
                console.log(appState);
                /* Initialize v1State */
                v1State = new Backbone.Model();
                v1State = new AppModel(appState);
                v1State.set('routes', new RouteCollection(appState.routes || []));

                /* Initialize v1UIEState */
                v1UIEState = new ThemeModel(uieState);

                /* Help with debugging */
                v1State.on('error', function(message) {
                    alert(message);
                });

                /* Track key/mouse events */
                g_guides = {};
                keyDispatcher = new KeyDispatcher();
                mouseDispatcher = new MouseDispatcher();

                // v1State.listenTo(v1, 'saved', function(new_version_id) {
                //     v1State.set('version_id', new_version_id);
                // });


                if (v1State.has('walkthrough')) {
                    require(['app/TwitterTour'], function(QuickTour) {
                        if (!QuickTour.currentStep) return;
                        var url = QuickTour.currentStep.url;
                        v1.navigate('app/' + appId + url, {
                            trigger: true
                        });
                        setTimeout(function() {
                            QuickTour.start();
                        }, 1000);
                    });
                }

                if (v1State.has('simpleWalkthrough')) {
                    require(['app/SimpleTwitterTour'], function(QuickTour) {

                        if (!QuickTour.currentStep) return;
                        var url = QuickTour.currentStep.url;

                        v1.navigate('app/' + appId + url, {
                            trigger: true
                        });
                        setTimeout(function() {
                            QuickTour.start();
                        }, 1000);

                    });
                }


            }
            /* Initialize routing */
            v1 = {};
            v1 = new AppRouter();

            routeLogger = new RouteLogger({
                router: v1
            });

            // on appstate saves, synchronize version ids

            Backbone.history.start({
                pushState: true
            });

            if (DEBUG) {
                showElems = function() {
                    v1State.getCurrentPage().get('uielements').serialize();
                };
            }

            // handle all click events for routing
            $(document).on('click', 'a[rel!="external"]', function(e) {
                var href = e.currentTarget.getAttribute('href') || "";
                // if internal link, navigate with router
                if (href.indexOf('/app/' + appId + '/') == 0) {
                    v1.navigate(href, {
                        trigger: true
                    });
                    return false;
                }
            });

            // scroll to top button animations
            var prevScrollPos = 0;
            var $scrollBtn = $('#scrollUp');
            $(document).on('scroll', function() {
                var $doc = $(this);
                var scrollTop = parseInt($doc.scrollTop());
                var screenHeight = parseInt($doc.height());
                var isHidden = $scrollBtn.hasClass('hidden');
                if (scrollTop > (screenHeight / 4) && isHidden) {
                    $('#scrollUp').removeClass('hidden');
                } else if (scrollTop <= (screenHeight / 4) && !isHidden) {
                    $('#scrollUp').addClass('hidden');
                }
                prevScrollPos = scrollTop;
            });

            $scrollBtn.on('click', function() {
                $('html,body').animate({
                    scrollTop: 0
                }, 100, "linear");
            });

            // heyoffline config
            new Heyoffline();

            // initialize this global variable for use in handling browser version conflicts
            BROWSER_VERSION_ERROR_HAPPENED_BEFORE = false;
        });
    });

define("main",[], function() {});